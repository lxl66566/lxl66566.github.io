import{_ as o,r,o as k,c as p,a as s,b as i,d as t,w as e,e as h}from"./app-C6ZkS1Ee.js";const c={},g=s("h1",{id:"shell-script",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shell-script"},[s("span",null,"shell script")])],-1),u=s("p",null,"说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。",-1),b=s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),f=h('<p>除此之外，还有人既想写出人类可读的代码，又想借用 bash 超高的兼容性，因此便开发了能够编译为 bash 的高阶语言，例如 <a href="https://pnut.sh/" target="_blank" rel="noopener noreferrer">pnut</a>，<a href="https://github.com/amber-lang/amber" target="_blank" rel="noopener noreferrer">amber</a>。</p><h2 id="shebang" tabindex="-1"><a class="header-anchor" href="#shebang"><span><a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="noopener noreferrer">Shebang</a></span></a></h2><p>放在脚本开头，以指示此脚本使用的解释器。因此如果写了 <code>#!/bin/bash</code>，则表示脚本是一个 bash 脚本，可以直接 <code>./filename</code> 执行。</p><p>不过为了最佳的兼容性（NixOS 太怪胎了），可以写成 <code>#!/usr/bin/env bash</code>。</p><h2 id="bash" tabindex="-1"><a class="header-anchor" href="#bash"><span>bash</span></a></h2><p>bash 的兼容性有多强呢？你可以在几乎所有 linux，手机，各种终端设备，windows（通过 WSL 或 msys2），macos（默认 zsh，兼容） 上执行 bash 脚本。基本上这个时代没有几个设备是不用 bash 的。</p><p>此处不会涉及 bash 系统教学，只会零碎记一些知识点。系统学习可以看<a href="#external">external 1.</a>。</p><ul><li>bash 的要义是一切皆字符串。</li><li>启动 bash 时会自动执行 <code>~/.bashrc</code>，这也是一个 bash 脚本。</li><li>bash 按 tab 也能补全，不过默认不显示候选项。</li><li><code>xx1 &amp;&amp; xx2</code> 在 xx1 成功后执行 xx2，<code>xx1 || xx2</code> 在 xx1 失败后执行 xx2</li><li>传参： <ul><li><code>$1</code> 代表第一个参数，类似的…</li><li><code>$@</code> 代表把所有参数原封不动传入（多个参数的地方），而 <code>$*</code> 代表把所有参数合并当成一个字符串传入。</li></ul></li><li><code>${}</code> 不仅用于插值，还用于更多处理。 <ul><li><code>${var:-default}</code>，如果为空则使用默认值</li><li><code>${#var}</code> 是取 len</li><li><code>${var:1:3}</code> 是取 slice，两边都是闭区间，index 从 0 开始</li><li><code>${var/pat/after}</code> 是字符串替换</li></ul></li></ul><h2 id="fish" tabindex="-1"><a class="header-anchor" href="#fish"><span>fish</span></a></h2><p>一般来说三大 shell 指的是 bash, fish, zsh. 而 fish 不兼容 bash，在里面算是比较特立独行的。fish 语法自成一系，不过在一众 shell 里算是比较好学的，缺点是文档写的挺垃圾。fish 使用 rust 重写过一次，<s>搭上了语言原神的顺风车</s>，性能与安全性无需担忧。fish 是不兼容 windows 的，而在 msys2 里用 fish 又总感觉挺不爽的，我只好在 windows 上用其他 shell。</p><p>fish 的语法在我看来算是对传统 shell 的反叛，但是没有叛彻底，还保留了很大一部分 bash 特点，导致 fish 写脚本也十分难写。</p><p>吸引我使用 fish 的最大原因是补全太好用了，爆杀一切其他 shell。fishshell 甚至会自动从 man 生成补全 (<a href="https://t.me/archlinuxcn_group/2974806" target="_blank" rel="noopener noreferrer">ref</a>)。我一般开启 <code>bind \\t forward-word</code>，配置文件只此一行足矣（加载其他软件的命令不算）。</p>',12),y=s("p",null,"set fish as default",-1),m=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}},"# 侵入式就是直接设置默认 shell，包括启动时 (?)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"chsh"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -s"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," fish")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),C=s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}},"# 温和式是先启动 bash，再将 shell 作为 bash 子进程启动")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}},"# edit ~/.bashrc")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," [[ $("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"ps"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," --no-header"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," --pid="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$PPID"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," --format=cmd"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},") "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}},"!="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "fish"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," ]]")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"then")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#56B6C2"}},"    exec"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," fish")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"fi")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),v=h('<li><p>语法：有个叫 <a href="https://github.com/edc/bass" target="_blank" rel="noopener noreferrer">bass</a> 的可以在 fish 里用 bash 语法。不过我觉得不如快速查下鱼文档。</p></li><li><p>环境变量：<a href="https://fishshell.com/docs/2.6/commands.html#set" target="_blank" rel="noopener noreferrer"><code>set</code></a>，注意作用域与是否 export 的问题。</p></li><li><p>函数：fish 大把的指令（包括 alias）都是函数。</p><ul><li>使用 function 新增函数后，可以使用 <code>funcsave &lt;function&gt;</code> 保存到配置文件夹下以便修改与备份，修改后需要重新 source：<code>. ~/.config/fish/config.fish</code></li><li>当然，官方推荐的修改是使用 <code>funced &lt;function&gt;</code>，最好设置 <code>$EDITOR</code> 环境变量，可以在喜欢的编辑器里修改。</li><li>删除函数 / 变量：<code>-e</code> == <code>--erase</code></li></ul></li><li><p>插件：一般使用 <a href="https://github.com/jorgebucaran/fisher" target="_blank" rel="noopener noreferrer">fisher</a> 安装插件。不过我一个都没装，只能说看不上。</p></li>',4),D=h(`<h2 id="zsh" tabindex="-1"><a class="header-anchor" href="#zsh"><span>zsh</span></a></h2><p>zsh 是 bash 统治下的顺从者，其几乎全兼容 bash。zsh 是 macos 的 default shell，因此用户也非常多。</p><p>我曾经尝鲜过一段时间 zsh（入坑作：<a href="#external">external 2.</a>），但是<a href="https://t.me/withabsolutex/1214" target="_blank" rel="noopener noreferrer">补全实在是太垃圾</a>，立刻扔掉了。</p><p>用 zsh 基本离不开 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki" target="_blank" rel="noopener noreferrer">Oh My Zsh</a>，但是这玩意有严重的性能问题(<a href="https://luoxu.archlinuxcn.org/#g=1031857103&amp;q=omz&amp;sender=313927976" target="_blank" rel="noopener noreferrer">ref</a>)，已经在群里问过 N 次了。</p><ul><li>安装 zsh 时会问 set default shell</li></ul><h2 id="nushell" tabindex="-1"><a class="header-anchor" href="#nushell"><span>nushell</span></a></h2><p>nushell 可以说是彻底的反叛者，它自己搓了一套偏函数式的 nu 语言，并重载了许多 posix 指令（以便更好地展示执行结果）。nushell 也使用 rust 实现，性能与安全性无需担忧。nushell 是跨平台的，因此成为我在 windows 上的一个选择。可惜 nushell 补全只能从历史中补，手感还是打不过 fish。</p><p>自己搓语言的基本上都有很高的学习成本，nushell 也不例外。nu 语言有对 rust 的借鉴和<a href="https://t.me/withabsolutex/1698" target="_blank" rel="noopener noreferrer">反叛</a>。</p><p>不过 nushell 最劝退我的还是 <a href="https://t.me/withabsolutex/1700" target="_blank" rel="noopener noreferrer">rust 的一个 bug</a>，导致其无法在我的 RAMDisk 上工作。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>nushell 只有 winget 安装方法（<code>winget install nushell</code>），没有 scoop 安装。</p><p>安装好后，在 nushell 中执行下面的语句：</p><div class="language-nushell line-numbers-mode" data-highlighter="shiki" data-ext="nushell" data-title="nushell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">config env</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">$nu</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">.default-config-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> path join</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;env.nu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">config nu</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">$nu</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">.default-config-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> path join</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;config.nu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>即可在配置文件夹生成默认配置。然后就是编辑配置即可，官方建议单独开一个 <code>custom.nu</code> 写自己的配置，然后 source 到主配置（<code>config.nu</code>）中。</p><div class="language-nushell line-numbers-mode" data-highlighter="shiki" data-ext="nushell" data-title="nushell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">$nu</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">.default-config-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> path join</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;custom.nu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="powershell" tabindex="-1"><a class="header-anchor" href="#powershell"><span>powershell</span></a></h2><p>一般的 windows 都自带 powershell 1.0。但是有的命令在老版本 powershell 上会执行失败，可以用 <code>scoop install pwsh</code> 安装最新版本的 powershell。</p><ul><li>Windows 上难免会遇上带空格的可执行文件路径，但是直接使用双引号包裹并不能执行该命令。需要在双引号前添加 <code>&amp;</code> 才可以将字符串视为可执行文件执行。</li></ul><h2 id="xonsh" tabindex="-1"><a class="header-anchor" href="#xonsh"><span>xonsh</span></a></h2><p>我一看到 xonsh 就把它加到了我的 👍 list 里。它不自创脚本语言，而是使用 python 作为其解释器。在 python 爆火的当下，xonsh 可能是一个不错的选择，它完全避开了高昂的学习成本和 bash 脚本的难用，还能借 python 优秀的跨平台能力为所欲为。</p><p>虽然我还没开始用 xonsh，不过将来我一定会去试一试的。</p><h2 id="amber" tabindex="-1"><a class="header-anchor" href="#amber"><span>amber</span></a></h2><p>amber 是总论提到的编译到 bash 语言的一个高阶语言；它使用 rust 实现，并且有较为完善的文档和 tutorial。我也为这个项目发过 PR，不过是依赖相关，跟代码逻辑没什么关系。</p><p>这个项目的代码我只能说真是一坨屎山。在用几乎最新的 rust 和 cargo 情况下，没有修 clippy issue 也就算了，连 rustfmt 都没过就有点过分了吧。。。屎山也就算了，我跑 <code>cargo test</code> 也跑不了，正常使用也用不了，这什么垃圾玩意。。</p><h2 id="杂" tabindex="-1"><a class="header-anchor" href="#杂"><span>杂</span></a></h2>`,25),x=s("a",{href:"https://stackoverflow.com/questions/226703/how-do-i-prompt-for-yes-no-cancel-input-in-a-linux-shell-script/27875395#27875395",target:"_blank",rel:"noopener noreferrer"},"Y/n 选择器",-1),A=s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#56B6C2"}},"read"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -n"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -p"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "Are you sure to clean git and push force? (y/N) "'),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," answer")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"case"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," ${"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"answer"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"0"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"} "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"in")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#E06C75"}},"    y"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#ABB2BF"}},"|"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#E06C75"}},"Y"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#ABB2BF"}}," )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#56B6C2"}},"        echo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "Y"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"    ;;")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#ABB2BF"}},"    * )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#56B6C2"}},"        echo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "do nothing"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"    ;;")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"esac")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),B=s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}},"# fish 的语法有些许差别。。例如 `-P` 大写")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#56B6C2"}},"read"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -n"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -P"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," 'Use tldr instead of man? (Y/n) '"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," answer")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"switch"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}}," $answer")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"    case n N")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"        /usr/sbin/man"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$argv"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"    case "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},"'*'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"        tldr"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$argv"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"end")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_=h('<h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://wangdoc.com/bash/" target="_blank" rel="noopener noreferrer">bash 脚本教程</a></li><li><a href="https://sysin.org/blog/linux-zsh/" target="_blank" rel="noopener noreferrer">Linux Zsh 使用 oh-my-zsh 打造高效便捷的 shell 环境</a></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>尝试写个大脚本，<a href="https://t.me/withabsolutex/1374" target="_blank" rel="noopener noreferrer">未果，几欲去世</a>。数组做输入值和返回值各种妖魔鬼怪乱飞 (<code>&quot;${arr[@]}&quot;</code>)。我的评价是还是<strong>写点阳间语言</strong>吧，就算是 fish 都比 bash 好看多了。python 也很泛用的，而且比起 lua 更好写。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',4);function F(E,w){const d=r("RouteLink"),n=r("CodeTabs");return k(),p("div",null,[g,u,s("p",null,[i("当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意"),b,i("使用 bash 编写程序的。有许多脚本语言可以用来替代 bash，例如我已经用 "),t(d,{to:"/coding/python.html"},{default:e(()=>[i("python")]),_:1}),i(" 写脚本很久了。还有许多与 bash 竞争的 shell 本身也自带了一门脚本语言，例如 fish，nu 等，甚至 just 也能算一个 bash 的竞争者。这些脚本需要专门的解释器运行，我也会放在后面介绍。")]),f,s("ul",null,[s("li",null,[y,t(n,{id:"113",data:[{id:"侵入式"},{id:"温和式"}]},{title0:e(({value:l,isActive:a})=>[i("侵入式")]),title1:e(({value:l,isActive:a})=>[i("温和式")]),tab0:e(({value:l,isActive:a})=>[m]),tab1:e(({value:l,isActive:a})=>[C]),_:1})]),v]),D,s("ul",null,[s("li",null,[x,t(n,{id:"244",data:[{id:"bash"},{id:"fish"}]},{title0:e(({value:l,isActive:a})=>[i("bash")]),title1:e(({value:l,isActive:a})=>[i("fish")]),tab0:e(({value:l,isActive:a})=>[A]),tab1:e(({value:l,isActive:a})=>[B]),_:1})])]),_])}const $=o(c,[["render",F],["__file","shell.html.vue"]]),T=JSON.parse('{"path":"/coding/shell.html","title":"shell script","lang":"zh-CN","frontmatter":{"date":"2024-07-24T00:00:00.000Z","icon":"fish","category":["编程"],"tag":["编程语言"],"description":"shell script 说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。 当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意[1]使用 bash 编写程序的。有许多脚本语言可以用来替代 ba...","head":[["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/shell.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"shell script"}],["meta",{"property":"og:description","content":"shell script 说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。 当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意[1]使用 bash 编写程序的。有许多脚本语言可以用来替代 ba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T16:41:58.000Z"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T16:41:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"shell script\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-23T16:41:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Shebang","slug":"shebang","link":"#shebang","children":[]},{"level":2,"title":"bash","slug":"bash","link":"#bash","children":[]},{"level":2,"title":"fish","slug":"fish","link":"#fish","children":[]},{"level":2,"title":"zsh","slug":"zsh","link":"#zsh","children":[]},{"level":2,"title":"nushell","slug":"nushell","link":"#nushell","children":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}]},{"level":2,"title":"powershell","slug":"powershell","link":"#powershell","children":[]},{"level":2,"title":"xonsh","slug":"xonsh","link":"#xonsh","children":[]},{"level":2,"title":"amber","slug":"amber","link":"#amber","children":[]},{"level":2,"title":"杂","slug":"杂","link":"#杂","children":[]},{"level":2,"title":"external","slug":"external","link":"#external","children":[]}],"git":{"createdTime":1721834753000,"updatedTime":1734972118000,"contributors":[{"name":"lxl66566","email":"lxl66566@gmail.com","commits":6}]},"readingTime":{"minutes":6.77,"words":2032},"filePathRelative":"coding/shell.md","localizedDate":"2024年7月24日","excerpt":"\\n","autoDesc":true}');export{$ as comp,T as data};
