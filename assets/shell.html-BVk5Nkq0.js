import{_ as p,e as k,g as s,f as n,h as e,i as h,j as l,r as d,o as c}from"./app-BLXsDLQq.js";const g={};function u(b,i){const r=d("RouteLink"),o=d("CodeTabs");return c(),k("div",null,[i[24]||(i[24]=s("h1",{id:"shell-script",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shell-script"},[s("span",null,"shell script")])],-1)),i[25]||(i[25]=s("p",null,"说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。",-1)),s("p",null,[i[1]||(i[1]=e("当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意")),i[2]||(i[2]=s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1)),i[3]||(i[3]=e("使用 bash 编写程序的。有许多脚本语言可以用来替代 bash，例如我已经用 ")),h(r,{to:"/coding/python.html"},{default:l(()=>i[0]||(i[0]=[e("python")])),_:1}),i[4]||(i[4]=e(" 写脚本很久了。还有许多与 bash 竞争的 shell 本身也自带了一门脚本语言，例如 fish，nu 等，甚至 just 也能算一个 bash 的竞争者。这些脚本需要专门的解释器运行，我也会放在后面介绍。"))]),i[26]||(i[26]=n('<p>除此之外，还有人既想写出人类可读的代码，又想借用 bash 超高的兼容性，因此便开发了能够编译为 bash 的高阶语言，例如 <a href="https://pnut.sh/" target="_blank" rel="noopener noreferrer">pnut</a>，<a href="https://github.com/amber-lang/amber" target="_blank" rel="noopener noreferrer">amber</a>。</p><h2 id="shebang" tabindex="-1"><a class="header-anchor" href="#shebang"><span><a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="noopener noreferrer">Shebang</a></span></a></h2><p>放在脚本开头，以指示此脚本使用的解释器。因此如果写了 <code>#!/bin/bash</code>，则表示脚本是一个 bash 脚本，可以直接 <code>./filename</code> 执行。</p><p>不过为了最佳的兼容性（NixOS 太怪胎了），可以写成 <code>#!/usr/bin/env bash</code>。</p><h2 id="bash" tabindex="-1"><a class="header-anchor" href="#bash"><span>bash</span></a></h2><p>bash 的兼容性有多强呢？你可以在几乎所有 linux，手机，各种终端设备，windows（通过 WSL 或 msys2），macos（默认 zsh，兼容） 上执行 bash 脚本。基本上这个时代没有几个设备是不用 bash 的。</p><h3 id="在-windows-上使用-bash" tabindex="-1"><a class="header-anchor" href="#在-windows-上使用-bash"><span>在 Windows 上使用 bash</span></a></h3>',7)),s("ol",null,[s("li",null,[i[6]||(i[6]=e("使用 ")),h(r,{to:"/farraginous/recommend_packages.html#scoop"},{default:l(()=>i[5]||(i[5]=[e("scoop")])),_:1}),i[7]||(i[7]=e(" 安装 git：")),i[8]||(i[8]=s("code",null,"scoop install git",-1))]),i[9]||(i[9]=n("<li>进入 <code>scoop/shims</code> （默认位置在 <code>C:\\Users\\&lt;username&gt;\\scoop\\shims</code>）</li><li>为 <code>scoop/shims/bash.exe</code> 创建一个快捷方式，重命名为 <code>bash</code>（本质上是 <code>bash.lnk</code>，windows11 不显示快捷方式的扩展名），扔到 <code>C:\\WINDOWS\\System32</code></li><li>编辑系统环境变量，把 <code>C:\\Users\\&lt;username&gt;\\scoop\\shims</code> 和 <code>C:\\WINDOWS\\System32</code> 放到靠前的位置。</li>",3))]),i[27]||(i[27]=n('<p>这样你就可以在 <code>Win+R</code> 的运行或者任意 cmd 里使用 <code>bash</code> 打开 bash 了，并且不会开一个新窗口。</p><h3 id="随笔" tabindex="-1"><a class="header-anchor" href="#随笔"><span>随笔</span></a></h3><p>此处不会涉及 bash 系统教学，只会零碎记一些知识点。系统学习可以看<a href="#external">external 1.</a>。</p><ul><li>bash 的要义是一切皆字符串。</li><li>启动 bash 时会自动执行 <code>~/.bashrc</code>，这也是一个 bash 脚本。</li><li>bash 按 tab 也能补全，不过默认不显示候选项。</li><li><code>xx1 &amp;&amp; xx2</code> 在 xx1 成功后执行 xx2，<code>xx1 || xx2</code> 在 xx1 失败后执行 xx2</li><li>传参： <ul><li><code>$1</code> 代表第一个参数，类似的…</li><li><code>$@</code> 代表把所有参数原封不动传入（多个参数的地方），而 <code>$*</code> 代表把所有参数合并当成一个字符串传入。</li><li>虽然 <code>&quot;$@&quot;</code> 经常用于接收任意长度的用户 command，但是如果用户 command 里带了 <code>&quot;</code> 或 <code>&#39;</code> 的话又会出问题。最稳妥的做法是 <code>$(printf &#39;%q &#39; &quot;$@&quot;)</code>，这样可以获取所有用户输入，将其作为一个 str 的指令并自动处理转义。</li></ul></li><li><code>${}</code> 不仅用于插值，还用于更多处理。 <ul><li><code>${var:-default}</code>，如果为空则使用默认值</li><li><code>${#var}</code> 是取 len</li><li><code>${var:1:3}</code> 是取 slice，两边都是闭区间，index 从 0 开始</li><li><code>${var/pat/after}</code> 是字符串替换</li></ul></li><li>bash 的 wildcard 里，<code>*</code> 是不会匹配 <code>.</code> 开头的隐藏文件的！被坑了。</li></ul><p>关于 ble.sh：经常会有文章（例如 atuin 的 installation）会推荐 ble.sh，但是我尝试以后发现，不好用！只要你快速输入内容并且穿插多按几次 tab，你就能被 ble.sh 的 bug 坑到；而且 ble.sh 的启动很慢。因此我只能忍受没有补全提示的 bash —— windows 上还是这样将就着用吧。</p><h2 id="fish" tabindex="-1"><a class="header-anchor" href="#fish"><span>fish</span></a></h2><p>一般来说三大 shell 指的是 bash, fish, zsh。而 fish 不兼容 bash，语法自成一系，在 shell 中算是比较特立独行的。fish 使用 rust 重写过一次，<s>搭上了语言原神的顺风车</s>，性能与安全性无需担忧。fish 是不兼容 windows 的，而在 msys2 里用 fish 又总感觉挺不爽的，我只好在 windows 上用<a href="#nushell">其他 shell</a>。</p><p>fish 的语法在我看来算是对传统 shell 的反叛，但是没有叛彻底，还保留了很大一部分 bash 特点，导致 fish 写脚本也十分难写，文档也垃圾，作为一门脚本语言来说 fish 是失败的。</p><p>但我还是离不开 fish，唯一原因是 <strong>补全太好用了，爆杀一切其他 shell</strong>。fishshell 可以自动检测 path，甚至会自动从 man 生成补全 (<a href="https://t.me/archlinuxcn_group/2974806" target="_blank" rel="noopener noreferrer">ref</a>)，一旦用过就再也离不开了。我一般开启 <code>bind \\t forward-word</code>，配置文件只此一行足矣（加载其他软件的命令和 alias 不算），fish 的默认配置已经足够好用，没有必要再去搞什么 oh-my-fish。</p>',9)),s("ul",null,[s("li",null,[i[14]||(i[14]=s("p",null,"set fish as default",-1)),h(o,{id:"157",data:[{id:"侵入式"},{id:"温和式"}]},{title0:l(({value:a,isActive:t})=>i[10]||(i[10]=[e("侵入式")])),title1:l(({value:a,isActive:t})=>i[11]||(i[11]=[e("温和式")])),tab0:l(({value:a,isActive:t})=>i[12]||(i[12]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 侵入式就是直接设置默认 shell，包括启动时 (?)")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"chsh"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -s"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," fish")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:l(({value:a,isActive:t})=>i[13]||(i[13]=[s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 温和式是先启动 bash，再将 shell 作为 bash 子进程启动")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# edit ~/.bashrc")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"if"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," [[ $("),s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"ps"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --no-header"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --pid="),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"$PPID"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --format=cmd"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"!="),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "fish"'),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ]]")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"then")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"    exec"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," fish")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"fi")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1})]),i[15]||(i[15]=n('<li><p>语法：有个叫 <a href="https://github.com/edc/bass" target="_blank" rel="noopener noreferrer">bass</a> 的可以在 fish 里用 bash 语法。不过我觉得不如快速查下鱼文档。</p></li><li><p>环境变量：<a href="https://fishshell.com/docs/2.6/commands.html#set" target="_blank" rel="noopener noreferrer"><code>set</code></a>，注意作用域与是否 export 的问题。</p></li><li><p>函数：fish 大把的指令（包括 alias）都是函数。</p><ul><li>使用 function 新增函数后，可以使用 <code>funcsave &lt;function&gt;</code> 保存到配置文件夹下以便修改与备份，修改后需要重新 source：<code>. ~/.config/fish/config.fish</code></li><li>当然，官方推荐的修改是使用 <code>funced &lt;function&gt;</code>，最好设置 <code>$EDITOR</code> 环境变量，可以在喜欢的编辑器里修改。</li><li>删除函数 / 变量：<code>-e</code> == <code>--erase</code></li></ul></li><li><p>插件：一般使用 <a href="https://github.com/jorgebucaran/fisher" target="_blank" rel="noopener noreferrer">fisher</a> 安装插件。不过我一个都没装，只能说看不上。</p></li>',4))]),i[28]||(i[28]=n('<h2 id="zsh" tabindex="-1"><a class="header-anchor" href="#zsh"><span>zsh</span></a></h2><p>zsh 是 bash 统治下的顺从者，其几乎全兼容 bash。zsh 是 macos 的 default shell，因此用户也非常多。</p><p>我曾经尝鲜过一段时间 zsh（入坑作：<a href="#external">external 2.</a>），但是<a href="https://t.me/withabsolutex/1214" target="_blank" rel="noopener noreferrer">补全实在是太垃圾</a>，立刻扔掉了。</p><p>经常会有人推荐 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki" target="_blank" rel="noopener noreferrer">Oh My Zsh</a>，但是这玩意有严重的性能问题(<a href="https://luoxu.archlinuxcn.org/#g=1031857103&amp;q=omz&amp;sender=313927976" target="_blank" rel="noopener noreferrer">ref</a>)，已经在群里问过 N 次了。新人不如尝试一下 <a href="https://github.com/zdharma-continuum/zinit" target="_blank" rel="noopener noreferrer">zinit</a>。</p><ul><li>安装 zsh 时会问 set default shell</li></ul><h2 id="nushell" tabindex="-1"><a class="header-anchor" href="#nushell"><span>nushell</span></a></h2><p>nushell 可以说是彻底的反叛者，它自己搓了一套偏函数式的 nu 语言，并重载了许多 posix 指令（以便更好地展示执行结果）。nushell 也使用 rust 实现，性能与安全性无需担忧。nushell 是跨平台的，因此成为我在 windows 上的一个选择。</p><p>自己搓语言的基本上都有很高的学习成本，nushell 也不例外。nu 语言有对 rust 的借鉴和<a href="https://t.me/withabsolutex/1698" target="_blank" rel="noopener noreferrer">反叛</a>。</p><p>不过 nushell 最劝退我的还是 <a href="https://t.me/withabsolutex/1700" target="_blank" rel="noopener noreferrer">rust 的一个 bug</a>，导致其无法在我的 RAMDisk 上工作。</p>',9)),s("p",null,[i[17]||(i[17]=e("其他缺点详见 ")),h(r,{to:"/gossip/fuckxxx.html#nushell"},{default:l(()=>i[16]||(i[16]=[e("fuckxxx")])),_:1}),i[18]||(i[18]=e("。总之我已经不再使用它了。"))]),i[29]||(i[29]=n('<h3 id="shell-配置" tabindex="-1"><a class="header-anchor" href="#shell-配置"><span>shell 配置</span></a></h3><p>nushell 只有 winget 安装方法（<code>winget install nushell</code>），没有 scoop 安装。</p><p>安装好后，在 nushell 中执行下面的语句：</p><div class="language-nushell line-numbers-mode" data-highlighter="shiki" data-ext="nushell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">config env</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$nu</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">.default-config-dir</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> path join</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;env.nu&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">config nu</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$nu</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">.default-config-dir</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> path join</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;config.nu&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>即可在配置文件夹生成默认配置。然后就是编辑配置即可，官方建议单独开一个 <code>custom.nu</code> 写自己的配置，然后 source 到主配置（<code>config.nu</code>）中。</p><div class="language-nushell line-numbers-mode" data-highlighter="shiki" data-ext="nushell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$nu</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">.default-config-dir</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> path join</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;custom.nu&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h3><p>nushell 的<a href="https://github.com/nushell/nushell/issues/11108" target="_blank" rel="noopener noreferrer">类型系统</a>可以说是尚未起步的。没有联合类型算什么 type system。</p><ul><li>其他语言的空概念在 nushell 里叫 <code>nothing</code>。哈哈，就是要自己造词。</li></ul><h2 id="powershell" tabindex="-1"><a class="header-anchor" href="#powershell"><span>powershell</span></a></h2><p>一般的 windows 都自带 powershell 1.0。但是有的命令在老版本 powershell 上会执行失败，可以用 <code>scoop install pwsh</code> 安装最新版本的 powershell。</p><ul><li>Windows 上难免会遇上带空格的可执行文件路径，但是直接使用双引号包裹并不能执行该命令。需要在双引号前添加 <code>&amp;</code> 才可以将字符串视为可执行文件执行。</li></ul><h2 id="xonsh" tabindex="-1"><a class="header-anchor" href="#xonsh"><span>xonsh</span></a></h2><p>我一看到 xonsh 就把它加到了我的 👍 list 里。它不自创脚本语言，而是使用 python 作为其解释器。在 python 爆火的当下，xonsh 可能是一个不错的选择，它完全避开了高昂的学习成本和 bash 脚本的难用，还能借 python 优秀的跨平台能力为所欲为。</p><p>虽然我还没开始用 xonsh，不过将来我一定会去试一试的。</p><h2 id="amber" tabindex="-1"><a class="header-anchor" href="#amber"><span>amber</span></a></h2><p>amber 是总论提到的编译到 bash 语言的一个高阶语言；它使用 rust 实现，并且有较为完善的文档和 tutorial。我也为这个项目发过 PR，不过是依赖相关，跟代码逻辑没什么关系。</p><p>这个项目的代码我只能说真是一坨屎山。在用几乎最新的 rust 和 cargo 情况下，没有修 clippy issue 也就算了，连 rustfmt 都没过就有点过分了吧。。。屎山也就算了，我跑 <code>cargo test</code> 也跑不了，正常使用也用不了，这什么垃圾玩意。。</p><h2 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile"><span>Makefile</span></a></h2><p><s>谁说 Makefile 就不是一种 shell script 了？</s></p><p>一般把 Makefile 理解成一堆 bash 函数即可。然后 make 命令行提供了函数间依赖关系，和单独执行某一个函数的功能，还有杂七杂八基本用不到的功能。反正只要把 Makefile 理解成 bash 执行器即可。</p><ul><li>makefile 一个核心功能是，target 这个路径如果存在文件，该 target 就不会再执行。然后 <code>.PHONY xxx</code> 的意思就是即使 xxx 存在文件，这个 target 也会再次执行。一般需要将纯指令，例如 clean，all，install 等加入 <code>.PHONY</code>。</li><li>要在一个 Makefile 里对子 Makefile 进行执行，使用 <code>$(MAKE) -C xxxdir args</code>。相当于 <code>cd xxxdir &amp;&amp; make args &amp;&amp; cd -</code>。</li><li>插值 <code>$()</code> 和 <code>${}</code> 完全一致。</li><li><code>:=</code> 和 <code>=</code> 都是变量赋值，其中 <code>=</code> 是延迟展开，<code>:=</code> 是立即计算。</li><li>如果要把值给子 Makefile 使用，直接 <code>export value</code>.</li><li>Makefile 的每一行都算是不同的环境，因此如果需要在 Makefile 里使用 cd 需要将上下文都写在同一条指令里。</li><li>命令前添加 <code>@</code> 表示不打印出这条命令。</li><li>不要再用 <code>-j8</code> 了！请使用全部核心：<code>make -j$(nproc)</code><ul><li>对子 Makefile 进行 make 的时候会继承核心数。</li></ul></li></ul><h2 id="杂" tabindex="-1"><a class="header-anchor" href="#杂"><span>杂</span></a></h2>',23)),s("ul",null,[s("li",null,[i[23]||(i[23]=s("a",{href:"https://stackoverflow.com/questions/226703/how-do-i-prompt-for-yes-no-cancel-input-in-a-linux-shell-script/27875395#27875395",target:"_blank",rel:"noopener noreferrer"},"Y/n 选择器",-1)),h(o,{id:"362",data:[{id:"bash"},{id:"fish"}]},{title0:l(({value:a,isActive:t})=>i[19]||(i[19]=[e("bash")])),title1:l(({value:a,isActive:t})=>i[20]||(i[20]=[e("fish")])),tab0:l(({value:a,isActive:t})=>i[21]||(i[21]=[s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"read"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -n"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -p"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "Are you sure to clean git and push force? (y/N) "'),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," answer")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"case"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#ABB2BF"}}," ${"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"answer"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"0"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},":"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"1"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#ABB2BF"}},"}"),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," in")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#E06C75"}},"    y"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"|"),s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#E06C75"}},"Y"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," )")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"        echo"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "Y"')]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    ;;")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    * )")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"        echo"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "do nothing"')]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    ;;")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"esac")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:l(({value:a,isActive:t})=>i[22]||(i[22]=[s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# fish 的语法有些许差别。。例如 `-P` 大写")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"read"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -n"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," 1"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -P"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'Use tldr instead of man? (Y/n) '"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," answer")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"switch"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}}," $answer")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    case n N")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"        /usr/sbin/man"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "'),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"$argv"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"')]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    case "),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"'*'")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"        tldr"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "'),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"$argv"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"')]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"end")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1})])]),i[30]||(i[30]=n('<h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://wangdoc.com/bash/" target="_blank" rel="noopener noreferrer">bash 脚本教程</a></li><li><a href="https://sysin.org/blog/linux-zsh/" target="_blank" rel="noopener noreferrer">Linux Zsh 使用 oh-my-zsh 打造高效便捷的 shell 环境</a></li><li><a href="https://mywiki.wooledge.org/BashFAQ/105" target="_blank" rel="noopener noreferrer">Why doesn&#39;t set -e (or set -o errexit, or trap ERR) do what I expected?</a></li><li>Online book: <a href="https://effective-shell.com/" target="_blank" rel="noopener noreferrer">Effective Shell</a> (about bash)</li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>尝试写个大脚本，<a href="https://t.me/withabsolutex/1374" target="_blank" rel="noopener noreferrer">未果，几欲去世</a>。数组做输入值和返回值各种妖魔鬼怪乱飞 (<code>&quot;${arr[@]}&quot;</code>)。我的评价是还是<strong>写点阳间语言</strong>吧，就算是 fish 都比 bash 好看多了。python 也很泛用的，而且比起 lua 更好写。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',4))])}const m=p(g,[["render",u],["__file","shell.html.vue"]]),y=JSON.parse('{"path":"/coding/shell.html","title":"shell script","lang":"zh-CN","frontmatter":{"date":"2024-07-24T00:00:00.000Z","icon":"fish","category":["编程"],"tag":["编程语言"],"description":"shell script 说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。 当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意[1]使用 bash 编写程序的。有许多脚本语言可以用来替代 ba...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"shell script\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-17T15:22:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/shell.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"shell script"}],["meta",{"property":"og:description","content":"shell script 说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。 当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意[1]使用 bash 编写程序的。有许多脚本语言可以用来替代 ba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-17T15:22:36.000Z"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-17T15:22:36.000Z"}]]},"git":{"createdTime":1721834753000,"updatedTime":1758122556000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"lxl66566@gmail.com","commits":15,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":9.31,"words":2794},"filePathRelative":"coding/shell.md","localizedDate":"2024年7月24日","excerpt":"\\n","autoDesc":true}');export{m as comp,y as data};
