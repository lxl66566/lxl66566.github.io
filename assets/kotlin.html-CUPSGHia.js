import{_ as o,e as r,g as s,f as t,h as e,i as n,j as l,r as d,o as p}from"./app-CXoHY-lu.js";const h={};function k(c,i){const a=d("RouteLink");return p(),r("div",null,[i[8]||(i[8]=s("h1",{id:"kotlin",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#kotlin"},[s("span",null,"kotlin")])],-1)),i[9]||(i[9]=s("p",null,"java 的替代品，可以无缝集成 java。Android 开发的官方语言。更现代的语法。",-1)),i[10]||(i[10]=s("h2",{id:"我的入坑",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#我的入坑"},[s("span",null,"我的入坑")])],-1)),s("p",null,[i[1]||(i[1]=e("学了 ")),n(a,{to:"/coding/java.html"},{default:l(()=>i[0]||(i[0]=[e("java")])),_:1}),i[2]||(i[2]=e(" 以后，感觉太捞了。追求新潮流的本性让我想学习之。而且，我也比较喜欢 kotlin 的一些设计理念（")),i[3]||(i[3]=s("a",{href:"#%E5%9F%BA%E7%A1%80"},"空安全",-1)),i[4]||(i[4]=e("）。"))]),i[11]||(i[11]=t('<h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h2><p>配了半天，感觉 kotlin 的开发生态还是比 java 差多了。vscode 里搜 kotlin，都出不来几个插件。</p><p>我尝试 all in vscode，</p><ol><li>安装扩展 <em>Kotlin Language</em></li><li>新建 xxx.kt 文件，写点 helloworld</li><li>终端 <code>kotlinc xxx.kt -include-runtime -d xxx.jar &amp;&amp; java -jar xxx.jar</code>（本质上是编译出 jar 包然后用 java 执行） <ul><li>可以安装 code runner (&lt;1M) 简化这一流程。（但是这玩意有点流氓，会替换你的运行图标）</li><li>可以设命令行 alias</li></ul></li></ol><p>Kotlin Language 只能提供代码高亮，而没有 linter。如果想要 linter，可能需要用 <em>Kotlin</em> 扩展，但是其需要运行在 inside a Gradle or Maven project，且文档中并没有写如何配置，我也折腾不清楚。</p>',5)),s("p",null,[i[6]||(i[6]=e("如果可能的话，还是用 ")),n(a,{to:"/coding/android.html#android-studio"},{default:l(()=>i[5]||(i[5]=[e("Android Studio")])),_:1}),i[7]||(i[7]=e(" / IDEA 吧。"))]),i[12]||(i[12]=t(`<h3 id="formatter" tabindex="-1"><a class="header-anchor" href="#formatter"><span>formatter</span></a></h3><p>试了下 vscode 扩展中的两个 kotlin formatter，都用不了，评价为捞。</p><p>然后试 <a href="https://github.com/facebook/ktfmt" target="_blank" rel="noopener noreferrer">ktfmt</a>。</p><ol><li>安装 <em>ktfmt</em> vscode 扩展</li><li>下载 <code>ktfmt-version-jar-with-dependencies.jar</code> （必需要 with-dependencies，否则无效）</li><li>更改 settings.json（要改的还挺多，注意路径）<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;java.configuration.runtimes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;OpenJDK-22&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;path&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/scoop/apps/openjdk22/current&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;default&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;ktfmt.path-to-jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/no_install_software/ktfmt-0.50-jar-with-dependencies.jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;[kotlin]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;crdrost.ktfmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;[kotlinscript]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;crdrost.ktfmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>就可以保存时自动格式化了。</p><p>kotlin 没有官方推出的统一格式化工具，外加用的 jar + 虚拟机非常慢，每次保存时是可以感受到明显延迟的。</p><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h2><p>说到 <em>快速</em> 二字，那当然还得是我 <a href="https://learnxinyminutes.com/docs/zh-cn/kotlin-cn/" target="_blank" rel="noopener noreferrer">learnxinyminutes</a> 了。</p><p>当然只看这点肯定不够，泛型，接口，数据结构深入，这里都不会讲，需要额外学习。</p><p>泛型和面向对象跟 java 基本一样，不过后者倒是添了很多新东西。</p><p>有了上述基础概念，然后再看一些 kotlin 进阶的零碎内容，用于补全知识。</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><ul><li>类型转换有一堆 <code>.toXxx</code> 能用。但是不能直接 as。</li><li><a href="https://book.kotlincn.net/text/null-safety.html" target="_blank" rel="noopener noreferrer">空安全</a>：挺不错的语法糖，引起了我最初对 kotlin 的兴趣。但是实际上挺少，也就 <code>?.</code>, <code>?:</code>, <code>!!</code> 三个而已。</li><li><code>Unit</code> type 就是 void</li></ul><h3 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h3><ul><li>如果函数最后一个参数是 lambda 函数，可以吊在末尾。</li><li><a href="https://kotlinlang.org/docs/scope-functions.html" target="_blank" rel="noopener noreferrer">Scope functions</a>：<code>let</code>, <code>run</code>, <code>with</code>, <code>apply</code>, and <code>also</code>，<s>包好吃的糖</s><ul><li>还有 <code>ifEmpty</code> 也是链式的。</li></ul></li></ul><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><p><a href="https://narenkmanoharan.gitbooks.io/effective-kotlin/content/chapter-4-generics.html" target="_blank" rel="noopener noreferrer">Effective Kotlin</a> 讲的不错。</p><p>kotlin 的泛型太弱了。实际写东西的时候基本都是 <code>Any</code> 乱飘。</p><ul><li>添加多个约束必须用 where，比起 rust 直接 <code>+</code> 少了点糖。</li><li>居然没有一个约束能让 <code>T + T</code> 成立？也就是没有一个 <code>Addable&lt;T&gt;</code>？</li><li>没有 android 长度约束，例如限定 T 只能接受 Dp, Sp, Px 等。</li><li>类型推断必须是立刻，不像 Rust 可以先定义未知泛型对象，后续再推定。直观地说，下面的语句会报错：<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mutableListOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h2><ul><li>kotlin 会自动为 public 成员生成 setter/getter。这样的本意是好的，但是如果你的 class 继承自一个 interface，而这个 interface 里的函数是 setter/getter 同名函数，那么实现 <code>override fun getXxx</code> 后编译就会报错 <em>The following declarations have the same JVM signature</em>，还是比较具有迷惑性的。如果你有这样的函数，记得把成员声明为 private。 <ul><li>最理想的应该是 kotlin 生成的 setter/getter 自动 impl 了这个 interface，可惜 kotlin 不这样干。这样必须 private 后自己重写一遍 setter/getter，还是很丑的。</li></ul></li><li>companion object 里的函数相当于 static fun，但是子类<strong>不会继承</strong> companion object。</li><li>Kotlin 的 class 对象都是 <code>KClass&lt;*&gt;</code>，对于接受 java class 的地方需要加 <code>.java</code></li></ul><h2 id="杂" tabindex="-1"><a class="header-anchor" href="#杂"><span>杂</span></a></h2><ul><li><a href="https://kotlinlang.org/docs/kotlin-doc.html" target="_blank" rel="noopener noreferrer">如何写 doc comment</a></li></ul>`,23))])}const m=o(h,[["render",k],["__file","kotlin.html.vue"]]),g=JSON.parse('{"path":"/coding/kotlin.html","title":"kotlin","lang":"zh-CN","frontmatter":{"date":"2023-05-26T00:00:00.000Z","icon":"code","category":["编程"],"tag":["编程语言"],"description":"kotlin java 的替代品，可以无缝集成 java。Android 开发的官方语言。更现代的语法。 我的入坑 学了 以后，感觉太捞了。追求新潮流的本性让我想学习之。而且，我也比较喜欢 kotlin 的一些设计理念（空安全）。 开发环境 配了半天，感觉 kotlin 的开发生态还是比 java 差多了。vscode 里搜 kotlin，都出不来几个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kotlin\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-22T12:41:38.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/kotlin.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"kotlin"}],["meta",{"property":"og:description","content":"kotlin java 的替代品，可以无缝集成 java。Android 开发的官方语言。更现代的语法。 我的入坑 学了 以后，感觉太捞了。追求新潮流的本性让我想学习之。而且，我也比较喜欢 kotlin 的一些设计理念（空安全）。 开发环境 配了半天，感觉 kotlin 的开发生态还是比 java 差多了。vscode 里搜 kotlin，都出不来几个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T12:41:38.000Z"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:published_time","content":"2023-05-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T12:41:38.000Z"}]]},"git":{"createdTime":1685119323000,"updatedTime":1729600898000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"18259734087@163.com","commits":13,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":3.31,"words":992},"filePathRelative":"coding/kotlin.md","localizedDate":"2023年5月26日","excerpt":"\\n","autoDesc":true}');export{m as comp,g as data};
