import{_ as t,e as h,g as s,f as k,h as a,i as n,j as e,r as p,o as r}from"./app-C53ngbAW.js";const d={};function o(u,i){const l=p("RouteLink");return r(),h("div",null,[i[14]||(i[14]=s("h1",{id:"lua",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#lua"},[s("span",null,"lua")])],-1)),s("p",null,[i[1]||(i[1]=a("其实我一直都不喜欢 lua，感觉很多设计都是一坨屎，参见 ")),n(l,{to:"/gossip/fuckxxx.html#lua-%E6%9C%89%E5%A4%9A%E9%9A%BE%E7%94%A8"},{default:e(()=>i[0]||(i[0]=[a("lua 有多难用")])),_:1}),i[2]||(i[2]=a("。但是现在是工作，不得不学了。"))]),i[15]||(i[15]=s("h2",{id:"安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装"},[s("span",null,"安装")])],-1)),s("ul",null,[i[12]||(i[12]=s("li",null,"解释器：lua 或 luajit",-1)),s("li",null,[i[11]||(i[11]=a("Vscode 插件： ")),s("ul",null,[i[10]||(i[10]=s("li",null,[a("lsp: "),s("em",null,"Lua - sumneko")],-1)),s("li",null,[i[4]||(i[4]=a("Formatter: ")),i[5]||(i[5]=s("em",null,"Lua - sumneko",-1)),i[6]||(i[6]=a(" 或 ")),i[7]||(i[7]=s("em",null,"Stylua",-1)),i[8]||(i[8]=a("。lua 没有好用的 formatter，详见 ")),n(l,{to:"/gossip/fuckxxx.html#lua-%E6%9C%89%E5%A4%9A%E9%9A%BE%E7%94%A8"},{default:e(()=>i[3]||(i[3]=[a("fuckxxx")])),_:1}),i[9]||(i[9]=a("。"))])])]),i[13]||(i[13]=s("li",null,"包管理器：luarocks，用法和 scoop 相似，不过也挺难用。",-1))]),i[16]||(i[16]=k(`<p>配置：</p><ul><li>luarocks 默认将包安装到全局。想要使用其安装的 lua 包，你还需要额外设置一些环境变量：执行 <code>luarocks path --bin</code>，并将 <code>LUA_PATH</code>, <code>LUA_CPATH</code>, <code>PATH</code> 三个环境变量设为输出的值。</li><li><em>Lua - sumneko</em>：sumneko 是神。 <ul><li>开启所有能开的 type/hint：<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.hint.enable&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.hint.arrayIndex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Enable&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.hint.await&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.hint.setType&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.hint.paramName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;All&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.hint.paramType&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.hint.awaitPropagate&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.type.checkTableShape&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.type.inferParamType&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.type.weakNilCheck&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Lua.type.weakUnionCheck&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>可惜的是这里面不支持 if 语句的表达式进行 inlay hint，我觉得这还是比较重要的，因为 lua 比较算符会执行隐式转换。</li><li>如果你在用其他提供 lua 库的框架（例如 OpenResty），可以<a href="https://github.com/LuaLS/lua-language-server/wiki/Addons" target="_blank" rel="noopener noreferrer">安装插件</a>，以提供更好的 type hint。最简单的插件安装是 <code>Ctrl + P</code> 打开 <code>Lua: Open Addon Manager</code>，然后点点点即可。</li></ul></li><li><em>Stylua</em> 默认使用 tab 作为缩进。要把它改成空格，<a href="https://github.com/JohnnyMorganz/StyLua#configuring-runtime-syntax-selection" target="_blank" rel="noopener noreferrer">需要</a>在项目下创建 <code>.stylua.toml</code>，并写入 <code>indent_type = &quot;Spaces&quot;</code>。</li></ul><p>其他：</p><ul><li><a href="https://github.com/EmmyLuaLs/emmylua-analyzer-rust/" target="_blank" rel="noopener noreferrer">emmylua</a> 是一个 rust 写的 lua lsp，如果你不使用 openresty 等三方 addons，可以尝试。</li></ul><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><ul><li>array table 下标从 1 开始！！！</li><li>不等：<code>~=</code></li><li>数据定义：不加 local 默认是全局变量。</li><li>数据优先级：后面覆盖前面，局部覆盖全局</li><li>条件 if-then-elseif-else-end</li><li>循环：<code>for i = 1,5 do ... end</code>，<code>for i, v in xxx do ... end</code>，<code>repeat ... until xxx</code>，<code>while do ... end</code></li><li>goto：通过 <code>::somelabel::</code> 打标签，然后 <code>goto somelabel</code>。</li><li>作用域：local 是局部变量关键字。创建的变量的生命周期和作用域仅限于它所在的那个代码块。 <ul><li>在交互式 lua 环境中，每一行语句（&gt; 开头）都是一个代码块。也就是说在这些交互式环境中使用 local 定义的变量在后续是访问不了的，因为其生命周期已经结束。</li></ul></li><li>模块化：在某个 lua 文件里最后使用 <code>return xxx</code> 即可暴露变量（可以暴露 local）。然后在其他文件里 <code>local mod = require(&quot;folder.filename&quot;)</code> 即可，不要包含 <code>.lua</code> 后缀。 <ul><li>一般常用的模块写法习惯如下（主要取决于团队）：<div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>赋值：lua 默认使用引用赋值。所以就不得不提浅拷贝和深拷贝的概念，在 lua 中要怎么做呢？答：没有这些函数，要自己写。</li><li>lua 里没有三元运算符，并且<a href="https://www.runoob.com/w3cnote/trinocular-operators-in-lua.html" target="_blank" rel="noopener noreferrer">不能使用 <code>and .. or</code> 当成三元运算符</a>！！！</li></ul><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><p>string, function, boolean, number, nil, table</p><ul><li>string： <ul><li>lua string 包含了长度信息，获取长度是 O1 的。</li><li>字符串不可变。</li><li><code>[[ xxx ]]</code> 为 raw string，更高级的还有 <code>[=[ [[ xxx ]] ]=]</code></li><li>split:<div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">nil</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;%s&quot; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 默认以空白字符分割</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  -- 模式 &#39;[^&#39;..sep..&#39;]+&#39; 匹配一个或多个非分隔符的字符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> part</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> string.gmatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;([^&quot; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.. </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .. </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;]+)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    table.insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">part</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>当然，如果需要更进一步控制 split 的次数，那就需要手动 find 了。</li><li>slice: <code>string.sub</code></li></ul></li><li>table 就是 key-value pairs，里面的值可以没有 key，没 key 的默认从 number 1 开始，类似 Object + Array 结合体。后续将 kv 的 table 称为 map table，数组称为 array table。 <ul><li>正因为底层是 table，所以下标越界不会报错而是给出 nil。</li><li>table 初始化可以使用 <code>local a = { b = 5, }</code>，但是如果 key 不是一个合法的变量字符串就需要用 <code>[&quot;asd,123&quot;]</code> 这种形式，中括号 + 引号。</li><li><code>ipairs(x)</code> 和 <code>pairs(x)</code> 用于取 table 的迭代器。<code>ipairs</code> 专用于迭代数组 table，会忽略所有非 number 的 key。而 <code>pairs</code> 是迭代所有 kv，顺序不定，而且比较慢。</li><li><code>table.unpack(some_table, start, end)</code> 用于解包一个 array table，可以给函数参数或变量赋值。start, end 是 optional，如果不指定就到碰到的第一个 nil 为止。而 <code>table.pack</code> 是反向，还会多加一个 <code>n=length</code> 的 kv。</li><li><code>table.insert(x, [pos ,] value)</code> 用于插入，<code>table.remove(x [, pos])</code> 用于删除， <code>table.concat(x, &quot; &quot;)</code> 用于字符串连接（只拼值，跳过 kv 对）。 <ul><li>lua 的 string 是 immutable 的，通过这样可以动态构造 string。</li></ul></li><li>slice：lua 没有 table 取 slice 的方法，需要自己循环 insert。</li><li>通过 <code>#</code> 获取 table/string 长度。对于含有 nil 的 table，获取的长度是<a href="https://www.runoob.com/w3cnote/lua-table-length.html" target="_blank" rel="noopener noreferrer">未定义的</a>！ <ul><li>所以不要在 lua 的 array table 中使用 nil 值！因为 map table 需要用 <code>tab.key = nil</code> 来删除一个 kv 对，所以经常在 array table 也这样做了，这是不行的！</li></ul></li><li>判断是否为空：<code>t == nil or next(t) == nil</code>。注意一般来说都要先检查 nil。</li></ul></li><li>function： <ul><li>默认除了 table 以外都是值传递</li><li>传入参数过多忽略，过少用 nil 填</li><li>可以用 ... 传不定长参数，用 <code>local x = {...}</code> 拿到一个 array table。</li><li>函数必须放在调用的代码之前</li></ul></li><li>显式类型转换只有 <code>tostring(x)</code> 和 <code>tonumber(x)</code>。如果要转为 bool 需要用 <code>not not x</code>。 <ul><li>除了 nil（和 false 本身）转为 bool 会被转为 false，其他值都会转为 true。</li><li>table 调用 <code>tostring(x)</code> 的结果是它的地址</li></ul></li><li>隐式转换： <ol><li>算数运算中，字符串，bool 和 nil 会转为数字</li><li>字符串连接符 <code>..</code>，数字和 nil 会转为字符串</li></ol></li><li>迭代器：请使用 <a href="https://github.com/luafun/luafun" target="_blank" rel="noopener noreferrer">luafun</a> 三方库。luafun 提供了函数式和对象式的迭代器类型，方便使用。</li></ul><h3 id="fs-与文件操作" tabindex="-1"><a class="header-anchor" href="#fs-与文件操作"><span>fs 与文件操作</span></a></h3><p>文件 io：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">infile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">io.open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;input.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> line</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> infile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">   print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">infile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> outfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">io.open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;output.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 可以加错误处理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> not </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">outfile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  outfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">outfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fs：使用 luafilesystem 库。</p><h2 id="高级" tabindex="-1"><a class="header-anchor" href="#高级"><span>高级</span></a></h2><ul><li><code>setmetatable(var1, {__add = myfunc})</code> 可以重写内置的方法 <ul><li>在所有方法里，<code>__index</code> 又是最常用的一个，这就相当于用 <code>var1.xxx</code> 时就会拿到 key 为 xxx 的 value。</li><li>让 table 变为 readonly 可以加一个 <code>__newindex = function() error(&quot;no modification allowed&quot;) end</code>。</li></ul></li><li>面向对象：高级的 table<div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">deposit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">withdraw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> or </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> setmetatable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于实例，使用 <code>.</code> 则只是获取 static 的函数本身，而可以用 <code>:</code> 代表调用其成员函数，这是一个语法糖。 <ul><li>但是内置类型的函数，例如 <code>table.remove</code> 不能直接用 <code>t:remove</code> 这样调用！究其原因，table 不是类，而是一个内置库。如果需要用 <code>:</code>，要设置元表：<code>setmetatable(t, { __index = table })</code>。</li></ul></li></ul></li><li>反射：用 debug 库，不过会影响性能。</li><li>协程：lua 的协程依赖于 <code>coroutine.create</code>, <code>coroutine.resume</code>, <code>coroutine.yield</code>，yield 就相当于是 await 点交出控制权一样。 <ul><li>协程是单线程的，任何时候不会有两个协程同时执行。</li><li>lua 5.2 支持 yield C 函数，5.4 引入协程取消机制。</li><li>没有自带的一个 async 运行时，需要自己手写调度器。如果在用 openresty 等，也可以使用这些框架里的成熟调度器，<code>ngx.thread.spawn</code> 和 <code>ngx.thread.wait</code> 好用多了。</li></ul></li><li>没有 RAII，所以各种 cosocket 都要手动关，否则就泄漏。</li><li>错误处理：正常来说使用 <code>pcall(func, ...args)</code> 进行包装，相当于一个 try-catch。或者直接使用 safe 库，不要抛出错误而是正常返回错误，例如 <code>cjson.safe</code>。</li><li>很多实践中会在 lua 文件最上方声明很多 local 函数，这个做法的目的是将 _G 表中的函数变为局部变量，以达到更快的调用，也可以防止不小心修改了全局变量。</li><li>lua 支持尾递归，只要是 <code>return func(...);</code> 的形式。</li></ul><h3 id="gc" tabindex="-1"><a class="header-anchor" href="#gc"><span>gc</span></a></h3><p>lua 5.4 之前使用的是增量 gc，使用较为细化的标记-清除过程。5.4 添加了分代特性，减少了老年代的扫描频次。</p><p>释放数据的标准做法是将其设为 nil，以便在下一次 gc 将其清理。</p><p>lua 可以通过下面的方式设置弱引用表，弱引用的部分不持有所有权：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- __mode = &quot;k&quot;, &quot;v&quot; 或 &quot;kv&quot;，代表哪部份是弱引用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> weakTable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">setmetatable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({}, {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这些 gc 机制，可以针对性注意，提升性能：</p><ul><li>避免在循环或频繁调用的函数中创建闭包或表</li><li>及时释放</li></ul><h3 id="ffi" tabindex="-1"><a class="header-anchor" href="#ffi"><span>ffi</span></a></h3><p>lua 的 ffi 开销比想象的要小。lua 不同类型的开销如下：</p><ul><li>number：几乎为 0</li><li>string：传入几乎为 0，接收需要一次拷贝</li><li>table：不能直接传，需要手动构建成 C struct。该构建阶段有开销。</li></ul><h2 id="typing" tabindex="-1"><a class="header-anchor" href="#typing"><span>typing</span></a></h2><p>lua 的一大缺点是没有 type system。类似 js 的 typed 加强版 ts，lua 也有 typed 加强版，不过比较杂，从早期已经久不维护的 <a href="https://github.com/andremm/typedlua" target="_blank" rel="noopener noreferrer">typedlua</a> 和一些 fork 到新的 <a href="https://github.com/teal-language/tl" target="_blank" rel="noopener noreferrer">teal</a> 都有。这些 typed 版本都受 ts 启发，语法比较相似。</p><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://zhuanlan.zhihu.com/p/494191824" target="_blank" rel="noopener noreferrer">理解 Lua 的闭包机制</a></li></ol>`,29))])}const g=t(d,[["render",o],["__file","lua.html.vue"]]),A=JSON.parse('{"path":"/coding/lua.html","title":"lua","lang":"zh-CN","frontmatter":{"date":"2025-07-07T00:00:00.000Z","icon":"code","category":["编程"],"tag":["编程语言"],"description":"lua 其实我一直都不喜欢 lua，感觉很多设计都是一坨屎，参见 。但是现在是工作，不得不学了。 安装 解释器：lua 或 luajit Vscode 插件： lsp: Lua - sumneko Formatter: Lua - sumneko 或 Stylua。lua 没有好用的 formatter，详见 。 包管理器：luarocks，用法和 s...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lua\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-08T15:08:42.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/lua.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"lua"}],["meta",{"property":"og:description","content":"lua 其实我一直都不喜欢 lua，感觉很多设计都是一坨屎，参见 。但是现在是工作，不得不学了。 安装 解释器：lua 或 luajit Vscode 插件： lsp: Lua - sumneko Formatter: Lua - sumneko 或 Stylua。lua 没有好用的 formatter，详见 。 包管理器：luarocks，用法和 s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-08T15:08:42.000Z"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:published_time","content":"2025-07-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-08T15:08:42.000Z"}]]},"git":{"createdTime":1751900467000,"updatedTime":1757344122000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"lxl66566@gmail.com","commits":8,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":7.53,"words":2259},"filePathRelative":"coding/lua.md","localizedDate":"2025年7月7日","excerpt":"\\n","autoDesc":true}');export{g as comp,A as data};
