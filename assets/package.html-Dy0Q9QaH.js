import{_ as c,r as d,o as p,c as k,a as e,b as i,d as s,w as t,g as u,e as r}from"./app-CTlBRh9B.js";const g={},f=e("h1",{id:"包管理与使用推荐",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#包管理与使用推荐"},[e("span",null,"包管理与使用推荐")])],-1),b=e("h2",{id:"包管理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#包管理"},[e("span",null,"包管理")])],-1),m=e("h3",{id:"pacman",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pacman"},[e("span",null,"pacman")])],-1),y=e("p",null,"pacman 是 archlinux 官方指定包管理器，好用，就是指令比较难记。安装来源是 linux 官方仓库，基本上都是二进制。",-1),_=r('<li><p>“滚”指 <code>sudo pacman -Syu</code>，更新所有包。不要隔太久不滚，挂的概率会增加。（<s>今日也无事可做</s>）</p><ul><li>也可以直接 <code>yay</code> 或 <code>paru</code> 进行更新。（这俩不带参数默认执行 <code>-Syu</code>）</li><li>如果更新了内核（<code>linux</code> 包），请立即重启。</li></ul></li><li><p>出现 <code>The requested URL returned error: 404</code>，可能是本地缓存没有更新，请 <code>sudo pacman -Syy</code></p></li><li><p>每次修改镜像之后都应该使用 <code>sudo pacman -Syyu</code> 强制更新缓存 (<a href="https://wiki.archlinuxcn.org/wiki/%E9%95%9C%E5%83%8F%E6%BA%90#%E5%BC%BA%E5%88%B6_pacman_%E5%88%B7%E6%96%B0%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer">ref</a>)。</p></li><li><p>pacman 常用指令：<code>-S</code>, <code>-Ss</code>, <code>-Rs</code></p></li>',4),x=e("p",null,"pacman 更换镜像",-1),A=e("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[e("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"nvim"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," /etc/pacman.d/mirrorlist")])])])],-1),E=e("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[e("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"termux-change-repo"),e("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}},"  # 虽然不是 pacman（")])])])],-1),v=e("li",null,[e("p",null,[e("a",{href:"https://wiki.archlinuxcn.org/wiki/Pacman/%E6%8F%90%E7%A4%BA%E5%92%8C%E6%8A%80%E5%B7%A7#%E5%88%A0%E9%99%A4%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%EF%BC%88%E5%AD%A4%E7%AB%8B%E8%BD%AF%E4%BB%B6%E5%8C%85%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},"pacman 删除孤立包"),i("：先检查列表，将不用删除的包"),e("a",{href:"https://wiki.archlinuxcn.org/wiki/Pacman/%E6%8F%90%E7%A4%BA%E5%92%8C%E6%8A%80%E5%B7%A7#%E5%88%A0%E9%99%A4%E5%BF%85%E9%9C%80%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E4%BB%A5%E5%A4%96%E7%9A%84%E6%89%80%E6%9C%89%E8%BD%AF%E4%BB%B6%E5%8C%85",target:"_blank",rel:"noopener noreferrer"},"加入显式安装列表"),i("。")])],-1),C=e("h3",{id:"aur",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#aur"},[e("span",null,"AUR")])],-1),F=e("p",null,[i("AUR 是用户仓库，由用户自行维护。AUR 只管理 PKGBUILD，相当于一个"),e("strong",null,"小型安装脚本"),i("而非程序本体。这里有一篇"),e("a",{href:"https://blog.asukaminato.eu.org/AUR-vs-vs-cn-dd42c7a8f0f943dcabd23d4cdf03a914",target:"_blank",rel:"noopener noreferrer"},"说明文章"),i("。")],-1),B=e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote1"},"[1]"),e("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),w=e("p",null,"由于上传无门槛，AUR 可能携带恶意软件，请谨慎下载偏门小软件。有经验的用户会在安装前审阅 PKGBUILD。",-1),D=e("li",null,[i("AUR Helper 会先在官方仓库搜索包。若失败才会去 AUR 下载（并编译），然后"),e("strong",null,"使用 pacman 安装"),i("。")],-1),R=e("li",null,[i("yay 是一个广泛使用的 AUR Helper，使用 go 语言编写。 "),e("ul",null,[e("li",null,"yay 的问题也太多了点。。可以试试 paru。")])],-1),L=e("li",null,[i("另一个广泛使用的 AUR Helper 是 "),e("em",null,"paru"),i("，使用 rust 编写。 "),e("ul",null,[e("li",null,"与 yay 不同的是安装时默认展示 PKGBUILD 以供审阅。")])],-1),U=r(`<h3 id="nix" tabindex="-1"><a class="header-anchor" href="#nix"><span>Nix</span></a></h3><p>相对的，Nix 是 NixOS 的包管理器。整个 NixOS 是建立在 Nix 之上的。</p><p>Nix 的包有 10w+，不过里面很多是编程语言的依赖包，有一定量水分，单论数量是没有 AUR 多的。</p><p>但是 Nix 本身还是非常顶级的包管理器，使用 Nix 语言编写，这是一个纯函数式的图灵完备语言。现在是个现代编程语言都能爆杀 bash，显然 Nix 也是。</p><p>如果在非 NixOS 系统上使用 Nix 包管理器可以用 <code>nix-env -iA &lt;package&gt;</code> 安装包，NixOS 就直接写配置然后 rebuild 即可。</p><h3 id="apt" tabindex="-1"><a class="header-anchor" href="#apt"><span>apt</span></a></h3><p>apt 是 debian 系的 Linux 包管理器。用起来只能说还凑合。</p><ul><li>api 会<a href="https://askubuntu.com/questions/1038923" target="_blank" rel="noopener noreferrer">自带 <code>apt-daily.service/timer</code> 和 <code>apt-daily-upgrade.service/timer</code></a>，挺流氓的，内网服务器建议直接 ban 了。</li></ul><h2 id="打包" tabindex="-1"><a class="header-anchor" href="#打包"><span>打包</span></a></h2><h3 id="aur-1" tabindex="-1"><a class="header-anchor" href="#aur-1"><span>AUR</span></a></h3><p>AUR 的包都是志愿维护，为开源社区做贡献是一件好事。</p><p>首先看看 arch wiki，很有用。<a href="https://wiki.archlinuxcn.org/zh/Arch_%E6%89%93%E5%8C%85%E5%87%86%E5%88%99" target="_blank" rel="noopener noreferrer">打包准则</a> | <a href="https://wiki.archlinuxcn.org/wiki/%E5%88%9B%E5%BB%BA%E8%BD%AF%E4%BB%B6%E5%8C%85" target="_blank" rel="noopener noreferrer">创建软件包</a></p><p>我在先辈推动下，先接过了一个 <code>autocorrect-bin</code> 练手。后续也打了例如 <code>tdl-bin</code> 等。</p><ol><li>首先，创建一个 AUR 账号，并<a href="https://wiki.archlinuxcn.org/wiki/AUR_%E6%8F%90%E4%BA%A4%E5%87%86%E5%88%99#%E8%AE%A4%E8%AF%81" target="_blank" rel="noopener noreferrer">认证</a></li><li>认领包，clone 到本地。 <ul><li>如果是新创建的包，只需要 <code>git remote add remote ssh://aur@aur.archlinux.org/&lt;package_name&gt;.git &amp;&amp; git fetch</code> 即可，无需像 github 创建仓库那样手动操作。</li></ul></li><li>改 PKGBUILD 并测试。</li><li>更新 <code>.SRCINFO</code>: <code>makepkg --printsrcinfo &gt; .SRCINFO</code></li><li>push。注意不要使用那些阻断 ssh 的代理。</li></ol><ul><li>可以 <code>paru -Gp &lt;package&gt;</code> 看看别人写的 PKGBUILD；</li><li><code>ldd xxx</code> 可以看可执行文件的链接库，方便寻找依赖。</li><li><code>makepkg -f</code> 本地测试（<code>-f</code> 是覆盖下载）。</li><li><code>updpkgsums</code> 可以自动更新校验和。</li><li><code>namcap PKGBUILD</code> 检查有没有语法错误。一般会报一个 <code>$CARCH</code> 的 warning，不用管。</li><li>从 Asuka 先輩那里偷来的一键更新+测试：<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pack</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;shfmt -w PKGBUILD &amp;&amp; updpkgsums &amp;&amp; makepkg --printsrcinfo &gt; .SRCINFO &amp;&amp; makepkg -C -sf &amp;&amp; namcap *.zst &amp;&amp; git clean -df&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 注意，由于 git clean -df 的存在，此命令只能用来更新</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h4><p>如果需要一个纯净环境测试，可以看看 <a href="https://wiki.archlinux.org/title/Pacstrap" target="_blank" rel="noopener noreferrer">pacstrap</a>。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pacstrap</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> base</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> base-develsudo</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 创建容器（使用主机密钥）。下载大小约为 223MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemd-nspawn</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # 进入容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://blog.lilydjwg.me/2021/8/12/using-bwrap.215869.html" target="_blank" rel="noopener noreferrer">bubblewrap</a> 可以以较小的开销在虚拟环境内安全构建。</p><h2 id="包使用" tabindex="-1"><a class="header-anchor" href="#包使用"><span>包使用</span></a></h2>`,20),S=e("h3",{id:"基础-cli-工具",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基础-cli-工具"},[e("span",null,"基础 CLI 工具")])],-1),z=e("blockquote",null,[e("p",null,[i("对于通过 "),e("code",null,"/"),i("（OR）相连的软件，本人"),e("strong",null,"仅推荐首个")])],-1),N=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"软件包"),e("th",{style:{"text-align":"center"}},"功用")])],-1),I=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"fishshell"),i(" + "),e("code",null,"starship")]),e("td",{style:{"text-align":"center"}},[e("a",{href:"#shell"},"shell"),i(" 及其外观")])],-1),T=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/chmln/sd",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"sd")])]),e("td",{style:{"text-align":"center"}},[e("code",null,"sed"),i(" 的代替")])],-1),P=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"ripgrep"),i(" / "),e("a",{href:"https://github.com/lotabout/skim",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"skim")]),i(" / fzf")]),e("td",{style:{"text-align":"center"}},[e("code",null,"grep"),i(" 的代替")])],-1),q=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/sharkdp/fd",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"fd")]),i(" & "),e("code",null,"plocate")]),e("td",{style:{"text-align":"center"}},[i("查找，faster "),e("code",null,"find")])],-1),j=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/tealdeer-rs/tealdeer",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"tldr")]),e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote2"},"[2]"),e("a",{class:"footnote-anchor",id:"footnote-ref2"})])]),e("td",{style:{"text-align":"center"}},[e("code",null,"man"),i(" 的代替")])],-1),O=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"fex")]),e("td",{style:{"text-align":"center"}},[e("code",null,"cut"),i(" 的代替")])],-1),G=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"eza")]),e("td",{style:{"text-align":"center"}},[e("a",{href:"#eza"},[e("code",null,"ls"),i(" 的代替")])])],-1),M=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"fastfetch")]),e("td",{style:{"text-align":"center"}},[e("code",null,"neofetch"),i(" 的代替")])],-1),Q=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/nivekuil/rip",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"rip")]),i(" / "),e("code",null,"trash-cli")]),e("td",{style:{"text-align":"center"}},[i("easier, safer "),e("code",null,"rm")])],-1),K=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"btop"),i(" & "),e("code",null,"mission-center"),i(" / "),e("code",null,"htop"),i(" / "),e("code",null,"glances")]),e("td",{style:{"text-align":"center"}},[i("任务管理器，看性能，"),e("code",null,"top"),i(" 的代替")])],-1),Z=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"xh")]),e("td",{style:{"text-align":"center"}},[e("code",null,"httpie"),i(" 的代替")])],-1),V=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"bat")]),e("td",{style:{"text-align":"center"}},[e("code",null,"cat"),i(" 的代替")])],-1),W=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/Wilfred/difftastic",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"difftastic")])]),e("td",{style:{"text-align":"center"}},[e("code",null,"diff"),i(" 的代替，与 git 集成")])],-1),$=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/traviscross/mtr",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"mtr")])]),e("td",{style:{"text-align":"center"}},[e("code",null,"traceroute"),i(" 的代替")])],-1),X=e("td",{style:{"text-align":"center"}},[e("code",null,"lsof")],-1),H={style:{"text-align":"center"}},J=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"zoxide")]),e("td",{style:{"text-align":"center"}},"智能 cd")],-1),Y=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/atuinsh/atuin",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"atuin")]),i(" / "),e("a",{href:"https://github.com/cantino/mcfly",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"mcfly")])]),e("td",{style:{"text-align":"center"}},"history 搜索")],-1),ee=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"dust"),i(" & "),e("code",null,"ncdu"),e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote3"},"[3]"),e("a",{class:"footnote-anchor",id:"footnote-ref3"})]),i(" / "),e("code",null,"gdu")]),e("td",{style:{"text-align":"center"}},"磁盘容量查询")],-1),ie=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"yazi"),e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote4"},"[4]"),e("a",{class:"footnote-anchor",id:"footnote-ref4"})]),i(" / "),e("code",null,"nnn"),i(" / "),e("code",null,"ranger")]),e("td",{style:{"text-align":"center"}},"文件浏览器")],-1),te=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"lsof")]),e("td",{style:{"text-align":"center"}},"查进程占用")],-1),se=e("td",{style:{"text-align":"center"}},[e("code",null,"neovim")],-1),le={style:{"text-align":"center"}},ae=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/zellij-org/zellij",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"Zellij")]),i(" / "),e("code",null,"tmux")]),e("td",{style:{"text-align":"center"}},"终端复用，多窗口")],-1),ne=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("a",{href:"https://github.com/denisidoro/navi",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"navi")])]),e("td",{style:{"text-align":"center"}},"常用命令 cheatsheet")],-1),re=r('<p>以上是本人体验总结的结果。若需要更多推荐，不如看看<a href="https://github.com/toolleeo/cli-apps" target="_blank" rel="noopener noreferrer">The largest Awesome List of CLI/TUI programs</a> 和 <a href="#external">external 1.</a>。</p><h3 id="kde-apps" tabindex="-1"><a class="header-anchor" href="#kde-apps"><span>kde apps</span></a></h3><p>此处列出我<strong>额外</strong>安装的 kde 家的软件。</p><ul><li><code>bluedevil</code>：蓝牙前端。</li><li><code>yakuake</code>：下拉式终端，比起 konsole 的优点是快（预加载）。 <ul><li>需要在 <em>系统设置 - 开机与关机</em> 中将其加入开机自启。</li><li><a href="https://wiki.archlinuxcn.org/wiki/Yakuake#Plasma_%E4%B8%8A%E7%9A%84%E9%80%8F%E6%98%8E/%E6%A8%A1%E7%B3%8A%E8%83%8C%E6%99%AF" target="_blank" rel="noopener noreferrer">配置</a></li></ul></li><li><code>kclock</code>：时钟，闹钟，秒表</li></ul><h3 id="shell" tabindex="-1"><a class="header-anchor" href="#shell"><span>shell</span></a></h3>',5),he=e("ul",null,[e("li",null,[i("美化：我使用 starship，跨平台，零配置，已经很好用了。"),e("a",{href:"https://github.com/IlanCosman/tide",target:"_blank",rel:"noopener noreferrer"},"tide"),i(" 也是一个 fish 美化插件，不过没用过。")])],-1),oe=e("h3",{id:"聊天软件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#聊天软件"},[e("span",null,"聊天软件")])],-1),de=e("p",null,"但是只要在中国有原生家庭，就逃不开 QQ 和微信。",-1),ce=e("code",null,"linuxqq",-1),pe=e("ul",null,[e("li",null,[i("不要安装 "),e("a",{href:"https://github.com/LiteLoaderQQNT/LiteLoaderQQNT",target:"_blank",rel:"noopener noreferrer"},"LiteLoaderQQNT"),i("。Archlinux 是滚动更新，而第三方为爱发电的注入基本上跟不上更新节奏。我试了 bin 包和 git 包都会闪退。")])],-1),ke=e("a",{href:"https://wiki.archlinuxcn.org/wiki/%E5%BE%AE%E4%BF%A1",target:"_blank",rel:"noopener noreferrer"},"微信",-1),ue=e("code",null,"wechat-universal-bwrap",-1),ge=e("code",null,"wechat-uos",-1),fe=e("li",null,[e("a",{href:"https://github.com/lqzhgood/wechat-need-web",target:"_blank",rel:"noopener noreferrer"},"wechat-need-web"),i(" 可以让你能够使用微信网页版。")],-1),be=e("h3",{id:"邮件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#邮件"},[e("span",null,"邮件")])],-1),me=e("p",null,"我的需求挺简单，只是 IMAP 接收和多账号管理。",-1),ye=e("code",null,"thunderbird-i18n-zh-cn",-1),_e=e("em",null,"详情",-1),xe=e("code",null,"kde-pim",-1),Ae=e("a",{href:"https://t.me/archlinuxcn_group/3030332",target:"_blank",rel:"noopener noreferrer"},"有问题",-1),Ee=e("h3",{id:"文本编辑器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#文本编辑器"},[e("span",null,"文本编辑器")])],-1),ve=r('<h3 id="游戏" tabindex="-1"><a class="header-anchor" href="#游戏"><span>游戏</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">paru</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --needed</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> arch-gaming-meta</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个包里有很多好东西。</p><h4 id="wine" tabindex="-1"><a class="header-anchor" href="#wine"><span>wine</span></a></h4><p>我最初因为对命令行的恐惧而选择逃避，使用 <a href="#bottles">bottles</a> 来运行 windows 应用，它实际上是一个对 wine 和 winetricks 的 GUI 包装。但是后来 bottles 出现了一些严重的问题<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>，让我不得不回退到 wine，又发现 winetricks 很好用，所以便果断抛弃了 bottles。</p><p>安装 wine 并不难，archlinux 看两眼 wiki，nixos 就装 <code>wine</code> 和 <code>winetricks</code> 两个包就行。</p><p>出于游戏目的，首次使用 wine 时，推荐用 winetricks 进行运行库的安装。如果没有环境隔离的需求就全部装到默认容器（<code>~/.wine</code>）里即可。先装字体（<code>cjkfonts</code>），再装运行库，可以参考 <a href="https://asukaminato.notion.site/Play-Galgame-on-wine-385828919b3b482891a42fb82a1d8fbf" target="_blank" rel="noopener noreferrer">AsukaMinato 的博客</a>。同时 minato 给出了另一个更好的解法：先装 <a href="https://codecguide.com/download_kl.htm" target="_blank" rel="noopener noreferrer">K-Lite Codec Pack</a>，就可以跳过所有解码器的安装，更快更便捷。然后就<s>看谁顺眼装谁了</s>，什么 VC++ 运行库，dxvk，这些也都是比较基础的就不多说了。</p><p>使用 wine 运行某个 windows 应用，只需要 <code>wine &lt;file&gt;</code>，比我想的简单太多了。转区就设置 <code>LC_ALL=&quot;ja_JP.UTF-8&quot;</code> 环境变量即可。</p><p>其他：</p><ul><li>wine 无法卸载已经安装的运行库，所以如果想要卸载，要么 override 要么开新容器。</li><li><code>WINEPREFIX</code> 可以选择不同的 wine 容器。</li><li><code>WINEDLLOVERRIDES</code> 可以重载不同的运行库，例如 <code>WINEDLLOVERRIDES=&quot;*d3d9,*d3d10,*d3d10_1,*d3d10core,*d3d11,*dxgi=b&quot;</code></li></ul><h4 id="bottles" tabindex="-1"><a class="header-anchor" href="#bottles"><span>bottles</span></a></h4><p>bottles 是 python 写的 wine 包装，现在维护力度并不大，有几百个 issue 没人去解决。并且我遭遇了恶性 bug，因此换回 <a href="#wine">wine</a>。</p>',12),Ce={class:"hint-container details"},Fe=e("summary",null,"不再使用",-1),Be=e("p",null,"基于 wine 运行 windows 软件/游戏，比 wine 更傻瓜式（只需要点鼠标，不用写配置）。",-1),we=e("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[e("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"paru"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -S"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," bottles")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),De=e("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[e("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"paru"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -S"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," bottles"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," wine"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," wine-mono")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),Re=e("p",null,"然后打开 bottles，在依赖中手动安装运行库，字体等。",-1),Le=e("ul",null,[e("li",null,"bottles 可以直接运行挂载的 windows ntfs 盘里的游戏。"),e("li",null,"运行成功率与游戏发行时间相关：太老的游戏几乎无法游玩。"),e("li",null,[i("游玩日文游戏，windows 上需要 "),e("em",null,"locale-emulator"),i(" 的，需要用 "),e("code",null,'LANG="ja_JP.UTF8" bottles'),i(" 参数启动 bottles。")])],-1),Ue=r('<h3 id="录音" tabindex="-1"><a class="header-anchor" href="#录音"><span>录音</span></a></h3><h4 id="gui" tabindex="-1"><a class="header-anchor" href="#gui"><span>GUI</span></a></h4><p>其实 obs 就能录，但是有点重，我想试试其他的。</p><p>我先尝试了一下 <code>krecorder</code>，但是使用体验不算好，完全无法录音。音源把能选的都选了一遍，录音还是无法开始。</p><p>后来想用 <code>recordmydesktop</code>，结果 gtk 和 qt 前端都装不上，gtk 缺依赖包，qt 编译了半天，时间全花在输出 warning 了。</p><p><code>kwave</code> 也能录，但是它本职不是干这个的，操作上可能不够直观。</p><h4 id="cli" tabindex="-1"><a class="header-anchor" href="#cli"><span>CLI</span></a></h4><p>然后从网上抄了一个 ffmpeg 代码，并改进了一下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pulse</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libmp3lame</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -b:a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 128k</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -af</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;volume=0.04&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pulse.mp3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>it works.</p>',10),Se=e("code",null,"alsa-utils",-1),ze=e("code",null,"arecord -f dat test.wav",-1),Ne=r('<h3 id="关于文档" tabindex="-1"><a class="header-anchor" href="#关于文档"><span>关于文档</span></a></h3><p>众所周知文档领域基本由微软的 office 独占，而三件套又基本由 windows 独占。</p><p>在 linux 下，我尝试使用不同的替代品：</p><ol><li>LibreOffice（不可用）：word 排版不同，原本一页的可能会变成两页。拿来只读还行，要写的话奉劝还是换一家。</li><li>WPS（不可用）：图片显示错误，还有广为诟病的粗体问题。 <ul><li>解法（据说）：<code>paru -S freetype2-wps libtiff5</code> (<a href="https://t.me/archlinuxcn_group/3016741" target="_blank" rel="noopener noreferrer">ref</a>)</li></ul></li><li>ONLYOFFICE：目前看来没啥太大毛病。</li></ol><p>我一般用 typst 等排版工具生成 pdf，如果实在不行再去 windows 上用 office。不过现在看来或许也能试试 ONLYOFFICE。</p><h3 id="系统监视" tabindex="-1"><a class="header-anchor" href="#系统监视"><span>系统监视</span></a></h3><h3 id="资源监视器" tabindex="-1"><a class="header-anchor" href="#资源监视器"><span>资源监视器</span></a></h3><p>linux 自带的是 <code>top</code>，由此衍生出了一堆 tui <code>*top</code>。我同时使用 <code>btop</code> 和 <code>htop</code>。</p>',8),Ie=e("li",null,[e("code",null,"btop"),i("：制作精美的 TUI 资源监视器，跨平台（甚至能在 windows 上用）")],-1),Te=e("li",null,[e("code",null,"htop"),i("：top 加强，比较经典")],-1),Pe=e("code",null,"mission-center",-1),qe=r(`<h4 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统"><span>文件系统</span></a></h4><p><code>inotify</code> 是一个强大的监视器。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> inotify-tools</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>具体使用方法 RTFM。</p><ul><li><code>sudo inotifywait -m -r -e create --format &#39;%w%f&#39; /home/absolutex</code> 能监视目录下新创建的文件。</li></ul><h3 id="命令行历史记录" tabindex="-1"><a class="header-anchor" href="#命令行历史记录"><span>命令行历史记录</span></a></h3><p>我之前一直在用 <code>mcfly</code>，它给的条数少，模糊匹配结果太差，我不满意。</p><p>后来看到<a href="https://blog.lilydjwg.me/posts/216770.html" target="_blank" rel="noopener noreferrer">大佬博文</a>推荐的 <code>atuin</code>，迅速去下了一个用，果真好用。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> atuin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">atuin</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> auto</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># then edit fish config manually</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基础使用：<code>↑</code> 打开历史菜单，<code>Enter</code> 执行，<code>Tab</code> 上屏不执行；<code>&lt;C-o&gt;&lt;C-d&gt;</code> 删除。</p><p>更多 keybindings 请前往 <a href="https://docs.atuin.sh/configuration/key-binding/#atuin-ui-shortcuts" target="_blank" rel="noopener noreferrer">doc</a>.</p><h4 id="过滤历史记录" tabindex="-1"><a class="header-anchor" href="#过滤历史记录"><span>过滤历史记录</span></a></h4><p>如果你的历史记录里已经有了敏感信息，例如密码，那么 atuin 带来的方便的搜索功能可能将你置于不利地位。所以你需要添加一个 filter，并且使用其 filter 一次 history。</p><ol><li><a href="https://docs.atuin.sh/configuration/config/#history_filter" target="_blank" rel="noopener noreferrer">添加 filter</a>：编辑 <code>~/.config/atuin/config.toml</code>。</li><li>执行 <code>atuin history prune</code>。</li></ol><h3 id="代码量统计" tabindex="-1"><a class="header-anchor" href="#代码量统计"><span>代码量统计</span></a></h3><p><a href="https://github.com/XAMPPRocky/tokei" target="_blank" rel="noopener noreferrer">tokei</a></p><h3 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索"><span>搜索</span></a></h3><p>文字搜索当然是用 ripgrep，如果嫌命令行难用也可以用 vscode 打开文件夹然后全局搜索即可。</p><p>实时搜索当然是 fd，RIIR 的 find。</p><p>主要难的是按文件名的全系统索引搜索，类似 windows everything 那样。</p><ul><li>locate 能用，感觉还是差了点。 <ul><li>nixos 的 locate 可以简单配自动更新，还不错</li></ul></li><li>fsearch，怎么我第一次引入文件夹后就不能再往里添加路径了？</li><li>这些应用都不能提供实时文件变化检测，比 everything 还是差了一个级别。</li></ul>`,21),je={id:"neovim",tabindex:"-1"},Oe={class:"header-anchor",href:"#neovim"},Ge=r(`<h3 id="eza" tabindex="-1"><a class="header-anchor" href="#eza"><span>eza</span></a></h3><p>喜欢彩色的 ls 吗？</p><p><code>alias ls=&#39;eza --all --long --color-scale size --binary --header --time-style=long-iso&#39;</code></p><p>原名 exa，现在活跃分支是 eza。注意该 alias 需要一定版本下才可正常工作。</p><h3 id="终端复用器" tabindex="-1"><a class="header-anchor" href="#终端复用器"><span>终端复用器</span></a></h3><p>Terminal Multiplexer（终端复用器）并不是 linux 桌面的必需品（<code>konsole</code> / <code>yakuake</code> 都支持多标签），但是在纯命令行的服务器下，终端复用还是有点用的。主要作用是提供一组 key bindings，与持久运行的 sessions（允许 ssh 断连）。</p><h4 id="screen" tabindex="-1"><a class="header-anchor" href="#screen"><span>screen</span></a></h4><blockquote><p>要不是学校的服务器，我还不知道有 screen 这玩意。</p></blockquote><p>这是一个很古老的终端复用，主要作用就是 ssh 恢复，没啥其他功能。可以在低性能的服务器上用。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # 创建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  # 重连</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两行就够用了。</p><h4 id="tmux" tabindex="-1"><a class="header-anchor" href="#tmux"><span>tmux</span></a></h4><p>tmux 的默认键位实在是过于诡异。</p>`,13),Me={class:"hint-container details"},Qe=e("summary",null,"use Zellij instead of tmux",-1),Ke=r('<li>配置：<a href="https://github.com/lxl66566/config/blob/bad37f53d84b8ab87dececd2e8616ed8f8596e29/.tmux.conf" target="_blank" rel="noopener noreferrer"><code>~/.tmux.conf</code></a>，初始时没有，需要自己创建。编辑后需要重新载入：<code>tmux source ~/.tmux.conf</code> or <code>prefix</code>+<code>:source ~/.tmux.conf</code></li><li>插件：不要用默认的插件管理器。。不好用。</li><li>copy-mode(vi): <code>Space</code> 进入选择，<code>Enter</code> 复制。（我觉得是假的 vi mode）</li>',3),Ze=e("a",{href:"http://129.226.226.195/post/28785.html",target:"_blank",rel:"noopener noreferrer"},"bash ref",-1),Ve=e("a",{href:"https://unix.stackexchange.com/questions/41274/having-tmux-load-by-default-when-a-zsh-terminal-is-launched",target:"_blank",rel:"noopener noreferrer"},"zsh ref",-1),We=e("a",{href:"https://superuser.com/questions/253786/how-can-i-make-tmux-use-my-default-shell",target:"_blank",rel:"noopener noreferrer"},"ref2",-1),$e=e("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[e("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}},"# add on top of .zshrc")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"if"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," [ "),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$TMUX"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"'),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}}," ="),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' ""'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," ]; "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"then"),e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}}," tmux"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"; "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"fi")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}},"# add in .tmux.config")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#61AFEF"}},"set-option"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -g"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," default-shell"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," /bin/zsh")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Xe=e("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[e("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"if"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#56B6C2"}}," command"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#D19A66"}}," -v"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," tmux"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," &"),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#ABB2BF"}},">"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," /dev/null && [ "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}},"-n"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$PS1"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," ] && [[ "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}},"!"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$TERM"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"'),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}}," =~"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," screen ]] && [[ "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}},"!"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$TERM"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"'),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}}," =~"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," tmux ]] && [ "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#56B6C2"}},"-z"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},' "'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E06C75"}},"$TMUX"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}},'"'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}}," ]; "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"then")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#56B6C2"}},"exec"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#98C379"}}," tmux")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#C678DD"}},"fi")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),He=r(`<h4 id="zellij" tabindex="-1"><a class="header-anchor" href="#zellij"><span><a href="https://github.com/zellij-org/zellij" target="_blank" rel="noopener noreferrer">Zellij</a></span></a></h4><p>Zellij 使用 rust 写成，由于其简洁的 key bindings（有常驻提示的），我使用其代替 tmux。</p><p>这玩意看提示就行，没必要配置。性能会比上面两个小点，好看是有代价的。</p><p>然后我尝鲜<a href="https://t.me/withabsolutex/1571" target="_blank" rel="noopener noreferrer">用得不爽，直接开喷</a>了。</p><h4 id="tab-rs" tabindex="-1"><a class="header-anchor" href="#tab-rs"><span><a href="https://github.com/austinjones/tab-rs" target="_blank" rel="noopener noreferrer">tab-rs</a></span></a></h4><p>也是 rust 写的。screen 的替代品，专注简洁迅速。</p><h3 id="tlp" tabindex="-1"><a class="header-anchor" href="#tlp"><span><a href="https://wiki.archlinux.org/title/TLP" target="_blank" rel="noopener noreferrer">tlp</a></span></a></h3><p>笔记本省电的。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">paru</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tlp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tlpui</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mask</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemd-rfkill.service</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemd-rfkill.socket</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> enable</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --now</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tlp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果其实挺一般的。毕竟涉及到硬件，又是像 linux 这种自由散漫的，厂家都不会主动适配。</p><h3 id="activitywatch" tabindex="-1"><a class="header-anchor" href="#activitywatch"><span>activitywatch</span></a></h3>`,11),Je=e("h3",{id:"waydroid",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#waydroid"},[e("span",null,[e("a",{href:"https://wiki.archlinuxcn.org/wiki/Waydroid",target:"_blank",rel:"noopener noreferrer"},"waydroid")])])],-1),Ye=e("p",null,"waydroid 是 linux 上的首选 android 模拟器。不过想用还是需要折腾一阵的。",-1),ei=e("li",null,[i("安装 waydroid，具体流程在 wiki 上有。 "),e("ul",null,[e("li",null,[e("code",null,"pacman -S waydroid"),i(" 没有 Android 镜像，联网自动下载可能需要代理。")])])],-1),ii=r(`<p>这里主要说下在 X11 下用 waydroid：需要一个 wayland 模拟器，archwiki 的主站说用 cage，CN 站说用 weston，都没有讲具体用法。我用 weston 了。后来尝试了一下 sway，结果与 nvidia 相性很差，不能正常使用。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> weston</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">weston</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 然后点击打开的窗口的左上角，打开内部终端，执行 waydroid 指令。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">waydroid</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> show-full-ui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>存储位置：<code>~/.local/share/waydroid/data/media/0</code>，还有权限问题，我直接乱暴 <code>chmod 777 ... -R</code></li><li>进去不用连 wifi，直接有网。<s>虽然想连也连不上</s></li></ul><blockquote><p>挺想吐槽，waydroid 居然不能重连 session，所以如果 session activated，weston 窗口又关了，这时候只能 <code>waydroid session stop &amp;&amp; waydroid show-full-ui</code> 重启。。</p></blockquote><p>更多踩坑可以看看<a href="https://luoxu.archlinuxcn.org/#g=1031857103&amp;q=%E8%BF%99%E6%98%AF%E6%88%91%E5%9C%A8waydroid%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91&amp;sender=5958395317" target="_blank" rel="noopener noreferrer">某位群友的心得</a></p><h3 id="distrobox" tabindex="-1"><a class="header-anchor" href="#distrobox"><span>distrobox</span></a></h3><p><a href="https://wiki.archlinux.org/title/Distrobox" target="_blank" rel="noopener noreferrer">archwiki</a>；通过容器，模拟其他的发行版。</p><p>注意，home 目录是共享的，不能当作沙盒使用。</p><p>我试着安装了一个 ubuntu 22.04，占用空间 500M 左右。</p><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://github.com/sts10/rust-command-line-utilities" target="_blank" rel="noopener noreferrer">A curated list of command-line utilities written in Rust</a></li><li><a href="https://www.entropy-tree.top/2023/07/24/modern-linux-commands/" target="_blank" rel="noopener noreferrer">一些现代化的 linux 命令</a></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><a href="https://t.me/withabsolutex/1303" target="_blank" rel="noopener noreferrer">我再也不敢在课上不插电滚 aur 了 😭</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p><code>tldr</code> 有很多实现，这里推荐 Rust 的实现 <a href="https://github.com/tealdeer-rs/tealdeer" target="_blank" rel="noopener noreferrer">tealdeer</a>。 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p><code>ncdu</code> 在 btrfs 下不准(<a href="https://wiki.archlinuxcn.org/wiki/Btrfs#%E6%98%BE%E7%A4%BA%E5%B7%B2%E4%BD%BF%E7%94%A8%E7%9A%84/%E7%A9%BA%E9%97%B2%E7%A9%BA%E9%97%B4" target="_blank" rel="noopener noreferrer">ref</a>)。可以考虑用 <a href="https://github.com/CyberShadow/btdu" target="_blank" rel="noopener noreferrer">btdu</a>，这是专门为 btrfs 设计的 du 工具。 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p><code>yazi</code> 甚至能在 console 下查看图片。 <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li><li id="footnote5" class="footnote-item"><p>从<a href="https://t.me/absxsgroup/7461" target="_blank" rel="noopener noreferrer">此处</a>往下翻 <a href="#footnote-ref5" class="footnote-backref">↩︎</a></p></li></ol></section>`,13);function ti(si,li){const l=d("RouteLink"),o=d("CodeTabs"),h=d("Badge");return p(),k("div",null,[f,b,e("blockquote",null,[e("p",null,[i("关联文章："),s(l,{to:"/coding/package_manager.html"},{default:t(()=>[i("包管理器吐槽与灵感")]),_:1})])]),m,y,e("ul",null,[_,e("li",null,[x,s(o,{id:"54",data:[{id:"ArchWSL"},{id:"termux"}]},{title0:t(({value:a,isActive:n})=>[i("ArchWSL")]),title1:t(({value:a,isActive:n})=>[i("termux")]),tab0:t(({value:a,isActive:n})=>[A]),tab1:t(({value:a,isActive:n})=>[E]),_:1})]),v,e("li",null,[e("p",null,[i("常见问题："),s(l,{to:"/articles/linux/problem.html#%E6%9B%B4%E6%96%B0%E7%A0%B4%E5%9D%8F%E4%BE%9D%E8%B5%96"},{default:t(()=>[i("依赖冲突")]),_:1})])])]),C,F,e("p",null,[i("由于 PKGBUILD 经常会从 github 等地方拉取软件压缩包，所以请"),s(l,{to:"/articles/linux/install_and_config.html#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86"},{default:t(()=>[i("使用代理")]),_:1}),i("。PKGBUILD 经常需要自行编译，因此尽量不要在笔记本未插入电源情况下更新"),B,i("。")]),w,e("ul",null,[D,R,L,e("li",null,[i("疑难解答： "),e("ul",null,[e("li",null,[i("yay：疑难解答："),s(l,{to:"/articles/linux/problem.html#yay-%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98"},{default:t(()=>[i("yay 安装问题")]),_:1}),i(" | "),s(l,{to:"/articles/linux/problem.html#yay-%E6%8D%A2%E6%BA%90%E9%97%AE%E9%A2%98"},{default:t(()=>[i("yay 换源问题")]),_:1}),i(" | "),s(l,{to:"/articles/linux/problem.html#yay-%E6%9D%83%E9%99%90%E9%94%99%E8%AF%AF"},{default:t(()=>[i("yay 权限错误")]),_:1})])])])]),U,e("p",null,[i("此处不包含代理与快照工具，请前往"),s(l,{to:"/articles/linux/install_and_config.html#%E4%BB%A3%E7%90%86"},{default:t(()=>[i("配置页")]),_:1}),i("查看。")]),S,z,u(" prettier-ignore "),e("table",null,[N,e("tbody",null,[I,T,P,q,j,O,G,M,Q,K,Z,V,W,$,e("tr",null,[X,e("td",H,[s(l,{to:"/articles/linux/problem.html#umount-failed"},{default:t(()=>[i("查端口占用")]),_:1})])]),J,Y,ee,ie,te,e("tr",null,[se,e("td",le,[s(l,{to:"/coding/vim.html"},{default:t(()=>[i("文本编辑器")]),_:1})])]),ae,ne])]),re,e("p",null,[i("装完系统应该最先装 shell，否则手感一坨狗屎。至于装啥，请移步"),s(l,{to:"/coding/shell.html"},{default:t(()=>[i("shell script")]),_:1}),i("。")]),he,oe,e("p",null,[s(l,{to:"/articles/telegram.html"},{default:t(()=>[i("Telegram")]),_:1}),i(" 当然是首推，多平台适配好，并且在官方仓库，甚至能直接用 web 版。")]),de,e("ul",null,[e("li",null,[i("QQ 还好说，有 QQNT（"),ce,i(),s(h,{text:"AUR"}),i("）用。 "),pe]),e("li",null,[ke,i("就是"),s(l,{to:"/gossip/fuckxxx.html#%E5%BE%AE%E4%BF%A1%E6%9C%89%E5%A4%9A%E9%9A%BE%E7%94%A8"},{default:t(()=>[i("垃圾的代名词")]),_:1}),i("。我对微信的要求是不想用 wine，反正我没有朋友圈、小程序需求。 "),e("ul",null,[e("li",null,[i("首推当然还是 "),ue,i(),s(h,{text:"AUR"}),i("，最 popular 的一集，还能防止拉屎。")]),e("li",null,[i("也试过 "),ge,i(),s(h,{text:"AUR"}),i("，在暗色模式下有 bug，并且进不了托盘。")]),fe])])]),be,me,e("p",null,[i("Thunderbird ("),ye,i(),s(h,{text:"extra"}),i(") 是一个重量级的邮件客户端，支持收发，多账号。好用是挺好用，就是太重了（600+M RAM），于是我想寻找更轻量的邮件客户端。")]),e("p",null,[i("由于我桌面用的 kde，试了下 kmail，用不了，一直报 Akonadi 有问题，点 "),_e,i(" 也点不开。我装了 "),xe,i(),s(h,{text:"包组"}),i(" 也无济于事。据说 kmail 添加 gmail 也"),Ae,i("，因此放弃。")]),Ee,e("p",null,[i("详见"),s(l,{to:"/coding/vim.html"},{default:t(()=>[i("各种 vim 系 editor 的使用体验")]),_:1}),i("。")]),ve,e("details",Ce,[Fe,Be,s(o,{id:"628",data:[{id:"已安装 arch-gaming-meta"},{id:"未安装 arch-gaming-meta"}]},{title0:t(({value:a,isActive:n})=>[i("已安装 arch-gaming-meta")]),title1:t(({value:a,isActive:n})=>[i("未安装 arch-gaming-meta")]),tab0:t(({value:a,isActive:n})=>[we]),tab1:t(({value:a,isActive:n})=>[De]),_:1}),Re,Le]),Ue,e("p",null,[i("当然，也可以用 "),Se,s(h,{text:"extra"}),i(" 包："),ze,i("，但是又不能改音量又不支持压缩格式，显然不如 ffmpeg。")]),Ne,e("ul",null,[Ie,Te,e("li",null,[Pe,s(h,{text:"archlinuxcn"}),i("：GUI，类似 windows 任务管理器，重量级")])]),qe,e("h3",je,[e("a",Oe,[e("span",null,[s(l,{to:"/coding/vim.html"},{default:t(()=>[i("neovim")]),_:1})])])]),Ge,e("details",Me,[Qe,e("ul",null,[Ke,e("li",null,[i("默认启动 ("),Ze,i(" | "),Ve,i(),We,i(")："),s(o,{id:"906",data:[{id:"zsh"},{id:"bash"}]},{title0:t(({value:a,isActive:n})=>[i("zsh")]),title1:t(({value:a,isActive:n})=>[i("bash")]),tab0:t(({value:a,isActive:n})=>[$e]),tab1:t(({value:a,isActive:n})=>[Xe]),_:1})])])]),He,e("p",null,[i("记录软件使用时长，参考"),s(l,{to:"/articles/time_record.html"},{default:t(()=>[i("文章")]),_:1})]),Je,Ye,e("ol",null,[e("li",null,[i("切换为 zen 内核，参考"),s(l,{to:"/articles/linux/install_and_config.html#%E6%9B%B4%E6%8D%A2%E5%86%85%E6%A0%B8"},{default:t(()=>[i("更换内核")]),_:1}),e("ul",null,[e("li",null,[i("也可以用 linux-lily "),s(h,{text:"archlinuxcn"}),i(" 内核")])])]),ei]),ii])}const ni=c(g,[["render",ti],["__file","package.html.vue"]]),ri=JSON.parse('{"path":"/articles/linux/package.html","title":"包管理与使用推荐","lang":"zh-CN","frontmatter":{"date":"2023-10-28T00:00:00.000Z","icon":"cubes","category":["教程","推荐"],"tag":["Linux","桌面端","工具"],"description":"包管理与使用推荐 包管理 关联文章： pacman pacman 是 archlinux 官方指定包管理器，好用，就是指令比较难记。安装来源是 linux 官方仓库，基本上都是二进制。 “滚”指 sudo pacman -Syu，更新所有包。不要隔太久不滚，挂的概率会增加。（） 也可以直接 yay 或 paru 进行更新。（这俩不带参数默认执行 -Sy...","head":[["meta",{"property":"og:url","content":"https://absx.pages.dev/articles/linux/package.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"包管理与使用推荐"}],["meta",{"property":"og:description","content":"包管理与使用推荐 包管理 关联文章： pacman pacman 是 archlinux 官方指定包管理器，好用，就是指令比较难记。安装来源是 linux 官方仓库，基本上都是二进制。 “滚”指 sudo pacman -Syu，更新所有包。不要隔太久不滚，挂的概率会增加。（） 也可以直接 yay 或 paru 进行更新。（这俩不带参数默认执行 -Sy..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T16:45:11.000Z"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"桌面端"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:published_time","content":"2023-10-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T16:45:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"包管理与使用推荐\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T16:45:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"包管理","slug":"包管理","link":"#包管理","children":[{"level":3,"title":"pacman","slug":"pacman","link":"#pacman","children":[]},{"level":3,"title":"AUR","slug":"aur","link":"#aur","children":[]},{"level":3,"title":"Nix","slug":"nix","link":"#nix","children":[]},{"level":3,"title":"apt","slug":"apt","link":"#apt","children":[]}]},{"level":2,"title":"打包","slug":"打包","link":"#打包","children":[{"level":3,"title":"AUR","slug":"aur-1","link":"#aur-1","children":[]}]},{"level":2,"title":"包使用","slug":"包使用","link":"#包使用","children":[{"level":3,"title":"基础 CLI 工具","slug":"基础-cli-工具","link":"#基础-cli-工具","children":[]},{"level":3,"title":"kde apps","slug":"kde-apps","link":"#kde-apps","children":[]},{"level":3,"title":"shell","slug":"shell","link":"#shell","children":[]},{"level":3,"title":"聊天软件","slug":"聊天软件","link":"#聊天软件","children":[]},{"level":3,"title":"邮件","slug":"邮件","link":"#邮件","children":[]},{"level":3,"title":"文本编辑器","slug":"文本编辑器","link":"#文本编辑器","children":[]},{"level":3,"title":"游戏","slug":"游戏","link":"#游戏","children":[]},{"level":3,"title":"录音","slug":"录音","link":"#录音","children":[]},{"level":3,"title":"关于文档","slug":"关于文档","link":"#关于文档","children":[]},{"level":3,"title":"系统监视","slug":"系统监视","link":"#系统监视","children":[]},{"level":3,"title":"资源监视器","slug":"资源监视器","link":"#资源监视器","children":[]},{"level":3,"title":"命令行历史记录","slug":"命令行历史记录","link":"#命令行历史记录","children":[]},{"level":3,"title":"代码量统计","slug":"代码量统计","link":"#代码量统计","children":[]},{"level":3,"title":"搜索","slug":"搜索","link":"#搜索","children":[]},{"level":3,"title":"neovim","slug":"neovim","link":"#neovim","children":[]},{"level":3,"title":"eza","slug":"eza","link":"#eza","children":[]},{"level":3,"title":"终端复用器","slug":"终端复用器","link":"#终端复用器","children":[]},{"level":3,"title":"tlp","slug":"tlp","link":"#tlp","children":[]},{"level":3,"title":"activitywatch","slug":"activitywatch","link":"#activitywatch","children":[]},{"level":3,"title":"waydroid","slug":"waydroid","link":"#waydroid","children":[]},{"level":3,"title":"distrobox","slug":"distrobox","link":"#distrobox","children":[]}]},{"level":2,"title":"external","slug":"external","link":"#external","children":[]}],"git":{"createdTime":1698495742000,"updatedTime":1733330711000,"contributors":[{"name":"lxl66566","email":"18259734087@163.com","commits":33},{"name":"lxl66566","email":"lxl66566@gmail.com","commits":23}]},"readingTime":{"minutes":14.83,"words":4450},"filePathRelative":"articles/linux/package.md","localizedDate":"2023年10月28日","excerpt":"\\n","autoDesc":true}');export{ni as comp,ri as data};
