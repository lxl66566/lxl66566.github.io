import{_ as o,e as g,f as n,i as h,g as i,j as t,h as a,r,o as c}from"./app-CncW5Zhs.js";const A={},y={class:"footnotes"},u={class:"footnotes-list"},F={id:"footnote1",class:"footnote-item"};function b(f,s){const k=r("RouteLink"),p=r("Tabs"),d=r("CodeTabs");return c(),g("div",null,[s[48]||(s[48]=n('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h1><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么</span></a></h2><p><em>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. ——<a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">git-scm.com</a></em></p><p>版本控制，可以进行备份，协同开发。<em>Github 只支持 Git 作为唯一的版本库格式进行托管。</em></p><h2 id="学习" tabindex="-1"><a class="header-anchor" href="#学习"><span>学习</span></a></h2><blockquote><p>通过自顶向下的方式（从命令行接口开始）学习 Git 可能会让人感到非常困惑。很多时候您只能死记硬背一些命令行，然后像使用魔法一样使用它们。 ——<a href="https://missing-semester-cn.github.io/2020/version-control/" target="_blank" rel="noopener noreferrer">The Missing</a></p></blockquote><ul><li><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener noreferrer">learngitbranching</a></li><li><a href="https://missing-semester-cn.github.io/2020/version-control/" target="_blank" rel="noopener noreferrer">The Missing</a></li></ul><h2 id="安装与配置" tabindex="-1"><a class="header-anchor" href="#安装与配置"><span>安装与配置</span></a></h2><h3 id="安装-windows" tabindex="-1"><a class="header-anchor" href="#安装-windows"><span>安装（windows）</span></a></h3><p>此处仅安装 Git Bash，不涉及 GUI。</p>',10)),h(p,{id:"41",data:[{id:"scoop"},{id:"git for windows"}]},{title0:t(({value:e,isActive:l})=>s[0]||(s[0]=[a("scoop")])),title1:t(({value:e,isActive:l})=>s[1]||(s[1]=[a("git for windows")])),tab0:t(({value:e,isActive:l})=>[i("p",null,[s[3]||(s[3]=a("使用 ")),h(k,{to:"/farraginous/recommend_packages.html#scoop"},{default:t(()=>s[2]||(s[2]=[a("scoop")])),_:1}),s[4]||(s[4]=a(" 可以一行搞定：")),s[5]||(s[5]=i("code",null,"scoop install git",-1)),s[6]||(s[6]=a("。"))]),s[7]||(s[7]=i("p",null,[a("注意安装完的提示，可以直接一行命令添加 "),i("code",null,"*.sh"),a(" 的键绑定。")],-1)),s[8]||(s[8]=i("p",null,[i("s",null,[a("在 "),i("em",null,"windows 设置 - 应用 - 默认应用"),a(" 中为 "),i("code",null,".sh"),a(" 文件添加默认打开方式，添加为 "),i("code",null,"...\\scoop\\apps\\git\\current\\git-bash.exe"),a("（填写实际路径）。否则无法直接双击 "),i("code",null,"*.sh"),a(" 文件直接运行。")]),a(" 现已无需手动添加。")],-1))]),tab1:t(({value:e,isActive:l})=>s[9]||(s[9]=[i("blockquote",null,[i("p",null,'"Git for Windows SDK" is 5.33GB compared to "Git for Windows" 691MB compared to "Portable Git" 275MB.'),i("div",{style:{"text-align":"right"}},[i("p",null,[a("——"),i("a",{href:"https://github.com/mcgitty/pacman-for-git/blob/main/pacman-for-git.txt",target:"_blank",rel:"noopener noreferrer"},"pacman-for-git")])]),i("p",null,"git for windows 官方的安装包就是纯纯流氓。明明是 git 和 msys2 结合体，却不让安装其他软件。")],-1),i("p",null,"git for windows 的安装也算是一门学问，一共十几个英文步骤选项对新手极其折磨；当然你也可以一路确定，没什么大问题，就是占用空间多一点罢了。",-1)])),_:1}),s[49]||(s[49]=n(`<h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>建议在第一次使用前配置 git。当然不配置也没关系，<s>后面慢慢摸索也就会了</s>。</p><ol><li>配置个人信息<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Your Name&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.email</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;your-email@example.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>这里建议将 <code>Your Name</code> &amp; <code>your-email@example.com</code> 设为 Github 注册用户名与邮箱，使 Github 能够统计你的 commits。</li><li>配置代理：由于众所周知的原因，最好使用代理上 Github。请在 <code>&lt;port&gt;</code> 处填写你的本地代理端口：<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http.proxy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://127.0.0.1:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https.proxy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://127.0.0.1:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>还需要配置 ssh 的代理：编辑 <code>~/.ssh/config</code>，输入如下内容<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Host github.com   # &quot;github.com&quot; 匹配的是仓库的 remote host name, 可以通过 git remote -v 查看。</span></span>
<span class="line"><span>    User git</span></span>
<span class="line"><span>    Hostname ssh.github.com</span></span>
<span class="line"><span>    Port 443</span></span>
<span class="line"><span>    # ProxyCommand connect -H 127.0.0.1:&lt;port&gt; %h %p  # 如果你设置了 HTTP_PROXY 和 HTTPS_PROXY 环境变量，可以不写这行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>其他全局设置<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push.default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> current</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 设置默认推送，简化 git push</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push.autoSetupRemote</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 默认设置上游，搭配上条</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> core.quotepath</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 取消中文转义，需要终端支持 utf-8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> safe.directory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;*&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 取消目录安全警告</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> diff.algorithm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> histogram</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 更改默认 diff 算法，详见页面底 external 1.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init.defaultBranch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 更改默认分支为 main（linux 默认还是 master）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase.autoSquash</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 自动 squash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> core.ignorecase</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # （Windows）将文件名大小写改动也视为改动。https://t.me/withabsolutex/2156</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 全局忽略</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">printf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;node_modules\\n__pycache__\\n*.exe\\n*.o\\n&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">~/.gitignore_g</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> core.excludesfile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~/.gitignore_g</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参考<a href="#%E5%8F%96%E6%B6%88%E8%BD%AC%E4%B9%89">取消转义</a></li><li><a href="https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings" target="_blank" rel="noopener noreferrer">设置 autocrlf</a>。（无论 Windows 还是 Linux 都要设！）</li></ul></li><li>vscode 插件：如果你使用 vscode 作为你的代码开发环境，那么推荐使用轻量级插件 <code>Git Graph</code> 以直观地查看 git 提交树与更改。</li><li>其他 git 插件 <ul><li><a href="https://difftastic.wilfred.me.uk/git.html#difftastic-by-default" target="_blank" rel="noopener noreferrer">difftastic</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%A4%A7%E6%96%87%E4%BB%B6">git-filter-repo</a></li></ul></li><li>然后当你了解了 git 的更多知识后，可以去看看 <a href="#external">external 7.</a>。</li></ol><h2 id="其他工具" tabindex="-1"><a class="header-anchor" href="#其他工具"><span>其他工具</span></a></h2><ul><li><a href="https://github.com/extrawurst/gitui" target="_blank" rel="noopener noreferrer">gitui</a>：TUI git 工具</li><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener noreferrer">Commitizen</a>：帮助写出规范的 commit message</li></ul><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><ul><li>在 windows git bash 中，<code>ctrl + insert</code> 复制，<code>shift + insert</code> 粘贴</li><li>执行 git 命令前，请确认当前目录是否正确</li></ul><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库"><span>创建仓库</span></a></h3><div class="language-sh" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span></code></pre></div><p>创建仓库后，目录下出现<code>.git</code>隐藏文件夹，即为仓库本体。因此若要删除仓库，最快捷的方法就是直接删除<code>.git</code>文件夹。</p><blockquote><p>在 windows 下由于权限问题会出现无法删除的情况，此时请在 bash <code>rm -rf .git</code></p></blockquote><h3 id="提交" tabindex="-1"><a class="header-anchor" href="#提交"><span>提交</span></a></h3><p>提交你的修改。提交前需要<strong>先将文件添加到暂存区</strong>。</p><p>可以直接 <code>git add &lt;file_path&gt;</code>，但是一般的工程都会在主目录下使用 <code>.gitignore</code> 声明忽略的文件，然后直接 <code>git add -A</code>。</p><blockquote><p>小知识：git stage 是同义于 git add 的。<a href="https://wkevin.github.io/GitChat/gitchat.html#%E4%BF%AE%E6%94%B9%E5%AE%8C%E4%BA%86%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E6%8F%90%E4%BA%A4%E8%80%8C%E6%98%AF-git-add" target="_blank" rel="noopener noreferrer">ref</a></p></blockquote><p>然后执行 <code>git commit -m &quot;注释&quot;</code> 提交。提交的注释有一定要求，如果是协作开发，请遵守。如果是个人项目，那随意。</p><ul><li>言简意赅，清楚描述自己这次提交的修改内容</li><li>一般现在时</li></ul><p>如果没有新增文件，可以将添加到暂存区和提交合成一条指令，<code>git commit -am &quot;注释&quot;</code>，即提交所有<strong>已追踪文件</strong>。</p><p>一般来说，不需要为修改的每个文件使用不同注释。</p><h3 id="上传" tabindex="-1"><a class="header-anchor" href="#上传"><span>上传</span></a></h3><p>将你的仓库上传到 github 等仓库托管平台。</p><h4 id="添加远程地址" tabindex="-1"><a class="header-anchor" href="#添加远程地址"><span>添加远程地址</span></a></h4>`,22)),h(d,{id:"230",data:[{id:"SSH"},{id:"HTTPS"}]},{title0:t(({value:e,isActive:l})=>s[10]||(s[10]=[a("SSH")])),title1:t(({value:e,isActive:l})=>s[11]||(s[11]=[a("HTTPS")])),tab0:t(({value:e,isActive:l})=>s[12]||(s[12]=[i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"git"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," remote"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," origin"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," git@github.com:"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"<"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"yourgithubI"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"D>"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"/"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"<"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"Rep"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"o>"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},".git")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1)])),tab1:t(({value:e,isActive:l})=>s[13]||(s[13]=[i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"git"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," remote"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," origin"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," https://github.com/yourgithubID/gitRepo.git")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1)])),_:1}),s[50]||(s[50]=n(`<blockquote><p>优先使用 ssh，不过需要配置，如果不想配置可以使用 https。<br> 可以理解为给 git 地址起了个别名，方便记忆。一般都用 <code>origin</code>。</p></blockquote><h4 id="配置-ssh" tabindex="-1"><a class="header-anchor" href="#配置-ssh"><span>配置 ssh</span></a></h4><p>首次使用 ssh 连接需要先配置 ssh 密钥。在 git bash 中输入下述指令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ed25519</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;youremail@example.com&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 这里的邮箱与你的 github 注册邮箱相同。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 然后一路回车</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~/.ssh/id_ed25519.pub</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                             # 把这个文件的内容打印出来，然后复制到剪切板。或者你也可以用记事本打开，都行，只要拿到内容即可。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 点击github右上角头像，进入 Settings-SSH and GPG keys，新建你的 ssh key 并粘贴内容。标题随便写。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -T</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git@github.com</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 验证 ssh key 是否设置成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（疑难解答<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>：ssh 密钥添加后出现 <code>ssh: connect to host github.com port 22: Connection refused</code> 错误）</li></ul><h4 id="推送" tabindex="-1"><a class="header-anchor" href="#推送"><span>推送</span></a></h4><p>请确保已<a href="#%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E5%9C%B0%E5%9D%80">添加远程地址</a>。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># branch 为当前分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-u</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 将当前分支设为默认</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-f</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 强制覆盖上传，慎用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--force-with-lease</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 建议使用此选项代替 -f，更加安全</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你已经能完成基本的上传文件到 github 的操作。</p><h3 id="忽略文件-夹" tabindex="-1"><a class="header-anchor" href="#忽略文件-夹"><span>忽略文件（夹）</span></a></h3><p>在仓库下新建 <code>.gitignore</code>，输入你需要忽略的文件或文件夹，以换行隔开。</p><p><code>!</code> 开头的表示反选，即“不要忽略”。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>开发时请务必将你的无关文件添加进 <code>.gitignore</code>。</p></div><p>注意其语法与 linux 文件系统类似，<code>/</code> 开头的为根目录，别搞错了。</p><h4 id="全局忽略" tabindex="-1"><a class="header-anchor" href="#全局忽略"><span>全局忽略</span></a></h4><p><code>git config --global core.excludesfile &lt;ignore_file&gt;</code> 可以配置一个全局 ignore，假如忘记添加 <code>.gitignore</code>，全局命中也能避免上传无关内容。</p><h3 id="自动化脚本" tabindex="-1"><a class="header-anchor" href="#自动化脚本"><span>自动化脚本</span></a></h3><p>新建 <code>xxx.sh</code>，输入每行一个指令，双击运行。本质是 bash 脚本。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>脚本执行完成后将自动关闭窗口。若需使之不自动关闭，请添加<code>exec /bin/bash</code>指令至末行。</p></div><h3 id="设置" tabindex="-1"><a class="header-anchor" href="#设置"><span>设置</span></a></h3><p>在前面的章节中已经用到了 <code>git config</code>。git 的配置分为仓库配置与全局配置，两者都是 <code>.toml</code> 格式的文件。<code>git config xxx</code> 本质就是添加/修改配置文件中的条目。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --edit</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 使用默认编辑器打开 local config 文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --edit</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 相对的，打开 global 文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias.p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;pull origin code&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 向 alias.p 内写入值（添加命令别名）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h2><h3 id="提交-1" tabindex="-1"><a class="header-anchor" href="#提交-1"><span>提交</span></a></h3>`,24)),i("ul",null,[s[19]||(s[19]=i("li",null,[a("撤销上次 commit："),i("code",null,"git reset --soft HEAD~1"),a("，其中 "),i("code",null,"--soft"),a(" 表示保留代码与 "),i("code",null,"git add"),a(" 的暂存区")],-1)),i("li",null,[s[15]||(s[15]=a("修改注释：")),s[16]||(s[16]=i("code",null,"git commit --amend",-1)),s[17]||(s[17]=a("，(git bash 下) 需要使用 ")),h(k,{to:"/coding/vim.html"},{default:t(()=>s[14]||(s[14]=[a("Vim")])),_:1}),s[18]||(s[18]=a("，需要强制推送。"))]),s[20]||(s[20]=i("li",null,[a("还有比较常用的，回到上一个 commit 的状态，去除所有多余文件和改动："),i("code",null,"git reset --hard HEAD && git clean -f -d")],-1))]),s[51]||(s[51]=n(`<h3 id="远程" tabindex="-1"><a class="header-anchor" href="#远程"><span>远程</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看远程仓库，name 留空即为列出当前远程仓库列表</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除远程名字</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fetch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 拉取远程</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除远程-tag" tabindex="-1"><a class="header-anchor" href="#删除远程-tag"><span>删除远程 tag</span></a></h4><p>如果在 github 上新建了一个 release 后，代码又发生了改变，此时 release 中的 source code 将不会自动更新。</p><p>理论上，需要新建一个 tag 进行更新。</p><p>在特殊需求下，我们也可以通过删除原 tag 再添加 tag 的方法更新 source code。此时 release 信息会被保留，状态更改为 draft。</p><p><code>git push origin :refs/tags/TAGNAME</code></p><h3 id="仓库查询" tabindex="-1"><a class="header-anchor" href="#仓库查询"><span>仓库查询</span></a></h3><ul><li>查看仓库内文件：<code>git ls-files</code></li><li><strong>查看仓库状态：<code>git status</code></strong>，比较重要</li><li>查看仓库提交记录：<code>git log</code><ul><li>以树状图显示：<code>git log --graph --oneline --all</code>，很有用，特别是在服务器上。</li></ul></li><li>查询 commit 详细信息：<code>git show --stat [commit]</code>；<code>[commit]</code> 留空则查询最近一次 commit 的信息</li></ul><h3 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    # 查看分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">new_branch_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 新建分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branch_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 切换到分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branch_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 新建并切换到分支，trick</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">old_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">new_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 重命名分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branch_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branch_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除远程分支</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>（疑难解答<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>：<em>fatal: refusing to merge unrelated histories</em>）</li><li>（疑难解答<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>：<em>unable to delete &#39;origin/main&#39;: remote ref does not exist</em>）</li><li>（疑难解答<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>：<code>git push origin -d master</code> 时 github 拒绝删除分支）</li></ul><h3 id="操作文件" tabindex="-1"><a class="header-anchor" href="#操作文件"><span>操作文件</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cached</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filename.xxx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # --cached 指仅删除仓库内文件，不删除本地文件；-r 为递归</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也可以用来删除被添加到暂存区 (git add) 的文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [commit_hash] -- &lt;path/to/file&gt;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 从某个 HEAD 指针恢复文件，注意空格</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gitrep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">o&gt;                       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在当前目录下创建文件夹并克隆完整仓库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gitrep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">o&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--depth</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # 仅克隆最新提交，减少大小</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gitrep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">o&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--filter=blob:none</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # Blobless clones</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gitrep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">o&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--filter=tree:0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # Treeless clones</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 Blobless clones 和 Treeless clones 可以查看 <a href="#external">external 6.</a>。简单概括，Treeless clones 是下载量最少的 clone 方式。</p><h3 id="彻底删除提交" tabindex="-1"><a class="header-anchor" href="#彻底删除提交"><span>彻底删除提交</span></a></h3><p>在<a href="#%E6%B7%B1%E5%85%A5">深入</a>中有提到，一旦 commit 过后，此次修改就不会消失。那么如果我无论如何就是想要让此次修改消失呢？(<a href="https://www.cnblogs.com/my_life/articles/16141241.html" target="_blank" rel="noopener noreferrer">src</a>)</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reflog</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> expire</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --expire-unreachable=0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --all</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --prune=0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="submodule" tabindex="-1"><a class="header-anchor" href="#submodule"><span>submodule</span></a></h3><p>若想在 git 仓库内包含子仓库，需要将子仓库转换为 submodule。submodule 本质上是一个 symbol link，指向一个本地或网络仓库位置。</p><ul><li>创建：<code>git submodule add &lt;1&gt; &lt;2&gt;</code>，添加一个现有仓库 <code>1</code> 到 位置 <code>2</code>。<code>1</code> 可以是本地位置或网络位置，而 <code>2</code> 一般是本仓库下的相对路径。</li><li>拉取： <ul><li>使用 clone 无法直接拉取 submodule，需要添加 <code>--recursive</code>。</li><li>对于 pull 或者已经拉取的仓库，单独拉取 submodule，需要 <code>git submodule update --init --recursive</code> (<a href="https://stackoverflow.com/questions/1030169/" target="_blank" rel="noopener noreferrer">ref</a>)</li></ul></li></ul><h2 id="深入" tabindex="-1"><a class="header-anchor" href="#深入"><span>深入</span></a></h2><blockquote><p>这里是原创内容，是我个人摸索/结合其他文章得出的、对提交树的理解。可能有误，需要自行辨认。</p></blockquote><p>git 构成的结构可以看成一颗<strong>提交树</strong>。（实际上是 DAG，有向无环图）</p><p>git 的一个重要概念是 <code>HEAD</code>。<code>HEAD</code> （理解为指针）指向你当前所在的节点。</p><p>每次提交（包括 <code>git stash</code>）相当于在提交树上创造一个 <code>HEAD</code> 的子节点。只要有过 commit，它就不会消失。后文中默认 <code>节点</code> == <code>提交</code>。</p><p>每个 branch 也是指针，指向某个节点。后文中默认 <code>分支</code> --&gt; <code>指针</code>。（but <code>指针</code> !== <code>分支</code>）</p><p><em>remote branch</em> (ex. <code>origin/main</code>) 和 <em>local branch</em> (ex. <code>main</code>) 可以看成是不同的 branch。<code>git push</code> 就可以看成让 <code>origin/main</code> 指向 <code>main</code> 的过程（当然还有同步）。</p><h3 id="畅游-git-提交树" tabindex="-1"><a class="header-anchor" href="#畅游-git-提交树"><span>畅游 git 提交树</span></a></h3><p>每个节点的 hash 值是 40 位的，但是可以用（最短）前 4 位来代替，当然也可以用一个指针的名字来代替。</p><p><code>git checkout &lt;hash&gt;</code> 可以让 <code>HEAD</code> 指向任意节点。如果没有任何分支指向 <code>HEAD</code> 同一节点，则进入 <code>HEAD detached</code> 模式。</p><p><code>git checkout &lt;branch_name&gt;</code>（新版本 git 建议用 <code>switch</code> 代替 <code>checkout</code> 的这一功能）会退出 <code>HEAD detached</code> 模式，并将 <code>HEAD</code> 附着到分支指针上。</p><p>而 <code>git reset --hard &lt;hash&gt;</code> 则更进一步，若当前并非 <code>HEAD detached</code> 模式（即 <code>HEAD</code> 依附于一个分支），则在将 <code>HEAD</code> 指向节点的同时，也会让分支跟随着指向 <code>HEAD</code>。</p><ul><li><code>--hard</code> 表示强制恢复节点处的文件（不删除未追踪文件），请确保当前没有 Uncommited Changes，否则。。。</li><li>还有其他让分支指向其他节点的方法： <ul><li>可以用 <code>git branch -f &lt;branch&gt; &lt;point_to&gt;</code>。这个分支不能是 <code>HEAD</code> 依附的分支。</li><li>可以用 <code>git merge --ff-only &lt;point_to&gt;</code>。将当前 <code>HEAD</code> 依附的分支指向任意代子节点。 <ul><li>不加 <code>--ff-only</code> 则没有子节点的限制，进化为合并操作。</li></ul></li><li>（疑难解答<sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup>：无法强制更新被工作区...所使用的分支）</li></ul></li></ul><p>这样我们已经可以操作任意指针指向任意节点了。</p><p><code>git rebase -i</code>（即 <code>--interactive</code>，交互式）可以对提交树进行任意操作，例如：任意编辑注释，更改提交顺序，删除（<code>drop</code>）或合并（<code>squash</code>）节点等。需要使用编辑器<sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup>。</p><p><code>git merge ...</code> 创建一个节点，作为两个 branch 共同的子节点，并将两个 branch 都指向它。此时提交树已失去树结构，退化为 DAG。</p><p>默认情况下，不在 <em>根节点</em> 和 <em>任意指针</em> 连线路径上的节点会被隐藏，<code>git log -a</code> 是看不到的。可以用 <code>git reflog</code> 查看 hash 值。</p><h3 id="任意组合提交树" tabindex="-1"><a class="header-anchor" href="#任意组合提交树"><span>任意组合提交树</span></a></h3><p>现在我们已经不满足于 <strong>畅游</strong> 了，我们需要更进一步：将提交树改为我们想要的任意形状（）</p><p><code>git cherry-pick &lt;...nodes&gt;</code> 将 <code>&lt;...nodes&gt;</code> 复制以后，按顺序接在 <code>HEAD</code> 的下方，成为 <code>HEAD</code> 的子链。</p><p><code>git rebase &lt;to&gt; &lt;from&gt;</code> 会稍微复杂一点。首先 rebase 找到 <code>&lt;to&gt;</code> 和 <code>&lt;from&gt;</code> 的最近公共祖先，记为 <code>&lt;pa&gt;</code>，然后复制 <code>&lt;pa&gt;</code> 到 <code>&lt;from&gt;</code> 这条链（不包括 <code>&lt;pa&gt;</code> 自身），将其接到 <code>&lt;to&gt;</code> 上。</p><p>注意，这些命令都<strong>不会改变</strong>已存在的节点，如果遇到需要移动的情况，则会复制成不同节点。原先节点被隐藏，但我们仍然可以通过 hash 值移动到其所在位置。</p><h2 id="其他技巧" tabindex="-1"><a class="header-anchor" href="#其他技巧"><span>其他技巧</span></a></h2><h3 id="将注释设为当前时间" tabindex="-1"><a class="header-anchor" href="#将注释设为当前时间"><span>将注释设为当前时间</span></a></h3><p>一般不建议，但如果个人项目实在想不到写啥，可以这样。</p>`,48)),h(d,{id:"561",data:[{id:"bash"},{id:"powershell"}]},{title0:t(({value:e,isActive:l})=>s[21]||(s[21]=[a("bash")])),title1:t(({value:e,isActive:l})=>s[22]||(s[22]=[a("powershell")])),tab0:t(({value:e,isActive:l})=>s[23]||(s[23]=[i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# use only in bash")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"git"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," commit"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -m"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," $("),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"date"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "+%Y%m%d-%H:%M:%S"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# result: 20220613-11:34:59")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:t(({value:e,isActive:l})=>s[24]||(s[24]=[i("div",{class:"language-shell line-numbers-mode","data-highlighter":"shiki","data-ext":"shell",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# use only in powershell")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"git"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," commit"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -m"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," $("),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"get-Date"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# result: 06/17/2023 21:05:13")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[52]||(s[52]=n(`<h3 id="用于备份" tabindex="-1"><a class="header-anchor" href="#用于备份"><span>用于备份</span></a></h3><h4 id="使用-cp-方法" tabindex="-1"><a class="header-anchor" href="#使用-cp-方法"><span>使用 cp 方法</span></a></h4><p>有了 <code>.sh</code> 脚本后，可以用 <code>cp -rfu</code> 将所需文件复制到仓库再提交上传，进行备份。</p><blockquote><p>-r：递归地复制目录。<br> -f：强制 cp 命令在不提示的情况下覆盖现有文件。<br> -u：仅在目标文件不存在或目标文件比源文件旧时才复制文件。</p></blockquote><p>但是这样也太丑了一点。</p><h4 id="软链接方法" tabindex="-1"><a class="header-anchor" href="#软链接方法"><span>软链接方法</span></a></h4><p>cp 方法的一大缺点是无法反映<strong>删除</strong>的变化。这可以通过软链接解决。</p><p>但是，git 只会将软链接识别成链接本身，而不是其指向的内容。并且这是无解的。</p><p>因此我们只能将文件本体放在 git 仓库内，然后将文件软链接出去在其他地方用。这需要考虑软链接能否被其他应用正常使用。例如我将 galgame 存档链出去，有的游戏能读，有的游戏不能读，还是需要看运气的。</p><h4 id="git-bare-repo" tabindex="-1"><a class="header-anchor" href="#git-bare-repo"><span>git bare repo</span></a></h4><p>后来试了一下 <a href="https://github.com/rodrigofrancisco/dotfiles#backup-technique" target="_blank" rel="noopener noreferrer">git bare repo</a>。</p><p>linux 上倒是挺方便，但估计不能在 windows 下跨盘符使用。</p><h3 id="取消转义" tabindex="-1"><a class="header-anchor" href="#取消转义"><span>取消转义</span></a></h3><p>git bash 默认会将中文以 <code>\\</code> 转义的方式显示。要取消，需要：</p><ol><li>右键 - Options - Text - Locale，选择 <code>zh-CN</code>，字符选择 <code>UTF-8</code>。</li><li><code>git config --global core.quotepath false</code></li></ol><h3 id="协同开发" tabindex="-1"><a class="header-anchor" href="#协同开发"><span>协同开发</span></a></h3><p>多人协同开发时，免不了要拉取上游，合并代码，解决冲突。<code>git stash</code> 可以帮助你保存当前代码，之后若有需要，还可合并与解决冲突。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stash</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 暂存代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 拉取上游</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pop</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 释放代码，进行合并</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> drop</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 解决冲突后，请释放未被 pop 出的 stash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也可以使用 <code>git fetch &amp;&amp; git merge</code>。</p><h3 id="合并-pull-request" tabindex="-1"><a class="header-anchor" href="#合并-pull-request"><span>合并 Pull request</span></a></h3>`,20)),i("p",null,[s[26]||(s[26]=a("需要手动干预 PR 的场合，")),h(k,{to:"/coding/github.html#%E5%90%88%E5%B9%B6-pull-request"},{default:t(()=>s[25]||(s[25]=[a("参考 Github - 合并 Pull Request")])),_:1})]),s[53]||(s[53]=i("h3",{id:"删除大文件",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#删除大文件"},[i("span",null,"删除大文件")])],-1)),s[54]||(s[54]=i("p",null,"删除大文件是必要的。即使你删除了某个文件，其仍会存在于仓库的提交记录内。",-1)),s[55]||(s[55]=i("div",{class:"hint-container caution"},[i("p",{class:"hint-container-title"},"警告"),i("p",null,"在删除之前请务必 commit 未提交的修改！！警钟长鸣！警钟长鸣！这里（20230312）是血的惨痛教训。")],-1)),i("ol",null,[s[34]||(s[34]=n(`<li><p>查找大文件：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 需要在 git bash 或其他类 unix 环境下运行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rev-list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --objects</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> verify-pack </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .git/objects/pack/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.idx </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sort</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -k</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print$1}&#39;)&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># another edition</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># git rev-list --all | xargs -rL1 git ls-tree -r --long | sort -uk3 | sort -rnk4 | head -15</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>tail [-n]</code> 为显示的条目数。（疑难解答<sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup>：_查找大文件时出现<code>Cannot open existing pack file &#39;.git/objects/pack/_.idx&#39;</code>错误*）</p></li>`,1)),i("li",null,[s[33]||(s[33]=i("p",null,"清理。",-1)),h(p,{id:"666",data:[{id:"bfg-repo-cleaner（推荐）"},{id:"filter-repo（推荐）"},{id:"filter-branch"}]},{title0:t(({value:e,isActive:l})=>s[27]||(s[27]=[a("bfg-repo-cleaner（推荐）")])),title1:t(({value:e,isActive:l})=>s[28]||(s[28]=[a("filter-repo（推荐）")])),title2:t(({value:e,isActive:l})=>s[29]||(s[29]=[a("filter-branch")])),tab0:t(({value:e,isActive:l})=>s[30]||(s[30]=[i("p",null,[i("a",{href:"https://rtyley.github.io/bfg-repo-cleaner/",target:"_blank",rel:"noopener noreferrer"},"bfg-repo-cleaner"),a(" 是我某天刷 nix store 时看到的，尝试了一下，也非常不错。")],-1),i("p",null,[a("主要用法就 "),i("code",null,"--delete-files"),a(", "),i("code",null,"--delete-folders"),a(" 两个。这两个是 match 名字而不是路径。")],-1)])),tab1:t(({value:e,isActive:l})=>s[31]||(s[31]=[i("p",null,[i("a",{href:"https://github.com/newren/git-filter-repo",target:"_blank",rel:"noopener noreferrer"},"git-filter-repo")],-1),i("p",null,"git 官方推荐的清理工具。需要额外安装，并且可能失效。",-1),i("p",null,[a("windows 下推荐使用 scoop 安装，安装过程详见仓库说明。（疑难解答"),i("sup",{class:"footnote-ref"},[i("a",{href:"#footnote8"},"[8]"),i("a",{class:"footnote-anchor",id:"footnote-ref8"})]),a("："),i("em",null,[a("运行 "),i("code",null,"git filter-repo"),a(" 出现 "),i("code",null,"name 'git' is not defined"),a(" 报错")]),a("）")],-1),i("p",null,[a("关于使用方法，"),i("s",null,"没人能看懂官方文档"),a("，建议直接找"),i("a",{href:"https://nyakku.moe/posts/2020/06/12/use-git-filter-repo-clean-git-history.html",target:"_blank",rel:"noopener noreferrer"},"教程"),a("。")],-1),i("div",{class:"language-sh","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"git"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," filter-repo"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --invert-paths"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -f"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --path"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "<path/of/file>"')])])])],-1)])),tab2:t(({value:e,isActive:l})=>s[32]||(s[32]=[i("p",null,[i("a",{href:"https://harttle.land/2016/03/22/purge-large-files-in-gitrepo.html",target:"_blank",rel:"noopener noreferrer"},"ref")],-1),i("p",null,"不太推荐这种方式，比较慢（真的）。好处是无需安装，并且一定可用。",-1),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"git"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," filter-branch"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -f"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --prune-empty"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --index-filter"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 'git rm -rf --cached --ignore-unmatch <path/of/file>'"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --tag-name-filter"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," cat"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," --all")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# another edition:")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},'# git filter-branch --tree-filter "rm -f <path/of/file>" -- --all')])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1})]),s[35]||(s[35]=i("li",null,[i("p",null,[a("清理完成后请使用 "),i("code",null,"git gc --prune=now"),a(" 进行碎片收集，上传时需要 "),i("code",null,"git push -f"),a(" 强制覆盖。")])],-1))]),s[56]||(s[56]=n(`<h3 id="大文件上传" tabindex="-1"><a class="header-anchor" href="#大文件上传"><span>大文件上传</span></a></h3><blockquote><p>此处暂不讨论 git-lfs.<br> Github 对单次上传限制为 2G，在我看来是个非常脑瘫的举措。</p></blockquote><p>首先，若有大文件，最该考虑的是 <code>git-lfs</code>。具有先见之明的做法可以极大减少后期维护的成本。</p><p>其次，我在网上找到了<a href="https://gist.github.com/banyudu/b5bac69767f49073e09985d82128e713" target="_blank" rel="noopener noreferrer">这些资料</a>，但其中提到的 Stackoverflow 的<a href="https://stackoverflow.com/questions/15125862/github-remote-push-pack-size-exceeded/51468389#51468389" target="_blank" rel="noopener noreferrer">脚本</a>并不能很好地运行。因此我根据上述原理支撑，自己写了一个脚本。适用于文件总体过大但每个 commit 都不超出大小限制的情况。</p><ol><li>导出所有 commit hash 并翻转使最早的 commit 被最先提交。<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --pretty=format:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;%H&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">temp.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tac</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> temp.txt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">log_hash.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>注意，<code>tac</code> 反转可能会出现第一行与第二行换行缺失问题，请手动添加换行。</li><li>分 commit 上传<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> IFS</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> read</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;pushing </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$hash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $hash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:refs/heads/master</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; log_hash.txt</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>关于分支与是否加 <code>-f</code> 需要根据情况判断。</li></ol><h3 id="reflog-查找" tabindex="-1"><a class="header-anchor" href="#reflog-查找"><span>reflog 查找</span></a></h3><p>我曾经遇到过文件丢失的情况，这个文件理论上应该永远是 Uncommited changes，不需要被提交。于是在某次 git 操作时文件丢失了。</p><p>但是我记得我曾经有将此文件误提交的事情，虽然当时就 fixup 了。只要有提交过，文件就会在 reflog 中保留下来。这给了我恢复文件的可能性。</p><p>那么要如何知道是哪个 commit 中引入的此文件呢？让 GPT 写一个脚本，稍作修改得到：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> reflogEntry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reflog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $reflogEntry</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> $@</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$?</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -eq</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Found in commit </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$reflogEntry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   fi</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以 <code>bash test.sh &lt;file&gt;</code> 了。</p><h3 id="签名" tabindex="-1"><a class="header-anchor" href="#签名"><span>签名</span></a></h3><p>一般情况下，git 提交都是不需要签名的。但是面对大项目的协同开发，有时没办法，如果不签名，CI 都过不去。因此学习如何签名也是有必要的。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gpg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --generate-key</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 然后填写与 git 提交一样的名字与邮箱。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gpg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --list-secret-keys</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --keyid-format=long</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 寻找私钥 ID 并复制</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gpg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --armor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --export</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 83D</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">********</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 打印公钥，上传到 Github</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit.gpgsign</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 设置该仓库 commit 时自动签名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要对已存在的 commit 签名，可以 <code>git rebase -i HEAD</code>，然后将其中的 <code>noop</code>(<em>no operation</em>) 改为 <code>exec git commit --amend --no-edit -S</code> 即可。</p><h3 id="统计-git-分支大小" tabindex="-1"><a class="header-anchor" href="#统计-git-分支大小"><span>统计 git 分支大小</span></a></h3><p>用 gpt 写了个。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 假设已 checkout 到此分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls-files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> du</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">paste</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -sd+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可能需要安装 <code>bc</code>（<code>pacman -S bc</code>）。统计结果理论以 K 为单位。</p><h2 id="奇技淫巧" tabindex="-1"><a class="header-anchor" href="#奇技淫巧"><span>奇技淫巧</span></a></h2><h3 id="自动化-squash" tabindex="-1"><a class="header-anchor" href="#自动化-squash"><span>自动化 squash</span></a></h3><p>最初目的是不要让 Github Actions 的每日 commit 过多（），于是想自动将所有 Github Actions 的 commits 压在一起。而 CI 流程让我无法手动 squash。话不多说，直接上脚本：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --fixup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">GIT_SEQUENCE_EDITOR</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --autosquash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD~2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>首先 <code>commit -a</code> 跟踪所有改动并提交，<code>--fixup HEAD</code> 表明这是一个对上次 commit 的修正。新的提交会被命名为 <code>fixup! &lt;last commit message&gt;</code>。</p><p>然后关于 <code>--autosquash</code>，<a href="https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---autosquash" target="_blank" rel="noopener noreferrer">文档</a>指出以 <code>squash! …​</code> or <code>fixup! …​</code> or <code>amend! …​</code> 开头的 commit 都会被 squash 进 <code>…</code> 对应的 commit。但是这个参数的使用条件被限制死了：</p><blockquote><p><em>move commits that begin with squash!/fixup! <mark>under -i</mark></em></p></blockquote><p>也就是必需要进入 <code>--interactive</code> 环境下才可进行 <em>autosquash</em>。在平常这可能不是一个问题，手动在 vim <code>:q</code> 即可。但现在需要在全自动条件下执行，又无法绕开 <code>-i</code> 条件，那么我们要怎么办呢？</p><p><code>GIT_SEQUENCE_EDITOR=:</code> 是绝杀，它重写了环境变量，使 git 无法打开编辑器。这样 <em>rebase</em> 就会被强制结束，问题解决。</p><p>总结：</p><blockquote><p><em>Asuka Minato：用 ci 的 repo 为啥要在意提交次数，人家 cn 源的 bot 那次数都没人管</em><br><em>AbsoluteX：话题结束，鉴定为吃太饱（</em></p></blockquote><h3 id="崭新出厂" tabindex="-1"><a class="header-anchor" href="#崭新出厂"><span>崭新出厂</span></a></h3><p>像我这种喜欢用 Git 备份一切的人，也会用 Git 备份一些经常变化的大二进制文件，代表性仓库是 <a href="https://github.com/lxl66566/my-key-data" target="_blank" rel="noopener noreferrer">my-key-data</a>。久而久之，Git 仓库会越来越大，因此一段时间以后让 repo “恢复出厂设置” 以减小文件大小是有必要的。（我的备份场景下，并不在乎历史版本追溯）</p><p>我之前用的一直是简单粗暴 <code>rm -rf .git &amp;&amp; git init</code>，但是现在似乎也有了新的思路。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 假设仓库已将最新修改 commit 到 main 分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    # 切换临时分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                     # 删除旧分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --orphan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # 全新分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -A</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --signoff</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;init&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                            # 干掉 origin/HEAD 和 origin/main</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reflog</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> expire</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --expire=now</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --all</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 干掉所有引用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --prune=now</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --aggressive</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # gc，删除 blob</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就能得到一个船新的、与之前完全一致的、最小化空间占用的 repo 了。虽然这样做弯弯绕绕，咋一看还不如 <code>rm -rf .git</code>；但是这样有一个极大的好处，就是步骤中的 commit 的文件列表和之前的 commit 是一致的，<code>git push -f</code> 上传到 Github 时经过比对，实际上不需要上传数据。如果你的仓库大小上了 GB 甚至数十 GB，这一点操作能为你节约不少上传时间和流量。而 git 仓库重建后的上传是需要全量上传的。</p><h2 id="git-插件" tabindex="-1"><a class="header-anchor" href="#git-插件"><span>Git 插件</span></a></h2><p>与 cargo 类似，<code>git xxx</code> 实际上会在系统里调用名为 <code>git-xxx</code> 的可执行文件。这里有一些插件，未给出链接的请自行搜索：</p><ul><li>git-cliff：自动生成 changelog</li><li>git-absorb：将当前更改合并到某个 commit 内。 <ul><li>我不太喜欢它，我选择用我自己的脚本：<div class="language-nushell line-numbers-mode" data-highlighter="shiki" data-ext="nushell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Creates a fixup commit for a specific commit and autosquashes it via interactive rebase.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Usage:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   gfixup           # Creates a fixup commit for the current HEAD and rebases</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   gfixup &lt;hash&gt;    # Creates a fixup commit for &lt;hash&gt; and rebases</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">def</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> gfixup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">commit_hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;HEAD&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">   git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;"> -</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fixup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $commit_hash</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rebase_target</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $commit_hash</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;HEAD&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;HEAD~2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$commit_hash</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> str trim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;~1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   GIT_SEQUENCE_EDITOR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;"> -</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">autosquash</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $rebase_target</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>git-se：<a href="https://github.com/lxl66566/git-simple-encrypt" target="_blank" rel="noopener noreferrer">git-simple-encrypt</a>，用于仓库加解密</li></ul><h2 id="自建-git-托管" tabindex="-1"><a class="header-anchor" href="#自建-git-托管"><span>自建 git 托管</span></a></h2>`,39)),i("p",null,[s[37]||(s[37]=a("有一些东西，不方便放在托管网站上（即便是 private），例如个人隐私，被 DMCA 的资源，等等。因此可以在 ")),h(k,{to:"/articles/proxy/vps.html"},{default:t(()=>s[36]||(s[36]=[a("VPS")])),_:1}),s[38]||(s[38]=a(" 上自建一个 git 托管解决。"))]),s[57]||(s[57]=n('<p>我的需求非常简单，保持同步即可。因此这里也不讲什么 Gitea，直接利用最原始的 ssh(<a href="https://www.zzxworld.com/posts/4-ways-to-self-host-git-service" target="_blank" rel="noopener noreferrer">ref</a>)：在 VPS 上建一个 bare repo 就结束了！之后上传只要指定 host 和路径就行了。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">hos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://link.springer.com/article/10.1007/s10664-019-09772-z" target="_blank" rel="noopener noreferrer">How different are different diff algorithms in Git?</a></li><li><a href="https://github.blog/2020-12-17-commits-are-snapshots-not-diffs/" target="_blank" rel="noopener noreferrer">Commits are snapshots, not diffs</a></li><li>file structure <a href="https://wizardzines.com/comics/inside-git/" target="_blank" rel="noopener noreferrer">inside .git</a></li><li><a href="https://blog.miniasp.com/post/2024/06/18/How-to-Remove-Git-Unreachable-Objects" target="_blank" rel="noopener noreferrer">深入探討 Git 中的 Unreachable (無法到達的) 物件與清理方法</a></li><li><a href="https://www.jiqizhixin.com/articles/2020-05-20-3" target="_blank" rel="noopener noreferrer">一文讲透 Git 底层数据结构和原理</a></li><li><a href="https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/" target="_blank" rel="noopener noreferrer">Get up to speed with partial clone and shallow clone</a></li><li><a href="https://blog.gitbutler.com/how-git-core-devs-configure-git/" target="_blank" rel="noopener noreferrer">How Core Git Developers Configure Git</a>，非常好的文章</li></ol><hr class="footnotes-sep">',5)),i("section",y,[i("ol",u,[i("li",F,[i("p",null,[s[40]||(s[40]=a("需要使用 ")),h(k,{to:"/coding/vim.html"},{default:t(()=>s[39]||(s[39]=[a("Vim")])),_:1}),s[41]||(s[41]=a("。你也可以修改环境变量 ")),s[42]||(s[42]=i("code",null,"EDITOR",-1)),s[43]||(s[43]=a(" 的值指定其他编辑器。 ")),s[44]||(s[44]=i("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1)),s[45]||(s[45]=a()),s[46]||(s[46]=i("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"↩︎",-1))])]),s[47]||(s[47]=n('<li id="footnote2" class="footnote-item"><p>可能是代理阻断了 ssh 22 端口造成。你需要将 github 远程的端口改为 443，参考<a href="#%E9%85%8D%E7%BD%AE">配置 2.</a>。 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>当本地与远程交集为空时会出现此情况。解法：<code>git pull origin main --allow-unrelated-histories</code> <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>当远程不存在分支而本地存在分支时会出现此情况。执行 <code>git fetch --prune</code>。(<a href="https://stackoverflow.com/questions/35941566/git-says-remote-ref-does-not-exist-when-i-delete-remote-branch" target="_blank" rel="noopener noreferrer">ref</a>) <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li><li id="footnote5" class="footnote-item"><p>这种情况一般是 Github 的默认分支保护机制。进入 repo <em>Settings</em>，将默认分支改为其他分支即可。 <a href="#footnote-ref5" class="footnote-backref">↩︎</a></p></li><li id="footnote6" class="footnote-item"><p>我的这个例子是没有退出变基造成的。需要 <code>git rebase --quit</code>。 <a href="#footnote-ref6" class="footnote-backref">↩︎</a></p></li><li id="footnote7" class="footnote-item"><p>说明该项目并未触发 git 的 packfile 机制，无需删除大文件。若仍需查找，可以使用 <code># another edition</code> 后的语句。 <a href="#footnote-ref7" class="footnote-backref">↩︎</a></p></li><li id="footnote8" class="footnote-item"><p>根据<a href="https://github.com/newren/git-filter-repo/issues/360" target="_blank" rel="noopener noreferrer">这里</a>的描述做就行了。 <a href="#footnote-ref8" class="footnote-backref">↩︎</a></p></li>',7))])])])}const v=o(A,[["render",b],["__file","Git.html.vue"]]),B=JSON.parse('{"path":"/coding/Git.html","title":"Git","lang":"zh-CN","frontmatter":{"date":"2022-05-06T00:00:00.000Z","icon":"brands fa-git-alt","category":["编程"],"tag":["工具"],"description":"Git 是什么 Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. ——git-scm.com...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-04T10:13:23.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/Git.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"Git"}],["meta",{"property":"og:description","content":"Git 是什么 Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. ——git-scm.com..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-04T10:13:23.000Z"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:published_time","content":"2022-05-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-04T10:13:23.000Z"}]]},"git":{"createdTime":1651820768000,"updatedTime":1749032003000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"1421962366@qq.com","commits":97,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":21.79,"words":6538},"filePathRelative":"coding/Git.md","localizedDate":"2022年5月6日","excerpt":"\\n","autoDesc":true}');export{v as comp,B as data};
