import{_ as n,r as e,o as l,c as t,a as i,b as s,d as h,w as p,e as k}from"./app-DOwyGPsJ.js";const r={},d=i("h1",{id:"speed-up",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#speed-up"},[i("span",null,"SPEED UP！")])],-1),o=i("em",null,"天津罪",-1),c=i("em",null,"GINKA",-1),g=k(`<h2 id="ce" tabindex="-1"><a class="header-anchor" href="#ce"><span>CE</span></a></h2><p>Cheat Engine 想必大家都不陌生，我也会使用 CE 进行 RPG galgame 的加速（兰斯系列）。CE 中有一个变速精灵的功能非常好用，用鼠标点几次即可加速游戏。但是 CE 不能加速游戏音频，这也是它的最大败笔。因此我需要另寻出路。</p><h2 id="解包与封包" tabindex="-1"><a class="header-anchor" href="#解包与封包"><span>解包与封包</span></a></h2><p>20240720 我尝试了一个想法：将 galgame 音频文件解包，加速后再封包回去。由于我不会逆向，因此使用的是 GARbro，这是一个非常泛用的，多目标 galgame 资源提取器。我使用 いろとりどりのセカイ HD 尝试，这个游戏把 <code>voice.bin</code> 单文件放在根目录下，非常明显，我很轻易地就提取出了游戏的所有 ogg 格式的语音。</p><p>那么我要如何将加速后的 ogg 封装回一个 <code>voice.bin</code> 呢？我被卡在了这一步下。GARbro 根据预设的解包规则检测出格式并解了包，但是却<strong>不告诉我这个包用的究竟是什么格式</strong>。Asuka Minato 也提醒：解包容易，但封包可能非常困难。因此我打消了这个想法。</p><h2 id="pyaudio" tabindex="-1"><a class="header-anchor" href="#pyaudio"><span>pyaudio</span></a></h2><p>20240724 我进行了初次尝试，写一个 python 脚本建立了一个系统音频合成器到扬声器的音频流，在中间使用脚本进行音频加速。</p><p>首先安装一个 VB Cable，其作用是修改输入输出设备，防止音频合成器直接将音频输出到扬声器，覆盖掉我处理后的输入。然后脚本大概是这样：</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pyaudio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 配置音频流参数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">FORMAT</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pyaudio.paInt16</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">CHANNELS</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">RATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 44100</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">CHUNK</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1024</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">SPEED_FACTOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1.5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pyaudio.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">PyAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> list_audio_devices_and_return_vb_cable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    info </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">get_host_api_info_by_index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    num_devices </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> info.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;deviceCount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    device_map </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(num_devices):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        device_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">get_device_info_by_host_api_device_index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        device_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> device_info.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        device_map[device_name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Device ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">i</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> - Name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">device_info.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> - Input Channels: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">device_info[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;maxInputChannels&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">, Output Channels: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">device_info[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;maxOutputChannels&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     # 直接返回 device id, for testing</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 获取设备索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">input_index, output_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> list_audio_devices_and_return_vb_cable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;VB-Cable Input: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">input_index</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">, VB-Cable Output: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">output_index</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">input_stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">FORMAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    channels</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">CHANNELS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">RATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # rate=int(RATE * SPEED_FACTOR),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    input</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    frames_per_buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">CHUNK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    input_device_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">input_index,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">in_data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">frame_count</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">time_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    out_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(frame_count, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">exception_on_overflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (out_data, pyaudio.paContinue)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">output_stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">FORMAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    channels</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">CHANNELS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">RATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> SPEED_FACTOR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # rate=RATE,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    output</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # frames_per_buffer=int(CHUNK / SPEED_FACTOR),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    frames_per_buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">CHUNK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    output_device_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">output_index,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    stream_callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">callback,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 检查是否成功打开</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">is_active</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> output_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">is_active</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;输入和输出流已成功打开。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        time.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;"> KeyboardInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 用户中断程序时，关闭音频流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">stop_stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    output_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">stop_stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    output_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>音频的模型可以想象成拥有一个 trunk 缓冲区，音频先被输入到缓冲区，然后再播放出去，而这个缓冲区归我所有，我可以对其进行任意操作。</p><p>先列出所有音频设备，然后指定音频合成器作为输入流，扬声器作为输出流，定义了一个 callback 函数让输出流可以直接通过 callback 去请求输入（也可以不用 callback，将逻辑写在 while True 里）。至于音频加速则体现在 output stream 的 rate 上，因此实际上没有对音频进行任何处理，只是改变了输出速率。</p><p>实际测试中，音频输出速度和频率确实升高了，但是表现为 (输出一段加速的音频 -&gt; 静音一段时间) 的循环。这是因为 trunk 的输入速率是恒定的，pyaudio 会 wait trunk 填满。如果我加速把 trunk 的音频打出去，那么就会有一段时间，trunk 里不存在音频，所以没有输出。</p><p>把 CE 和此脚本一起使用也还是一样的效果，因为 CE 本身不能加速音频，也就无法加速程序对 trunk 的填充速度。因此此次尝试失败，感觉尝试的方向就是错的，没法通过音频倒逼游戏速度。</p><h2 id="tas" tabindex="-1"><a class="header-anchor" href="#tas"><span>TAS</span></a></h2><p>20240727 （也就是本文撰写时间），我突然想到，TAS 是把游戏慢放，那么反向 TAS 是否就能够加速游戏呢？并且 TAS 视频中游戏声音是正常的，显然 TAS 有自己的办法处理游戏音频速度，所以理论上一定是行得通的。</p><h3 id="libtas" tabindex="-1"><a class="header-anchor" href="#libtas"><span>libTAS</span></a></h3><p>首先我尝试了 libTAS，这是一个泛目标开源 tas 库+软件，许多其他 TAS 生态是建立在 libTAS 上的。libTAS 只能运行在 linux。libTAS 在 NixOS 上的打包不算太好，低了一个版本，也缺失了 libtas32.so 库导致没法运行 32 位 exe，需要手动用 <code>LIBTAS_SO_PATH</code> 拉；然后 libTAS 运行时会去找 libalsa，NixOS 的 dynamic link 管理又是混沌与邪恶的，因此我还需要大费周章手动用 <code>LD_LIBRARY_PATH</code> 把运行库拉进来。</p><p>这一切做好以后，游戏还是打不开，显示 <em>HD 不是一个有效的 binary</em>… （HD 是游戏路径上的一个词）我怀疑它 parse 参数出了问题，但是我没有证据，它也不输出它用的启动指令。</p><p>后来我自己打了 1.4.6 的 libTAS 包，然后自己打了一串超级长的启动指令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">LD_LIBRARY_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/tmp:/nix/store/1ry2s2jgqbl3w7w54b8biylwqdxy52zw-steam-fhs/usr/lib32/:LD_LIBRARY_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> LIBTAS_SO_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/tmp/libtas.so</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> WINEPREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/home/absx/.local/share/wineprefixes/origin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> libTAS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>嗯，steam-fhs 还是好用的。现在我的游戏已经起来了，但是我发现我不会用 libTAS，无法调速。。反正 README 说的快捷键，TAB 和 V 这些都是用不了的，在 Qt GUI 窗口里设置速度也没有任何效果。</p><p>尝试在 windows WSL2 里用 libTAS，结果还要起 wine，那跟我在 linux 没有任何区别。不测了。</p><h3 id="hourglass" tabindex="-1"><a class="header-anchor" href="#hourglass"><span>hourglass</span></a></h3><p>转战 windows，hourglass 也是一个泛用 TAS 工具，仅支持 win32，不过它已经非常老了。我只是想试试看，没想到 hourglass 真的可以让我的游戏跑起来，并且能够改变游戏音频速度！但是 hourglass 有一些致命的缺陷：</p><ol><li>不支持鼠标</li><li>减速有多档位可调；但是加速只有一个 fastforward 用于快进的，大概有 10 倍速并且不可调。这个速度还不如不听语音（骂人）。</li></ol><p>基于这些原因，hourglass 也无法使用。但它的存在是有意义的：它至少给了我一个成功的例子，告诉我前方并非是一片黑暗，我做的事情并不是毫无希望的。</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>尝试其他 TAS，但几乎找不到其他泛用的 TAS 了。TAS 世界的 tools 大多还是针对某个游戏或某个模拟器，这种任意进程加速的工具真是少之又少。</p><ul><li>BizHawk：泛用 TAS 工具，但仅支持镜像加载，主要针对游戏机，不符合我的需求。 <ul><li>不过也有一些 galgame 是使用 CD 的，我只能说保留尝试的可能性。</li></ul></li><li>UniTAS：专门针对 unity 游戏，有的 galgame 使用 unity 引擎的可能可以尝试。不过真心不多。</li><li><a href="#hourglass-resurrection">Hourglass-Resurrection</a>：一个 hourglass fork，但是也已经停更了。没有提供二进制，我尝试自己构建也失败了（VS 除了点构建运行就啥也不会干了）。后面有更详细的尝试过程。</li></ul><h3 id="libspeedhack" tabindex="-1"><a class="header-anchor" href="#libspeedhack"><span><a href="https://github.com/evg-zhabotinsky/libspeedhack" target="_blank" rel="noopener noreferrer">libspeedhack</a></span></a></h3><p>20240729：虽然很麻烦，但是我还是为了仅存的一点希望去尝试一下 libspeedhack。作者已经消失两年了。我按照说明直接用，不出意外地出了意外： <code>libspeedhack32.so: undefined symbol: floor</code>. 然后去瞄了下 issue，果然有一个一样的问题，并且别人也修了，开了 pr 在构建时加了个 <code>-lm</code> 参数。然后我很开心，拉下来想构建，结果：</p><p>我们的 NixOS 实在是太棒啦！环境根本搞不起来，它的构建指令需要静态链接 + cross 32 位，什么 libclang，glibc_multi 的包直接加进去根本满足不了需求，再加上我根本不知道在 buildInputs 里能写哪些玩意，比如 glibc 就能写 <code>glibc.static</code>， glibc_multi 能写 <code>glibc_multi.dev</code>，这种有个点后面跟着啥玩意的我除了读 nix 源码也想不到要去哪查。</p><p>然后去我的 debian 云服务器上尝试构建，东西都装好了，然后没有数学库：<code>ld: cannot find -lm: No such file or directory</code>。我又把 <code>libm.so</code> 拿出来装到 <code>LD_LIBRARY_PATH</code> 里，继续构建，又会得到：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>/libc.a(malloc.o): relocation R_X86_64_TPOFF32 against &#39;tcache&#39; can not be used when making a shared object; recompile with -fPIC</span></span>
<span class="line"><span>ld: failed to set dynamic section sizes: bad value</span></span>
<span class="line"><span>collect2: 错误：ld 返回 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一度让我想放弃。问了下 gpt-4o，让我不要把 libm.so 在构建时链进去，应该在运行时加载。于是我最后的尝试成功，修改它给的启动脚本：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#!/usr/bin/env bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /tmp/speedhack_{pipe,log}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mkfifo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /tmp/speedhack_pipe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_libdir</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/home/absx/lib</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      # （我把东西存这里）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">LD_LIBRARY_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}/lib:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}/lib64:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}/lib32\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">LD_LIBRARY_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LD_LIBRARY_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">LD_PRELOAD=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;libspeedhack.so:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}/libm.so:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}/libm32.so:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">LD_PRELOAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LD_PRELOAD</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">exec </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样把 <code>libm.so</code> 作为 <code>LD_PRELOAD</code> 运行时加载进 <code>./start.sh wine xxx.exe</code> 即可。</p><p>游戏打开了，但是……我加速呢？我 <code>echo 2.0 &gt; /tmp/speedhack_pipe</code> 都要按冒烟了，所以我的加速呢？？不只声音，就连游戏本身也没有加速，就跟 libspeedhack 不存在一样地和谐。于是此次尝试又宣告失败，骂这个跑路项目也解决不了什么，还是不骂了。</p><blockquote><p>ps. 事实上，通过源码也能知道，Github 上的这些 libspeedhack、<a href="https://github.com/Letomaniy/Speed-Hack" target="_blank" rel="noopener noreferrer">Letomaniy/Speed-Hack</a>、<a href="https://github.com/Hirtol/speedhack-rs" target="_blank" rel="noopener noreferrer">Hirtol/speedhack-rs</a> 等 speedhack 并不涉及音频 api 的修改，因此不可能有音频加速效果。妄图通过简单的一点点源码实现加速只能说是天方夜谭。</p></blockquote><h2 id="speed-gear" tabindex="-1"><a class="header-anchor" href="#speed-gear"><span><a href="https://www.softking.com.tw/dl/17892/Speed%20Gear%207.2.html" target="_blank" rel="noopener noreferrer">Speed Gear</a></span></a></h2><p>一个简单点点点就能加速窗口的软件，比较电脑小白向。最高支持数千倍加速（还是拉条，你们 UI 设计者.jpg），体验还不错，但是也<strong>不支持音频加速</strong>。</p><h2 id="源码构建" tabindex="-1"><a class="header-anchor" href="#源码构建"><span>源码构建</span></a></h2><p>20240803：到了这一步，市面上的各种现有软件看起来已经是山穷水尽了，我开始把目光转向修改代码。</p><p>一个选择是读 wine 的音频 api 然后写点 lib 注入。另一个选择看起来成功率更大一些，那就是直接修改 hourglass 的代码，毕竟人家的功能可行性已经通过了验证。</p><p>hourglass 是 C++ 写成，调的都是 windows api，项目管理用 vs sln。我之前从未用 vs 写过 C/C++ 代码，而且 C++ 构建本来就是一坨，还是去构建已经不再维护的代码，因此预感此次修改也不会顺利。</p><h3 id="hourglass-resurrection" tabindex="-1"><a class="header-anchor" href="#hourglass-resurrection"><span><a href="https://github.com/lxl66566/Hourglass-Resurrection" target="_blank" rel="noopener noreferrer">Hourglass-Resurrection</a></span></a></h3><p>这是一份 7 年前的代码，Hourglass 的重生版。不抱希望搜了下 fork，没啥大修改，因此开始 clone。</p><p>想修改代码第一步就是跑过编译，因此我开始折腾编译。扔到 vs 2022，一编译，一大堆报错。这些报错还都挺抽象的，例如有个叫 <code>IDirectSoundSinkFactory</code> 的玩意找不到声明，但是我把它宏解了能看到声明。Google 也搜不到这玩意。</p><p>我看 Hourglass-Resurrection 有一个 <a href="https://ci.appveyor.com/project/Warepire/hourglass-resurrection/branch/master" target="_blank" rel="noopener noreferrer">7 年前跑的 CI</a> 是可以过构建的，用的是 msbuild。于是我下载 .Net sdk，发现：</p><ol><li>msbuild 本身不会在安装时被加入环境变量，要用绝对路径调用。</li><li>windows sdk 版本不匹配，于是我去下载了 10.0.22621，重新 build。</li><li>报 <code>error MSB6001: “CL.exe”的命令行开关无效。</code> 猜测应该是本机的 clang 太新导致的。</li></ol><p>我也想过装老版本 vs，下载后发现不同版本 vs 不能共存。于是打消念头。</p><p>不想再折腾本机，跑去写 Github CI。结果找的 install windows sdk CI 没一个能用的，我指定的 22621 version 要么找不到，要么就是脚本内部错误。然后我也不指定版本了，改用 <code>choco install visualstudio2022buildtools windows-sdk-10.0</code>，结果花了好几分钟安装后告诉我还是找不到 msbuild。。太经典了。</p><p>又继续啃了一会，给一堆 struct 和 macro 移形换位，编译不报错了，取而代之是链接爆了一大堆 error：<code>LNK2001 无法解析的外部符号</code>。。这下我是真没辙了。</p><h3 id="hourglass-win32" tabindex="-1"><a class="header-anchor" href="#hourglass-win32"><span><a href="https://github.com/TASEmulators/hourglass-win32" target="_blank" rel="noopener noreferrer">hourglass-win32</a></span></a></h3><p>这个是原版 hourglass 代码，年代更加久远了，距今有足足 14 年的历史。</p><p>用 vs 2022 打开，跑一次构建，没想到居然能够把 GUI 跑起来，已经很厉害了。不过逻辑是没有的，构建时出了挺多错误。</p><p>这些 error 看起来比 Hourglass-Resurrection 好读多了，我猜测是 C++ 编译器标准太高导致的编译低版本不兼容的问题。尝试降低 C++ 编译器版本，vs 告诉我：我们接受指定的最低版本是 C++14 😅。</p><h2 id="自己写" tabindex="-1"><a class="header-anchor" href="#自己写"><span>自己写</span></a></h2><p>干到现在我已经不想再折腾构建了，不如干脆读代码，然后开抄，写一个自己的注入 lib。我的想法很简单，只加速音频播放，不加速游戏本身（如果想要两个都加速，那就再开一个 CE）。</p><p>从读代码角度来说，Hourglass-Resurrection 还是比原版要好很多的，<s>虽然 C++ 项目一直都很难读</s>。最重要的显然是 <code>source\\hooks\\hooks\\soundhooks.cpp</code>，它是整个音频加速的核心；并且可以看到文件在最后定义了注入/拦截（Intercept），将以下函数全部干掉了：</p><h4 id="winsound" tabindex="-1"><a class="header-anchor" href="#winsound"><span>WinSound</span></a></h4><ul><li>PlaySound 系列：PlaySoundA, PlaySoundW <ul><li>这是 windows 早期的简单音频播放 api，只需要提供文件名即可。W 和 A 指文件名的编码。由于我们不能直接获取到音频 buffer，因此只能将音频加速后保存到 temp 再调用函数。</li><li>但是 Hourglass-Resurrection 把这两个 api suppress 了，那我就干脆不管了，遇到问题再说。</li></ul></li><li>waveOut 系列，包含 waveOutWrite, waveOutGetPosition, waveOutReset, waveOutOpen。这几个貌似就没法操作 buffer 了，毕竟这个 api 就是操作 tick 用的，可能只能用 tick 魔法了。不过理论上应该也不难。 <ul><li>保留用 waveOutSetPlaybackRate 强改的可能。</li></ul></li><li>Beep 系列，MessageBeep 和 Beep。这也是 suppress 的，目的应该是 TAS 那边的，不用管。</li></ul><h4 id="directsound" tabindex="-1"><a class="header-anchor" href="#directsound"><span>DirectSound</span></a></h4><ul><li>DirectSoundCreate(8), DirectSoundEnumerate(A/W), DirectSoundCaptureEnumerate(A/W)，这几个是重点，毕竟游戏都调用的 DirectSound，因为可以叠加音频播放。 <ul><li>这些函数可就麻烦了，<strong>Hourglass-Resurrection 自己写了一个 DirectSound 的音频驱动程序</strong>，包括前面的 EmulatedDirectSoundBuffer 也是。我这才知道文件开头的一堆 magic number 是干什么用的。显然我没有自己写驱动水平。 <ul><li>所以如果不写驱动，那么需要 hook 的函数就不能是这些，这些函数是用于创建驱动用的。需要 hook 的应该是 <code>IDirectSoundBuffer::Lock/Unlock/SetFrequency</code> 等。</li></ul></li><li>往细想下去就更不得了了：学它直接操作 tick 可能并不能实现不变调加速。或许我听到的 Hourglass 的音频加速只是破碎的 buffer 拼成的音频；10 倍速下确实听不出音频究竟还是否完整。</li></ul></li></ul><p>而起初我并没有发现这些问题，我先写了点操作 buffer 的代码……</p><h3 id="rust" tabindex="-1"><a class="header-anchor" href="#rust"><span>rust</span></a></h3><p>我不想碰 C++（即使已有代码作参考），先用 rust 碰碰壁再说。</p><p>试了一下 <a href="https://github.com/darfink/detour-rs" target="_blank" rel="noopener noreferrer">detour-rs</a>，一个 detour 的 rs 实现，但是拉下来发现编译不过。issue 看到了一个 fork 解决了这个问题，才发觉 detour-rs 已经断更三年了。所以使用此 fork 版本的 <a href="https://github.com/Hpmason/retour-rs" target="_blank" rel="noopener noreferrer">retour-rs</a>。fork 版的文档也更详细，我用它的 example 配合文档推荐的 <a href="https://crates.io/crates/dll-syringe" target="_blank" rel="noopener noreferrer">dll-syringe</a> 跑了一下，成功注入了 MessageBoxW，完成了新手教程。</p><p>但接下来才是痛苦开始。<a href="https://rust.audio/" target="_blank" rel="noopener noreferrer">rust 音频处理生态</a>本来就挺烂的。我先尝试的肯定是<a href="https://crates.io/crates/rubato" target="_blank" rel="noopener noreferrer">rubato</a>，毕竟简介就是速率变换。结果这玩意并不咋样，几乎无文档，examples 里面几百行也没有解释。我把 wav 用 python 转成 f64 raw，跑一遍 example 再转回去，并不是一个可用的音频。</p><h3 id="dll-调库" tabindex="-1"><a class="header-anchor" href="#dll-调库"><span>dll 调库</span></a></h3><p>退一万步，如果用现有的 dll 库呢？我尝试了一下行业用得比较多的 <a href="https://codeberg.org/soundtouch/soundtouch.git" target="_blank" rel="noopener noreferrer">soundtouch</a>，<a href="https://gist.github.com/lxl66566/f7dc49be8a08f2746b4179ccd3b2b378" target="_blank" rel="noopener noreferrer">写了个 python 小脚本</a>做测试。soundtouch 的 api 设计就要好得多，用户只需要 put 和 receive 就行了。但是我用 <code>receiveSamples</code> (处理 float 数组) 系列测试就返回值为 0（应该要返回数组长度），数组没有被改动；用 <code>putSamples_i16</code> 系函数（i16 系是 float 系的包装，包了一层转换）甚至有 bug，直接 internal <code>OSError: exception: integer divide by zero</code>。非常郁闷。</p><h3 id="直面原理" tabindex="-1"><a class="header-anchor" href="#直面原理"><span>直面原理</span></a></h3><p>音频处理其实并不算太复杂，说到底也是信号与系统那一套。最基础的就是把 trunk 加速打出去那一套，属于 <em>变速变调</em>。更高级一点的主要是 <em>变调不变速</em> 和 <em>变速不变调</em> 两种，有了这两种就可以组合出各种想要的效果了。实际使用中也可以只用一种，通过升降采样先 <em>变速变调</em>，对齐一个量，再通过一种算法改变另一个量即可。在这里我们当然关注 <em>变速不变调</em>。</p><p>行业泛用的是 wsola (Waveform Similarity and Overlap Add)，例如 soundtouch 就用的这个。除此之外还有 PLOSA (Time-Domain Pitch-Synchronous Overlap and Add)，及其变体 TD-PSOLA 等。这一类的最大特点是需要找峰值，并保留峰值。</p><p>现成的 crates 里，<em>wsola</em> 是个脑残占名字的没有内容，而 <a href="https://codeberg.org/PieterPenninckx/tdpsola" target="_blank" rel="noopener noreferrer"><em>tdpsola</em> 有一个可用实现</a>。把仓库拉下来，example 里带了 wav 支持，不需要手动转 raw。然后试了一下，确实能够实现加速！让我非常开心。虽然只支持单声道 wav，我还需要手动转一次，但是没有什么难度。并且作者在 README 里给出了一个 documentation，里面的视频把 TD-PSOLA 原理讲得非常透彻。</p><h3 id="打击" tabindex="-1"><a class="header-anchor" href="#打击"><span>打击</span></a></h3><p>此时我终于读懂了 Hourglass-Resurrection 的代码是自己写 DirectSound 的驱动，并且也发现操作 tick 并不能实现真正的音频加速，最终的道路一定是 buffer。于是我陷入了消沉：做一个音频加速的复杂度已经远超出了我的想象，即使知晓了音频加速原理，也很难面对一大坨 windows sound api。我目前摸索的这些知识在脑子里并不能合到一起。</p><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><p>目前这个项目暂时停滞了，我希望有一天能够重启这个项目。这里存一些可能用得上的资料。</p><ul><li><a href="https://shanewfx.github.io/blog/2013/08/14/caprure-audio-on-windows/" target="_blank" rel="noopener noreferrer">Windows 上的音频采集技术 - 思考的轨迹</a></li></ul>`,80);function u(y,B){const a=e("RouteLink");return l(),t("div",null,[d,i("p",null,[s("我打 "),h(a,{to:"/hobbies/galgame.html"},{default:p(()=>[s("galgame")]),_:1}),s(" 已经有好几年了，共计接触了两部能够语音加速的游戏："),o,s(" 和 "),c,s("。游玩这两部作品让我非常兴奋：使用二倍速播放音频，我就能节省一半的游戏时间，相当于 galgame 游玩量变为了 2 倍。经历过加速后，再次玩其他语音速度极低的 galgame （真红真红真？）让我感觉像是在浪费生命。因此我尝试寻找能够让我节省时间的游戏加速方式。")]),g])}const b=n(r,[["render",u],["__file","speedup.html.vue"]]),m=JSON.parse('{"path":"/articles/speedup.html","title":"SPEED UP！","lang":"zh-CN","frontmatter":{"date":"2024-07-27T00:00:00.000Z","icon":"gamepad","category":["教程"],"tag":["Windows"],"description":"SPEED UP！ 我打 已经有好几年了，共计接触了两部能够语音加速的游戏：天津罪 和 GINKA。游玩这两部作品让我非常兴奋：使用二倍速播放音频，我就能节省一半的游戏时间，相当于 galgame 游玩量变为了 2 倍。经历过加速后，再次玩其他语音速度极低的 galgame （真红真红真？）让我感觉像是在浪费生命。因此我尝试寻找能够让我节省时间的游戏加...","head":[["meta",{"property":"og:url","content":"https://absx.pages.dev/articles/speedup.html"}],["meta",{"property":"og:site_name","content":"绝对值_x的博客"}],["meta",{"property":"og:title","content":"SPEED UP！"}],["meta",{"property":"og:description","content":"SPEED UP！ 我打 已经有好几年了，共计接触了两部能够语音加速的游戏：天津罪 和 GINKA。游玩这两部作品让我非常兴奋：使用二倍速播放音频，我就能节省一半的游戏时间，相当于 galgame 游玩量变为了 2 倍。经历过加速后，再次玩其他语音速度极低的 galgame （真红真红真？）让我感觉像是在浪费生命。因此我尝试寻找能够让我节省时间的游戏加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T15:54:35.000Z"}],["meta",{"property":"article:tag","content":"Windows"}],["meta",{"property":"article:published_time","content":"2024-07-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-22T15:54:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SPEED UP！\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-22T15:54:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"CE","slug":"ce","link":"#ce","children":[]},{"level":2,"title":"解包与封包","slug":"解包与封包","link":"#解包与封包","children":[]},{"level":2,"title":"pyaudio","slug":"pyaudio","link":"#pyaudio","children":[]},{"level":2,"title":"TAS","slug":"tas","link":"#tas","children":[{"level":3,"title":"libTAS","slug":"libtas","link":"#libtas","children":[]},{"level":3,"title":"hourglass","slug":"hourglass","link":"#hourglass","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":3,"title":"libspeedhack","slug":"libspeedhack","link":"#libspeedhack","children":[]}]},{"level":2,"title":"Speed Gear","slug":"speed-gear","link":"#speed-gear","children":[]},{"level":2,"title":"源码构建","slug":"源码构建","link":"#源码构建","children":[{"level":3,"title":"Hourglass-Resurrection","slug":"hourglass-resurrection","link":"#hourglass-resurrection","children":[]},{"level":3,"title":"hourglass-win32","slug":"hourglass-win32","link":"#hourglass-win32","children":[]}]},{"level":2,"title":"自己写","slug":"自己写","link":"#自己写","children":[{"level":3,"title":"rust","slug":"rust","link":"#rust","children":[]},{"level":3,"title":"dll 调库","slug":"dll-调库","link":"#dll-调库","children":[]},{"level":3,"title":"直面原理","slug":"直面原理","link":"#直面原理","children":[]},{"level":3,"title":"打击","slug":"打击","link":"#打击","children":[]}]},{"level":2,"title":"external","slug":"external","link":"#external","children":[]}],"git":{"createdTime":1722095980000,"updatedTime":1734882875000,"contributors":[{"name":"lxl66566","email":"lxl66566@gmail.com","commits":8}]},"readingTime":{"minutes":15.66,"words":4699},"filePathRelative":"articles/speedup.md","localizedDate":"2024年7月27日","excerpt":"\\n","autoDesc":true}');export{b as comp,m as data};
