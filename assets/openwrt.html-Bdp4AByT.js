import{_ as s,e,f as a,o as t}from"./app-D0fx06fZ.js";const n={};function p(l,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="openwrt" tabindex="-1"><a class="header-anchor" href="#openwrt"><span>OpenWRT</span></a></h1><p>我之前买了一个 n1 盒子用来玩，上面已经刷了 iStoreOS，这是一个 OpenWRT 的分支。这里记录了一些我的折腾过程。</p><p>一句话：iStoreOS 非常垃圾，服务越开越多，用得越来越难受。20250114 跑了，刷成了 Arch Linux ARM。</p><h2 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理"><span>包管理</span></a></h2><p>OpenWRT 用的包管理器是 <code>opkg</code>。虽然 OpenWRT 已经声称要转到 apt，但是还没转，并且 iStoreOS 应该还没有那么快跟上。因此我不得不用这个不合格的包管理器。</p><ul><li>查找：help 里写 <code>opkg find &lt;regexp&gt;</code>，但是我使用 <code>opkg find &#39;python.*&#39;</code> 并不能找到任何结果。我感觉这个 regexp 是假的。</li><li>软件包本身也是残缺的，例如 vim 的 <code>si</code> 功能被砍了。</li></ul><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>docker</span></a></h2><p>iStoreOS 上啥都没有，但是有 docker。</p><p>然而这个 docker 的配置是 OpenWRT 乱写的，需要去看 <code>/etc/init.d/dockerd</code> 才知道怎么配，配置文件在哪。网上的 docker 配置教程都废了。（<a href="https://t.me/withabsolutex/2119" target="_blank" rel="noopener noreferrer">开喷</a>）</p><h2 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h2><p>OpenWRT 的 Linux 内核是 5.10，iStoreOS 也<a href="https://github.com/istoreos/istoreos/issues/1386" target="_blank" rel="noopener noreferrer">遵循上游内核版本</a>。然而 dae 的最低内核要求是 5.17，因此我无法在 iStoreOS 上使用 dae 作为代理。</p><h2 id="服务" tabindex="-1"><a class="header-anchor" href="#服务"><span>服务</span></a></h2><p>OpenWRT 不支持 systemd，果然还是太重了吧。所以必须使用传统的 <a href="https://openwrt.org/docs/guide-developer/procd-init-scripts" target="_blank" rel="noopener noreferrer">procd init script</a>。</p><ol><li>在 <code>/etc/init.d/&lt;service name&gt;</code> 写入：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/sh /etc/rc.common</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">USE_PROCD</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">START</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">90</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start_service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    procd_open_instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Instance</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 随便</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">取&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    procd_set_param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">your</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> startup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> comman</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    procd_set_param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> limits</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nofile=&quot;unlimited&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    procd_set_param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> respawn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 300</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    procd_set_param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stdout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    procd_set_param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stderr</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    procd_close_instance</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>（startup command 可以不是绝对可执行路径）</li><li>添加权限：<code>chmod +x /etc/init.d/&lt;service name&gt;</code></li><li>运行 <code>service &lt;service name&gt; enable</code>。</li><li>开机自启：<code>cd /etc/rc.d &amp;&amp; ln -s ../init.d/&lt;service&gt; ./S99&lt;service&gt;</code></li></ol>`,14)]))}const h=s(n,[["render",p],["__file","openwrt.html.vue"]]),d=JSON.parse('{"path":"/articles/linux/openwrt.html","title":"OpenWRT","lang":"zh-CN","frontmatter":{"date":"2024-12-04T00:00:00.000Z","icon":"wifi","category":["教程"],"tag":["Linux","桌面端"],"description":"OpenWRT 我之前买了一个 n1 盒子用来玩，上面已经刷了 iStoreOS，这是一个 OpenWRT 的分支。这里记录了一些我的折腾过程。 一句话：iStoreOS 非常垃圾，服务越开越多，用得越来越难受。20250114 跑了，刷成了 Arch Linux ARM。 包管理 OpenWRT 用的包管理器是 opkg。虽然 OpenWRT 已经声...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OpenWRT\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-14T09:19:22.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/articles/linux/openwrt.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"OpenWRT"}],["meta",{"property":"og:description","content":"OpenWRT 我之前买了一个 n1 盒子用来玩，上面已经刷了 iStoreOS，这是一个 OpenWRT 的分支。这里记录了一些我的折腾过程。 一句话：iStoreOS 非常垃圾，服务越开越多，用得越来越难受。20250114 跑了，刷成了 Arch Linux ARM。 包管理 OpenWRT 用的包管理器是 opkg。虽然 OpenWRT 已经声..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-14T09:19:22.000Z"}],["meta",{"property":"article:tag","content":"桌面端"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2024-12-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-14T09:19:22.000Z"}]]},"git":{"createdTime":1733316889000,"updatedTime":1736846362000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"lxl66566@gmail.com","commits":5,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"articles/linux/openwrt.md","localizedDate":"2024年12月4日","excerpt":"\\n","autoDesc":true}');export{h as comp,d as data};
