import{_ as s,e as a,f as l,o as e}from"./app-Cw9w3ihR.js";const n={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h1>lua</h1><p>其实我一直不喜欢 lua，感觉很多设计都是一坨屎。但是现在是工作，不得不学了。</p><h2>安装</h2><ul><li>解释器：lua 或 luajit</li><li>Vscode 插件： <ul><li>lsp: <em>Lua - sumneko</em></li><li>Formatter: <em>Stylua</em></li></ul></li><li>包管理器：luarocks，用法和 scoop 相似</li></ul><p>其他设置：</p><ul><li><em>Stylua</em> 默认使用 tab 作为缩进。要把它改成空格，<a href="https://github.com/JohnnyMorganz/StyLua#configuring-runtime-syntax-selection" target="_blank" rel="noopener noreferrer">需要</a>在项目下创建 <code>.stylua.toml</code>，并写入 <code>indent_type = &quot;Spaces&quot;</code>。</li></ul><h2>基础</h2><ul><li>array table 下标从 1 开始！！！</li><li>不等：<code>~=</code></li><li>数据定义：不加 local 默认是全局变量。</li><li>数据优先级：后面覆盖前面，局部覆盖全局</li><li>条件 if-then-elseif-else-end</li><li>循环：<code>for i = 1,5 do ... end</code>，<code>for i, v in xxx do ... end</code>，<code>repeat ... until xxx</code>，<code>while do ... end</code></li><li>goto：通过 <code>::somelabel::</code> 打标签，然后 <code>goto somelabel</code>。</li><li>作用域：local 是局部变量关键字。创建的变量的生命周期和作用域仅限于它所在的那个代码块。 <ul><li>在交互式 lua 环境中，每一行语句（&gt; 开头）都是一个代码块。也就是说在这些交互式环境中使用 local 定义的变量在后续是访问不了的，因为其生命周期已经结束。</li></ul></li><li>模块化：在某个 lua 文件里最后使用 <code>return xxx</code> 即可暴露变量（可以暴露 local）。然后在其他文件里 <code>local mod = require(&quot;filename&quot;)</code> 即可，不要包含 <code>.lua</code> 后缀。 <ul><li>一般常用的模块写法习惯如下（主要取决于团队）：<div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3>数据类型</h3><p>string, function, boolean, number, nil, table</p><ul><li>string： <ul><li><code>[[ xxx ]]</code> 为 raw string，更高级的还有 <code>[=[ [[ xxx ]] ]=]</code></li><li>split:<div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">nil</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;%s&quot; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 默认以空白字符分割</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  -- 模式 &#39;[^&#39;..sep..&#39;]+&#39; 匹配一个或多个非分隔符的字符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> part</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> string.gmatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;([^&quot; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.. </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .. </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;]+)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    table.insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">part</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>当然，如果需要更进一步控制 split 的次数，那就需要手动 find 了。</li><li>slice: <code>string.sub</code></li></ul></li><li>table 就是 key-value pairs，里面的值可以没有 key，没 key 的默认从 number 1 开始，类似 Object + Array 结合体。后续将 kv 的 table 称为 map table，数组称为 array table。 <ul><li><code>ipairs(x)</code> 和 <code>pairs(x)</code> 用于取 table 的迭代器。<code>ipairs</code> 专用于迭代数组 table，会忽略所有非 number 的 key。而 <code>pairs</code> 是迭代所有 kv，顺序不定，而且比较慢。</li><li><code>table.unpack(some_table, start, end)</code> 用于解包一个 array table，可以给函数参数或变量赋值。start, end 是 optional，如果不指定就到碰到的第一个 nil 为止。而 <code>table.pack</code> 是反向，还会多加一个 <code>n=length</code> 的 kv。</li><li><code>table.insert(x, [pos ,] value)</code> 用于插入，<code>table.remove(x [, pos])</code> 用于删除， <code>table.concat(x, &quot; &quot;)</code> 用于字符串连接。 <ul><li>lua 的 string 是 immutable 的，通过这样可以动态构造 string。</li></ul></li><li>slice：lua 没有 table 取 slice 的方法，需要自己循环 insert。</li><li>通过 <code>#</code> 获取 table/string 长度。对于含有 nil 的 table，获取的长度是<a href="https://www.runoob.com/w3cnote/lua-table-length.html" target="_blank" rel="noopener noreferrer">未定义的</a>！ <ul><li>所以不要在 lua 的 array table 中使用 nil 值！因为 map table 需要用 <code>tab.key = nil</code> 来删除一个 kv 对，所以经常在 array table 也这样做了，这是不行的！</li></ul></li><li>判断是否为空：<code>t == nil or next(t) == nil</code>。注意一般来说都要先检查 nil。</li></ul></li><li>function： <ul><li>默认除了 table 以外都是值传递</li><li>传入参数过多忽略，过少用 nil 填</li><li>可以用 ... 传不定长参数，用 <code>local x = {...}</code> 拿到一个 array table。</li><li>函数必须放在调用的代码之前</li></ul></li><li>显式类型转换只有 <code>tostring(x)</code> 和 <code>tonumber(x)</code>。如果要转为 bool 需要用 <code>not not x</code>。 <ul><li>除了 nil（和 false 本身）转为 bool 会被转为 false，其他值都会转为 true。</li><li>table 调用 <code>tostring(x)</code> 的结果是它的地址</li></ul></li><li>隐式转换： <ol><li>算数运算中，字符串，bool 和 nil 会转为数字</li><li>字符串连接符 <code>..</code>，数字和 nil 会转为字符串</li></ol></li></ul><h3>文件操作</h3><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">io.open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> line</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">   print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>高级</h2><ul><li><code>setmetatable(var1, {__add = myfunc})</code> 可以重写内置的方法 <ul><li>在所有方法里，<code>__index</code> 又是最常用的一个，这就相当于用 <code>var1.xxx</code> 时就会拿到 key 为 xxx 的 value。</li></ul></li><li>面向对象：高级的 table<div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">deposit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">withdraw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> or </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> setmetatable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">balance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于实例，使用 <code>.</code> 则只是获取 static 的函数本身，而可以用 <code>:</code> 代表调用其成员函数，这是一个语法糖。 <ul><li>但是内置类型的函数，例如 <code>table.remove</code> 不能直接用 <code>t:remove</code> 这样调用！究其原因，table 不是类，而是一个内置库。如果需要用 <code>:</code>，要设置元表：<code>setmetatable(t, { __index = table })</code>。</li></ul></li></ul></li></ul><h2>typing</h2><p>lua 的一大缺点是没有 type system。类似 js 的 typed 加强版 ts，lua 也有 typed 加强版，不过比较杂，从早期已经久不维护的 <a href="https://github.com/andremm/typedlua" target="_blank" rel="noopener noreferrer">typedlua</a> 和一些 fork 到新的 <a href="https://github.com/teal-language/tl" target="_blank" rel="noopener noreferrer">teal</a> 都有。这些 typed 版本都受 ts 启发，语法比较相似。</p><h2>external</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/494191824" target="_blank" rel="noopener noreferrer">理解 Lua 的闭包机制</a></li></ol>`,19)]))}const p=s(n,[["render",t],["__file","lua.html.vue"]]),d=JSON.parse('{"path":"/coding/lua.html","title":"lua","lang":"zh-CN","frontmatter":{"date":"2025-07-07T00:00:00.000Z","icon":"code","category":["编程"],"tag":["编程语言"],"description":"lua 其实我一直不喜欢 lua，感觉很多设计都是一坨屎。但是现在是工作，不得不学了。 安装 解释器：lua 或 luajit Vscode 插件： lsp: Lua - sumneko Formatter: Stylua 包管理器：luarocks，用法和 scoop 相似 其他设置： Stylua 默认使用 tab 作为缩进。要把它改成空格，需要在...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lua\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T15:01:07.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/lua.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"lua"}],["meta",{"property":"og:description","content":"lua 其实我一直不喜欢 lua，感觉很多设计都是一坨屎。但是现在是工作，不得不学了。 安装 解释器：lua 或 luajit Vscode 插件： lsp: Lua - sumneko Formatter: Stylua 包管理器：luarocks，用法和 scoop 相似 其他设置： Stylua 默认使用 tab 作为缩进。要把它改成空格，需要在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T15:01:07.000Z"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:published_time","content":"2025-07-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T15:01:07.000Z"}]]},"git":{"createdTime":1751900467000,"updatedTime":1751900467000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"lxl66566@gmail.com","commits":1,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":4.14,"words":1242},"filePathRelative":"coding/lua.md","localizedDate":"2025年7月7日","excerpt":"\\n","autoDesc":true}');export{p as comp,d as data};
