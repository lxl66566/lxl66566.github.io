import{_ as e,o as t,c as a,e as s}from"./app-C6VGFmbM.js";const i={},l=s('<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react"><span>React</span></a></h1><p>初学，包含的东西较少。等到我真正用 React 开发一个项目的时候，这一页的东西才会变多起来。</p><h2 id="jsx-基础" tabindex="-1"><a class="header-anchor" href="#jsx-基础"><span>JSX 基础</span></a></h2><p>JSX 是 React 的核心，JSX 将一个 html 标签也视为一个 js object。</p><ul><li>多行 JSX 需要用括号包围；每个 JSX 只能是单标签，如果多标签则需要用 <code>&lt;&gt;&lt;/&gt;</code> 空标签包围。</li><li>JSX 内插值（插表达式）使用单大括号。</li><li>JSX 里的 class 要改为 className。</li><li>JSX 里可以写内联 style，接受一个类似 CSS 的对象。</li><li>JSX 里可以直接用 <code>&lt;div {...object} /&gt;</code> 进行 props 传入的解构，非常方便。</li></ul><p>JSX 能够非常灵活地组织组件，比 Vue 灵活太多了。</p><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><p>一般来说只需要使用基于函数的 API。现在所有现代前端都在使用基于函数的 API，例如 Kotlin Compose UI，因为组合优于继承，灵活性非常强。</p><ul><li>React 每一个返回 JSX 对象的函数都是一个组件。</li><li>函数的第一个入参是 props。</li><li>如果要传递 JSX 给组件，默认传到 <code>props.children</code>。</li><li>组件间传值： <ul><li>父向子，props，没问题。</li><li>子向父，回调函数。</li></ul></li></ul><h2 id="react-hooks" tabindex="-1"><a class="header-anchor" href="#react-hooks"><span><a href="https://zh-hans.react.dev/reference/react/hooks" target="_blank" rel="noopener noreferrer">React Hooks</a></span></a></h2><p>Hooks 是响应式的基础。React 内置了许多 Hooks，但是平常最常用的也就 useState，useRef，useEffect。</p><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate"><span>useState</span></a></h3><p>React 里最常用的响应式就是 useState 了。其返回两个值，<code>content</code> 是内容的引用 (getter)，<code>setContent</code> 是一个函数，用于改变内容 (setter)。这样可以比较明确地控制如何渲染 DOM 树。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;default content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref"><span>useRef</span></a></h3><p>跟 Vue 的 ref 有很大区别，useRef 这里的 ref 是不会触发渲染的。</p><p>有一点跟 Vue 一样的就是 Vue 的 ref 需要 <code>.value</code> 获取内部值，而 useRef 需要 <code>.current</code> 获取。</p><h3 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback"><span>useCallback</span></a></h3><p>包装函数，让组件重新渲染时，该函数不会重新创建，也就是保持同一个对象。可以用于 <code>memo</code>。</p><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ul><li><a href="https://juejin.cn/post/7195513281228898363" target="_blank" rel="noopener noreferrer">2023 再看 React 状态管理库</a></li></ul>',21),n=[l];function r(c,o){return t(),a("div",null,n)}const p=e(i,[["render",r],["__file","react.html.vue"]]),d=JSON.parse('{"path":"/coding/react.html","title":"React","lang":"zh-CN","frontmatter":{"date":"2025-01-04T00:00:00.000Z","icon":"brands fa-react","category":["编程"],"tag":["框架","前端"],"description":"React 初学，包含的东西较少。等到我真正用 React 开发一个项目的时候，这一页的东西才会变多起来。 JSX 基础 JSX 是 React 的核心，JSX 将一个 html 标签也视为一个 js object。 多行 JSX 需要用括号包围；每个 JSX 只能是单标签，如果多标签则需要用 <></> 空标签包围。 JSX 内插值（插表达式）使用单...","head":[["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/react.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"React"}],["meta",{"property":"og:description","content":"React 初学，包含的东西较少。等到我真正用 React 开发一个项目的时候，这一页的东西才会变多起来。 JSX 基础 JSX 是 React 的核心，JSX 将一个 html 标签也视为一个 js object。 多行 JSX 需要用括号包围；每个 JSX 只能是单标签，如果多标签则需要用 <></> 空标签包围。 JSX 内插值（插表达式）使用单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-09T16:15:46.000Z"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-09T16:15:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-09T16:15:46.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"JSX 基础","slug":"jsx-基础","link":"#jsx-基础","children":[]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[]},{"level":2,"title":"React Hooks","slug":"react-hooks","link":"#react-hooks","children":[{"level":3,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":3,"title":"useRef","slug":"useref","link":"#useref","children":[]},{"level":3,"title":"useCallback","slug":"usecallback","link":"#usecallback","children":[]}]},{"level":2,"title":"external","slug":"external","link":"#external","children":[]}],"git":{"createdTime":1736014766000,"updatedTime":1736439346000,"contributors":[{"name":"lxl66566","email":"lxl66566@gmail.com","commits":2}]},"readingTime":{"minutes":1.68,"words":505},"filePathRelative":"coding/react.md","localizedDate":"2025年1月4日","excerpt":"\\n","autoDesc":true}');export{p as comp,d as data};
