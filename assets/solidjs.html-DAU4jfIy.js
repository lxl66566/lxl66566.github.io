import{_ as i,e as a,f as e,o as t}from"./app-CxPbs1q-.js";const n={};function l(r,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="solidjs" tabindex="-1"><a class="header-anchor" href="#solidjs"><span><a href="https://www.solidjs.com/" target="_blank" rel="noopener noreferrer">SolidJS</a></span></a></h1><p>SolidJS 是一个轻量级前端框架，其以 JSX 为核心，为 React 做了许多减法，少了很多难记的 Hooks，所以学起来非常快（不论有无 React 基础）。不过本文假设读者已经熟悉了 React 基础。</p><p>SolidJS 的哲学就是 small and simple。所以 React 高手用起来肯定没有那么方便舒服，很多地方需要自己手操低级逻辑。但是对新手来说是一件好事，SolidJS 的隐含条件少，不容易被框架坑。要说它的唯一缺点可能就是生态了，SolidJS 的包数量和可用性都要比 React 差上许多 (<a href="https://t.me/withabsolutex/2343" target="_blank" rel="noopener noreferrer">ref</a>)。</p><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props"><span>props</span></a></h2><p>在 React 中，有一个核心理念：<code>UI = f(state)</code>。这意味着整个组件的输出（UI）被看作是其当前 state 和 props 的一个函数。当 state 或 props 改变时，React 的做法不是去找到是哪个具体的值变了，而是重新执行整个组件函数，生成一个新的 Virtual DOM，然后通过比对新旧 VDOM，最后只把差异部分更新到真实的 DOM 上。</p><p>然而，<strong>SolidJS 的组件函数本身永远只运行一次</strong>。要让子组件随父组件的 signal 改变而重新渲染，需要传入 <code>Accessor&lt;T&gt;</code> 保持响应性。但是在任何一层子组件使用 <code>const { ... } = props</code> 解构，都会丢失 props 的响应性，导致子组件无法正确重新渲染。</p><p>要在保证响应性的同时结构 props，需要使用 SolidJS 提供的 <code>splitProps</code>。举个例子：</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ButtonProps</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> JSX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ButtonHTMLAttributes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HTMLButtonElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  children</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> JSX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  variant</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;primary&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;secondary&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;square&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;operator&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Button</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ButtonProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &#39;local&#39; 对象会包含这些 props，并且它们仍然是响应式的</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &#39;rest&#39; 对象会包含所有剩余的 props</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">rest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> splitProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;children&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;variant&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在调试 SolidJS 项目时发现子组件没有正确渲染，请优先检查 props 解构。</p><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks"><span>Hooks</span></a></h2><h3 id="createsignal" tabindex="-1"><a class="header-anchor" href="#createsignal"><span>createSignal</span></a></h3><p>就是 useState，最基本的响应式组成部分。</p><p>每一次调用 <code>setState</code> 都会触发重新渲染。如果需要像 React 那样在值变化时才渲染，需要配合 <code>createMemo</code>。</p><h3 id="createcontext" tabindex="-1"><a class="header-anchor" href="#createcontext"><span>createContext</span></a></h3><p>可以用来跨组件传输数据，不需要通过 props。</p><h3 id="createresource" tabindex="-1"><a class="header-anchor" href="#createresource"><span>createResource</span></a></h3><p>可以用来执行 async 函数。SolidJS 对 async 支持算不上好，这可能是唯一的 async 执行器。</p><p>createResource 可以跟 Suspence 组件<a href="https://docs.solidjs.com/reference/components/suspense" target="_blank" rel="noopener noreferrer">配合使用</a>。其实就是包装了一下 <code>res.loading</code> 的判断而已。</p><h3 id="onmount" tabindex="-1"><a class="header-anchor" href="#onmount"><span>onMount</span></a></h3><p>因为每个组件函数只会执行一次，你可以直接将相关逻辑放在组件里；当然 SolidJS 也提供了 onMount hook 用于分离逻辑。</p><h2 id="杂" tabindex="-1"><a class="header-anchor" href="#杂"><span>杂</span></a></h2><ul><li>SolidJS 的组件导出必须使用大写字母开头，否则 tsx 不会将其识别为组件。</li></ul><h2 id="components" tabindex="-1"><a class="header-anchor" href="#components"><span>components</span></a></h2><p>SolidJS 也提供了一些内置组件，让写 Vue 的人倍感熟悉。</p><ul><li><code>&lt;Show when={...} fallback={...}&gt;&lt;/Show&gt;</code>，v-if + v-else</li><li><code>&lt;For each={...}&gt;&lt;/For&gt;</code>，v-for</li></ul><h2 id="配套设施" tabindex="-1"><a class="header-anchor" href="#配套设施"><span>配套设施</span></a></h2><p>SolidJS 虽然相对小众，但仍有着完善的生态系统。</p><ul><li>组件库：<a href="https://github.com/stefan-karger/solid-ui" target="_blank" rel="noopener noreferrer">SolidUI</a></li><li>Router：<a href="https://github.com/solidjs/solid-router" target="_blank" rel="noopener noreferrer">solid-router</a></li><li>图标库：<a href="https://solid-icons.vercel.app/" target="_blank" rel="noopener noreferrer">Solid Icons</a></li><li>Markdown 渲染：<a href="https://github.com/andi23rosca/solid-markdown" target="_blank" rel="noopener noreferrer">solid-markdown</a></li></ul><p>但是很可惜，solid 用的人较少，导致很多库的 bug 都<a href="https://t.me/withabsolutex/2343" target="_blank" rel="noopener noreferrer">没人修</a>。</p>`,29)]))}const h=i(n,[["render",l],["__file","solidjs.html.vue"]]),o=JSON.parse('{"path":"/coding/solidjs.html","title":"SolidJS","lang":"zh-CN","frontmatter":{"date":"2025-01-04T00:00:00.000Z","icon":"arrow-up-right-dots","category":["编程"],"tag":["框架","前端"],"description":"SolidJS SolidJS 是一个轻量级前端框架，其以 JSX 为核心，为 React 做了许多减法，少了很多难记的 Hooks，所以学起来非常快（不论有无 React 基础）。不过本文假设读者已经熟悉了 React 基础。 SolidJS 的哲学就是 small and simple。所以 React 高手用起来肯定没有那么方便舒服，很多地方需要...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SolidJS\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-28T17:37:12.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/solidjs.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"SolidJS"}],["meta",{"property":"og:description","content":"SolidJS SolidJS 是一个轻量级前端框架，其以 JSX 为核心，为 React 做了许多减法，少了很多难记的 Hooks，所以学起来非常快（不论有无 React 基础）。不过本文假设读者已经熟悉了 React 基础。 SolidJS 的哲学就是 small and simple。所以 React 高手用起来肯定没有那么方便舒服，很多地方需要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-28T17:37:12.000Z"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-28T17:37:12.000Z"}]]},"git":{"createdTime":1736014766000,"updatedTime":1751132232000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"lxl66566@gmail.com","commits":8,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":2.7,"words":811},"filePathRelative":"coding/solidjs.md","localizedDate":"2025年1月4日","excerpt":"\\n","autoDesc":true}');export{h as comp,o as data};
