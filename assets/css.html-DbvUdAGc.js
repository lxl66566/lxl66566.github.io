import{_ as e,o as t,c as l,e as a}from"./app-B23JOgYH.js";const r={},i=a('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css"><span>CSS</span></a></h1><p>本人是 CSS 超级苦手，甚至以前都只会写 nocss 页面。但是如果要给别人做东西用，nocss 肯定不太行。当今所有主流 GUI 框架中没一个打得过前端设计，我也想在前端领域玩玩，因此学习一点 CSS 是有必要的。</p><h2 id="预处理器" tabindex="-1"><a class="header-anchor" href="#预处理器"><span>预处理器</span></a></h2><p>css 本身不带逻辑，处理嵌套也麻烦。因此有各种各样的预处理器可以允许我们写更强大、更有意思的扩展语法，然后由它们在编译器改成标准 css。</p><ul><li>scss：sass 3.0 的别名，我觉得最泛用的。</li><li><a href="https://lesscss.org/" target="_blank" rel="noopener noreferrer">less</a>，朋友的公司在用</li></ul><p>上面两个预处理器都兼容原生 css。</p><h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型"><span>盒模型</span></a></h2><p>前端基础概念了。</p><ul><li>标准盒模型：<code>box-sizing: content-box</code>，content = size；border 和 padding 向外扩展</li><li>IE 盒模型：<code>box-sizing: border-box</code>，content = size - border - padding，可以从外部统一大小。</li></ul><div style="position:relative;width:400px;"><!-- Margin Layer --><div style="background-color:#e8f4f8;padding:20px;text-align:center;border:2px dashed #a8d1dc;"><div style="position:absolute;top:0px;left:50%;transform:translateX(-50%);background-color:white;padding:2px 8px;border-radius:4px;font-size:14px;"> margin </div><!-- Border Layer --><div style="background-color:#ffb6b6;padding:20px;"><div style="position:absolute;top:20px;left:50%;transform:translateX(-50%);background-color:white;padding:2px 8px;border-radius:4px;font-size:14px;"> border </div><!-- Padding Layer --><div style="background-color:#e6ffe6;padding:20px;"><div style="position:absolute;top:40px;left:50%;transform:translateX(-50%);background-color:white;padding:2px 8px;border-radius:4px;font-size:14px;"> padding </div><!-- Content Layer --><div style="background-color:#fff2e6;padding:20px;text-align:center;">Content Area</div></div></div></div></div><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位"><span>定位</span></a></h2><table><thead><tr><th>Position</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>默认值</td></tr><tr><td>relative</td><td>元素相对于其正常位置进行偏移。不影响文档流</td></tr><tr><td>absolute</td><td>元素相对于最近的已定位（非 static）祖先元素进行定位</td></tr><tr><td>fixed</td><td>元素相对于浏览器窗口进行定位</td></tr><tr><td>sticky</td><td>元素在跨越特定阈值前（屏幕内）表现为相对定位，之后表现为固定定位</td></tr></tbody></table><h2 id="自适应布局" tabindex="-1"><a class="header-anchor" href="#自适应布局"><span>自适应布局</span></a></h2><h3 id="flex" tabindex="-1"><a class="header-anchor" href="#flex"><span>flex</span></a></h3><p>flex 布局是自适应的绝佳实践，而且对于前端初学者来说，flex 也非常符合界面直觉。</p><p>关于版本：flex <a href="https://www.cnblogs.com/xiaohuochai/p/5323146.html" target="_blank" rel="noopener noreferrer">有多个版本</a>。2024 年了，不需要考虑 flex 兼容性，可以假定所有浏览器都支持最新版本 flex。</p><p>无脑 flex：</p><ol><li>想要让内部的玩意水平垂直居中，可以直接无脑 flex：<code>display: flex; align-items: center; justify-content: center;</code></li><li>想要让某个元素占满空间，可以给父元素设为 flex（不要设 align-items &amp; justify-content），然后该元素设为 <code>flex: 1</code>。</li></ol><p>flex 基础：</p><ol><li>主轴与交叉轴：主轴是元素排布的方向，交叉轴是与主轴垂直的方向。</li><li>basis, <a href="https://juejin.cn/post/6844904016439148551" target="_blank" rel="noopener noreferrer">grow and shrink</a><ul><li>basis 是每个元素的基础长度。默认为 0，此时使用元素 width （或 height）。</li><li>grow 是当所有元素填不满 flex 时，对于剩下的空间的瓜分策略。实际上就是按 grow 比例瓜分。</li><li>shrink 是当所有元素超出 flex 时，对所有元素的压缩策略。每个元素被压缩的空间也是按 shrink 比例压缩。</li></ul></li><li>对齐： <ul><li>主轴：<code>justify-content</code>。一般常用的有 <code>center</code>, <code>space-between</code>, <code>space-around</code>, <code>space-evenly</code></li><li>交叉轴：一旦使用了 flex，所有元素就会在交叉轴上被拉到最大（由默认值 <code>align-items: stretch;</code> 控制），非常直觉。</li></ul></li><li>超出自动换行：<code>flex-wrap: wrap;</code>；换行后又会引入行间对齐 <code>align-content</code>。</li></ol><h3 id="grid" tabindex="-1"><a class="header-anchor" href="#grid"><span>grid</span></a></h3><p>有时候，flex 并不能解决所有问题，特别是在有换行的情况下。例如我要做一个展示橱窗，有 9 个元素需要在当前区域 <code>justify-content: space-between;</code> 放置。其中五个元素在上面，四个元素被换行到下面。那么单纯用 flex 会导致上下不对齐，非常难受。</p><p>这时候就要用到 grid，grid 可以保证所有元素在自适应布局的同时还是对齐的。</p><h2 id="框架" tabindex="-1"><a class="header-anchor" href="#框架"><span>框架</span></a></h2><p>虽说写原生 CSS 也不是不行，但是有框架为什么不用呢。</p><p>大多数框架都喜欢将 “写 css” 变为 “写 class”，免去了 html 和 css 之间切来切去的烦恼，用得熟练的话确实可以加快开发速度；特别是对基于 JSX 的前端框架非常有用。而写 vue 的话，css 框架对于初学者来说就是多了查文档的时间，如果文档烂的话还是挺烦人的。</p><ul><li><a href="https://unocss.dev/" target="_blank" rel="noopener noreferrer">UnoCSS</a>：新一代完全自定义化的 css 框架。</li><li><a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">tailwindcss</a>：一套预设的 class。目前广泛使用。</li><li>Bootstrap：老一辈预设的 class，目前算是被 tailwindcss 取代了吧(?)</li></ul><h3 id="tailwindcss" tabindex="-1"><a class="header-anchor" href="#tailwindcss"><span>TailwindCSS</span></a></h3><p><a href="https://tailwindcss.com/docs/customizing-colors" target="_blank" rel="noopener noreferrer">配色</a></p><ul><li>TailwindCSS 只能写静态类名。所以不能写出 <code>bg-${color}-500</code> 这种插值，否则编译的时候不会编出这个 style，样式就丢失了。</li><li>只有 <code>flex: 1</code> 可以写为 <code>flex-1</code>。其他 <code>flex: x</code> 要写为 <code>flex-[x]</code>。</li></ul><h4 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h4><ul><li><a href="https://github.com/reslear/tailwind-scrollbar-hide" target="_blank" rel="noopener noreferrer">tailwind-scrollbar-hide</a>：隐藏 scrollbar</li></ul><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://zh.learnlayout.com/" target="_blank" rel="noopener noreferrer">学习 CSS 布局</a></li></ol>',34),n=[i];function o(s,d){return t(),l("div",null,n)}const p=e(r,[["render",o],["__file","css.html.vue"]]),h=JSON.parse('{"path":"/coding/css.html","title":"CSS","lang":"zh-CN","frontmatter":{"date":"2024-12-13T00:00:00.000Z","icon":"brands fa-css","category":["编程"],"tag":["前端"],"description":"CSS 本人是 CSS 超级苦手，甚至以前都只会写 nocss 页面。但是如果要给别人做东西用，nocss 肯定不太行。当今所有主流 GUI 框架中没一个打得过前端设计，我也想在前端领域玩玩，因此学习一点 CSS 是有必要的。 预处理器 css 本身不带逻辑，处理嵌套也麻烦。因此有各种各样的预处理器可以允许我们写更强大、更有意思的扩展语法，然后由它们在...","head":[["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/css.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"CSS"}],["meta",{"property":"og:description","content":"CSS 本人是 CSS 超级苦手，甚至以前都只会写 nocss 页面。但是如果要给别人做东西用，nocss 肯定不太行。当今所有主流 GUI 框架中没一个打得过前端设计，我也想在前端领域玩玩，因此学习一点 CSS 是有必要的。 预处理器 css 本身不带逻辑，处理嵌套也麻烦。因此有各种各样的预处理器可以允许我们写更强大、更有意思的扩展语法，然后由它们在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T17:45:27.000Z"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:published_time","content":"2024-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-10T17:45:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-10T17:45:27.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"预处理器","slug":"预处理器","link":"#预处理器","children":[]},{"level":2,"title":"盒模型","slug":"盒模型","link":"#盒模型","children":[]},{"level":2,"title":"定位","slug":"定位","link":"#定位","children":[]},{"level":2,"title":"自适应布局","slug":"自适应布局","link":"#自适应布局","children":[{"level":3,"title":"flex","slug":"flex","link":"#flex","children":[]},{"level":3,"title":"grid","slug":"grid","link":"#grid","children":[]}]},{"level":2,"title":"框架","slug":"框架","link":"#框架","children":[{"level":3,"title":"TailwindCSS","slug":"tailwindcss","link":"#tailwindcss","children":[]}]},{"level":2,"title":"external","slug":"external","link":"#external","children":[]}],"git":{"createdTime":1734082658000,"updatedTime":1736531127000,"contributors":[{"name":"lxl66566","email":"lxl66566@gmail.com","commits":4}]},"readingTime":{"minutes":4.08,"words":1224},"filePathRelative":"coding/css.md","localizedDate":"2024年12月13日","excerpt":"\\n","autoDesc":true}');export{p as comp,h as data};
