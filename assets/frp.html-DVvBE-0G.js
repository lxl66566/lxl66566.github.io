import{_ as o,r as n,o as s,c,a as t,b as e,d as a,w as l,e as i}from"./app--m3vMTCj.js";const p={},d=t("h1",{id:"内网穿透",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#内网穿透"},[t("span",null,"内网穿透")])],-1),h=i('<p>需求：免费，稳定。</p><h2 id="cloudflare-tunnel-推荐" tabindex="-1"><a class="header-anchor" href="#cloudflare-tunnel-推荐"><span>cloudflare tunnel（推荐）</span></a></h2><p>折腾完了其他几个服务我才想到 cloudflare，一搜，果然有。</p><p>cloudflare 的内网穿透是部署最简单，使用体验最好的服务，杀死了所有其他 frp 玩家。</p><ol><li>前往 <a href="https://one.dash.cloudflare.com/" target="_blank" rel="noopener noreferrer">cloudflare zero trust</a>，左侧选择 <em>Networks - Tunnels</em>，创建一个新的 tunnel。</li><li>根据提示在服务器上安装 cloudflared。提示中的 Linux 部分只包含了 rpm/deb 系，但是没有关系，直接到 <a href="https://github.com/cloudflare/cloudflared" target="_blank" rel="noopener noreferrer">Github cloudflared</a> 的 release 中下载对应架构 binary 文件。</li><li>执行 cloudflare 步骤里带有 token 的命令。</li></ol><p>就这么简单，可以说一行命令完成内网穿透也不为过。而且你永远可以相信 cloudflare 的延迟和稳定性。</p>',6),u=t("code",null,"/etc/init.d/cloudflared",-1),f=i('<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/rc.d</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ../init.d/cloudflared</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ./S99cloudflared</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="zerotier" tabindex="-1"><a class="header-anchor" href="#zerotier"><span>zerotier</span></a></h2><p><a href="https://openwrt.org/docs/guide-user/services/vpn/zerotier" target="_blank" rel="noopener noreferrer">据说</a> openwrt 是有 zerotier 的软件包的，但是我在 iStoreOS 里一点也找不到，不知道是 iStoreOS 的 fork 问题还是 opkg 的问题。</p><p>然后我想直接下载 binary，结果发现<a href="https://www.zerotier.com/download" target="_blank" rel="noopener noreferrer">下载页面</a>里只有 rpm/deb 系的，Github release 里也找不到 binary。合着其他发行版就不配装你的程序了？</p><p>而且 zerotier 几个产品之间关系也比较混乱，一会儿把你推去 zerotier One，一会儿又踢回 zerotier，但是我没空，也没兴趣了解它们之间的关系。</p><h2 id="rathole" tabindex="-1"><a class="header-anchor" href="#rathole"><span><a href="https://github.com/rapiz1/rathole" target="_blank" rel="noopener noreferrer">rathole</a></span></a></h2><p>rathole 是一个 Github 开源项目，本身并不提供内网穿透的服务器；它需要在一台有公网 IP 的服务器上部署转发程序（server），并在内网服务器上部署 client。其实也就是相当于部署一个代理了。不过好在它的配置非常简单，只要写端口就行；而且是 Rust 写的，有编程语言原神之力加持，所以我还是尝试了一下。</p><p>程序很容易就跑起来了，唯一的问题是开机自启。公网服务器上是正常发行版（systemd），这个还好写，我之前做过一个 <a href="https://github.com/lxl66566/user-startup-rs" target="_blank" rel="noopener noreferrer">user-startup-rs</a>的程序，可以做到一键自启。但是 iStoreOS 用的是 procd，老式的 service 命令写服务，这 service 里还大量调用了 OpenWRT 的接口，学习成本和心智负担都不可忽视。</p><p>service 写完，可以跑起来了，结果实际使用时还整天断连，稳定性非常低。我猜测是 service 写出了问题，然而这又不像 systemd 接 journal，没有日志输出，调试非常不便。</p><p>同时因为我的公网服务器大多是月抛小鸡，每个月都要修改配置还是非常麻烦的，最后还是放弃了。</p><h2 id="tailscale" tabindex="-1"><a class="header-anchor" href="#tailscale"><span>tailscale</span></a></h2><p>很早以前用过，给我宿舍电脑做 ssh 穿透。感觉延迟还是有一点高的，稳定性也差了点。</p>',12);function m(g,k){const r=n("RouteLink");return s(),c("div",null,[d,t("p",null,[e("在 "),a(r,{to:"/articles/linux/openwrt.html"},{default:l(()=>[e("iStoreOS")]),_:1}),e(" 软路由上部署了应用后，我需要一个内网穿透让我在任何地点都能连上应用。因此我尝试了几个内网穿透工具，并在此做一个简单的评价。")]),h,t("p",null,[e("不过 cloudflared 在 "),a(r,{to:"/articles/linux/openwrt.html#%E6%9C%8D%E5%8A%A1"},{default:l(()=>[e("procd")]),_:1}),e(" 系统上只会将 service 写入 "),u,e("，并不会开机自启。如果需要开机自启，需要手动创建一个软链接：")]),f])}const _=o(p,[["render",m],["__file","frp.html.vue"]]),y=JSON.parse('{"path":"/articles/frp.html","title":"内网穿透","lang":"zh-CN","frontmatter":{"date":"2024-12-04T00:00:00.000Z","icon":"slash","category":["推荐","教程","评价"],"tag":["Linux","桌面端"],"description":"内网穿透 在 软路由上部署了应用后，我需要一个内网穿透让我在任何地点都能连上应用。因此我尝试了几个内网穿透工具，并在此做一个简单的评价。 需求：免费，稳定。 cloudflare tunnel（推荐） 折腾完了其他几个服务我才想到 cloudflare，一搜，果然有。 cloudflare 的内网穿透是部署最简单，使用体验最好的服务，杀死了所有其他 f...","head":[["meta",{"property":"og:url","content":"https://absx.pages.dev/articles/frp.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"内网穿透"}],["meta",{"property":"og:description","content":"内网穿透 在 软路由上部署了应用后，我需要一个内网穿透让我在任何地点都能连上应用。因此我尝试了几个内网穿透工具，并在此做一个简单的评价。 需求：免费，稳定。 cloudflare tunnel（推荐） 折腾完了其他几个服务我才想到 cloudflare，一搜，果然有。 cloudflare 的内网穿透是部署最简单，使用体验最好的服务，杀死了所有其他 f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-08T16:29:03.000Z"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"桌面端"}],["meta",{"property":"article:published_time","content":"2024-12-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-08T16:29:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内网穿透\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-08T16:29:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"cloudflare tunnel（推荐）","slug":"cloudflare-tunnel-推荐","link":"#cloudflare-tunnel-推荐","children":[]},{"level":2,"title":"zerotier","slug":"zerotier","link":"#zerotier","children":[]},{"level":2,"title":"rathole","slug":"rathole","link":"#rathole","children":[]},{"level":2,"title":"tailscale","slug":"tailscale","link":"#tailscale","children":[]}],"git":{"createdTime":1733330711000,"updatedTime":1733675343000,"contributors":[{"name":"lxl66566","email":"lxl66566@gmail.com","commits":2}]},"readingTime":{"minutes":2.73,"words":819},"filePathRelative":"articles/frp.md","localizedDate":"2024年12月4日","excerpt":"\\n","autoDesc":true}');export{_ as comp,y as data};
