import{_ as r,e as n,f as s,g as i,h as a,i as d,j as o,r as l,o as p}from"./app-CXoHY-lu.js";const c={};function h(g,e){const t=l("RouteLink");return p(),n("div",null,[e[3]||(e[3]=s(`<h1 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理"><span>反向代理</span></a></h1><p>一个系统可能有一堆服务器，一台服务器上可能运行着一堆服务。反代是一种中间件，将不同请求转发到不同服务上，兼顾了加密，负载均衡等。<a href="https://www.cloudflare.com/zh-cn/learning/cdn/glossary/reverse-proxy/" target="_blank" rel="noopener noreferrer">more</a></p><h2 id="caddy" tabindex="-1"><a class="header-anchor" href="#caddy"><span>caddy</span></a></h2><p>caddy 是一个更年轻的工具，提供<strong>非常简单</strong>的语法和<strong>自动 https</strong>（自动签证书）。</p><ul><li><a href="https://caddyserver.com/docs/install" target="_blank" rel="noopener noreferrer">安装指南</a></li></ul><p>能有多简单呢，例如我需要部署一个静态站点（用于 vps 伪装），只需要在 <code>/etc/caddy/Caddyfile</code> 中写入：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;域名&gt; {</span></span>
<span class="line"><span>  root * &lt;(静态)资源路径&gt;</span></span>
<span class="line"><span>  file_server</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),i("p",null,[e[1]||(e[1]=a("然后")),d(t,{to:"/articles/linux/basic.html#%E6%9C%8D%E5%8A%A1"},{default:o(()=>e[0]||(e[0]=[a("启动 caddy 服务")])),_:1}),e[2]||(e[2]=a("即可。"))]),e[4]||(e[4]=s(`<p>这个配置文件可以将 http 自动重定向到 https，并且不用自己签证书。</p><p>如果要用自己的证书就加一句 <code>tls &lt;crt&gt; &lt;key&gt;</code> 即可。</p><blockquote><p>而我在 nginx 上得自己用 acme.sh 签证书，然后写<a href="https://github.com/lxl66566/config/blob/a3065d4b9797d43eb113e2932e9799f9b420c4f4/nginx.conf" target="_blank" rel="noopener noreferrer">一大坨的配置文件</a>，还得去看看 nginx 命令行用法，signal 有哪些，才能把我的网站搞好。</p></blockquote><p>反代也很简单，只需将 <code>file_server</code> 换成 <code>reverse_proxy :8000</code>（端口号）。</p><ul><li>如果只有一个域名，可以去掉大括号。（压行！现在只有三行了）</li><li>自带 formatter：<code>caddy fmt --overwrite /etc/caddy/Caddyfile</code></li><li>自动证书存放位置是 <code>/var/lib/caddy/certificates/acme-v02.api.letsencrypt.org-directory/&lt;domain&gt;</code>，可以 ln 到其他地方给其他软件用。</li></ul><p>caddy 最大的问题是性能，因此不适合在高并发环境下使用。</p><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h3><p>caddy 默认将日志输出 stderr，可以用 <code>journalctl</code> 查看。但也可以将其输出至文件，或者按域名分流日志等。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  log</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> default</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    output</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> file</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;file_path&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更具体的应用请参考文档：<a href="https://caddyserver.com/docs/caddyfile/directives/log" target="_blank" rel="noopener noreferrer">log 参数</a> | <a href="https://caddyserver.com/docs/caddyfile/options#log" target="_blank" rel="noopener noreferrer">全局 log default</a>。</p><h3 id="其他资料" tabindex="-1"><a class="header-anchor" href="#其他资料"><span>其他资料</span></a></h3><ul><li><a href="https://github.com/caddyserver/nginx-adapter" target="_blank" rel="noopener noreferrer">Caddy NGINX Config Adapter</a>, converts NGINX config files into Caddy&#39;s native format.</li></ul><h2 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>nginx</span></a></h2><p><s>Nginx 502 bad gateway 😦</s> nginx 是老牌反代大哥了，但是它其实不是今天&amp;这里的主角（）。</p><blockquote><p>Several features that are free (in caddy) which cost money in nginx. 😦</p></blockquote><p><s>nginx 的 quic 还是 module。</s> <em>NGINX now officially supports HTTP/3 with QUIC. It is available as part of NGINX 1.25.1 mainline version for open source users and NGINX Plus R30 for enterprise customers.</em></p><h2 id="所以到底如何选" tabindex="-1"><a class="header-anchor" href="#所以到底如何选"><span>所以到底如何选</span></a></h2><p>观点：激进派</p><p>虽然 go 写的 caddy 性能可能比纯 c 写的、经过时间检验的 nginx 差，但是流量不大的情况下真的缺那点性能吗？nginx 那坨配置我得上 gpt 才能勉强<strong>读</strong>懂，折腾技术还是用尽可能简单的，减少自己精神内耗的比较好。<s>选择 caddy 是在为自己的脑子着想，兄弟。</s></p><p>因此在自己搞着玩的小流量服务器上用 caddy 准没错。</p><p>目前 caddy 在 github 上有 50k star，也侧面反映了 caddy 的优秀。</p><h2 id="遇到的问题" tabindex="-1"><a class="header-anchor" href="#遇到的问题"><span>遇到的问题</span></a></h2><h3 id="caddy-无法建立连接" tabindex="-1"><a class="header-anchor" href="#caddy-无法建立连接"><span>caddy 无法建立连接</span></a></h3><p>我想开一个 file server，静态文件没有任何问题（就是我的 blog）。然而 caddy 开了以后一访问就是 js 执行错误。我也用 nginx 试了一下，是可用的。</p><p>手动 <code>caddy run</code> 却是好的，可能是 service 出了问题。</p><h3 id="err-address-unreachable" tabindex="-1"><a class="header-anchor" href="#err-address-unreachable"><span>ERR_ADDRESS_UNREACHABLE</span></a></h3><p>用 caddy 和 nginx 都试了一遍，浏览器访问 ERR<em>ADDRESS_UNREACHABLE，本地访问 403，说明不是防火墙的问题。nginx 有报错 _13: Permission denied</em>，然后搜一下发现需要 <code>chmod +x &lt;root&gt;</code>。加了以后还是没用，原来 <em>root</em> 的全路径都需要 <code>chmod +x</code>。。问题解决。</p><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://www.reddit.com/r/selfhosted/comments/hur1hx/caddy_vs_nginx_how_do_these_web_servers_reverse/" target="_blank" rel="noopener noreferrer">reddit: Caddy vs Nginx: How Do These Web Servers / Reverse Proxies Compare?</a></li><li><a href="https://caddy.community/t/why-caddy-2-over-nginx/9549" target="_blank" rel="noopener noreferrer">Why Caddy 2 over NGINX</a></li></ol>`,29))])}const y=r(c,[["render",h],["__file","reverse_proxy.html.vue"]]),u=JSON.parse('{"path":"/articles/reverse_proxy.html","title":"反向代理","lang":"zh-CN","frontmatter":{"date":"2023-11-16T00:00:00.000Z","icon":"handshake-simple","category":["教程","推荐"],"tag":["Linux"],"description":"反向代理 一个系统可能有一堆服务器，一台服务器上可能运行着一堆服务。反代是一种中间件，将不同请求转发到不同服务上，兼顾了加密，负载均衡等。more caddy caddy 是一个更年轻的工具，提供非常简单的语法和自动 https（自动签证书）。 安装指南 能有多简单呢，例如我需要部署一个静态站点（用于 vps 伪装），只需要在 /etc/caddy/C...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反向代理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T08:35:24.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/articles/reverse_proxy.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"反向代理"}],["meta",{"property":"og:description","content":"反向代理 一个系统可能有一堆服务器，一台服务器上可能运行着一堆服务。反代是一种中间件，将不同请求转发到不同服务上，兼顾了加密，负载均衡等。more caddy caddy 是一个更年轻的工具，提供非常简单的语法和自动 https（自动签证书）。 安装指南 能有多简单呢，例如我需要部署一个静态站点（用于 vps 伪装），只需要在 /etc/caddy/C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T08:35:24.000Z"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2023-11-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T08:35:24.000Z"}]]},"git":{"createdTime":1700147032000,"updatedTime":1718008524000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"18259734087@163.com","commits":12,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":2.85,"words":856},"filePathRelative":"articles/reverse_proxy.md","localizedDate":"2023年11月16日","excerpt":"\\n","autoDesc":true}');export{y as comp,u as data};
