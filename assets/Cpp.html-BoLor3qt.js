import{_ as c,e as u,f as h,i as t,g as i,j as l,h as a,r as k,o as B}from"./app-ByviuYfo.js";const y={},m={href:"https://en.cppreference.com/w/cpp/algorithm/ranges/fold_left",target:"_blank",rel:"noopener noreferrer"},F={class:"footnotes"},b={class:"footnotes-list"},f={id:"footnote3",class:"footnote-item"};function v(C,s){const r=k("RouteLink"),p=k("Tabs"),d=k("heimu"),o=k("VPIcon"),g=k("ZoomedImg"),A=k("CodeTabs");return B(),u("div",null,[s[83]||(s[83]=h('<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h1><div class="subtitle">——我从未懂过 C++</div><h2 id="一些工具" tabindex="-1"><a class="header-anchor" href="#一些工具"><span>一些工具</span></a></h2><ul><li><a href="https://cppinsights.io/" target="_blank" rel="noopener noreferrer">cppinsights</a>：显式指明代码中的隐式转换与中间变量。</li><li><a href="https://godbolt.org/" target="_blank" rel="noopener noreferrer">godbolt</a>：汇编分析；pastebin；不同编译器的行为分析</li><li><a href="https://quick-bench.com/" target="_blank" rel="noopener noreferrer">Quick C++ Benchmark</a></li></ul><h2 id="常见名词" tabindex="-1"><a class="header-anchor" href="#常见名词"><span>常见名词</span></a></h2><ul><li>UB：Undefined behavior，未定义行为，典型的有 <code>i = i++ + ++i</code>，一个容易被忽视的 UB 是 <code>a[i] = i++;</code>。(<a href="https://en.cppreference.com/w/c/language/eval_order" target="_blank" rel="noopener noreferrer">ref</a>)</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>C++ 开发前的准备挺复杂的，做好心理准备。</p><p>linux 下用包管理器，配置环境应该是基础技能。这里写的主要是 windows 下的开发步骤。</p><p>我目前正在使用 <em>xmake + clang 全套</em> 进行开发。</p><h3 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器"><span>编译器</span></a></h3>',11)),t(p,{id:"49",data:[{id:"clang"},{id:"mingw"},{id:"msvc"}]},{title0:l(({value:e,isActive:n})=>s[0]||(s[0]=[a("clang")])),title1:l(({value:e,isActive:n})=>s[1]||(s[1]=[a("mingw")])),title2:l(({value:e,isActive:n})=>s[2]||(s[2]=[a("msvc")])),tab0:l(({value:e,isActive:n})=>[s[7]||(s[7]=i("blockquote",null,[i("p",null,[a("Clang 是 LLVM 的前端，具有速度快、内存占用小、诊断信息可读性强、兼容性好等优势。"),i("a",{href:"https://www.51cto.com/article/630677.html",target:"_blank",rel:"noopener noreferrer"},"ref")])],-1)),i("p",null,[t(r,{to:"/farraginous/recommend_packages.html#scoop"},{default:l(()=>s[3]||(s[3]=[a("scoop")])),_:1}),s[4]||(s[4]=a(" 一行：")),s[5]||(s[5]=i("code",null,"scoop install llvm",-1)),s[6]||(s[6]=a("。"))]),s[8]||(s[8]=i("p",null,[a("安装 llvm 还会附带 clang 前端工具如 "),i("em",null,"clangd"),a(", "),i("em",null,"clang-tidy"),a(", "),i("em",null,"clang-format"),a("。")],-1)),s[9]||(s[9]=i("p",null,[a("注：llvm 本体貌似不带运行库，可以考虑 "),i("code",null,"scoop install mingw-winlibs-llvm"),a("。")],-1))]),tab1:l(({value:e,isActive:n})=>[s[14]||(s[14]=i("p",null,"windows 上不想装 msvc 的话可以考虑使用 mingw。",-1)),i("p",null,[t(r,{to:"/farraginous/recommend_packages.html#scoop"},{default:l(()=>s[10]||(s[10]=[a("scoop")])),_:1}),s[11]||(s[11]=a(" 一行：")),s[12]||(s[12]=i("code",null,"scoop install mingw",-1)),s[13]||(s[13]=a("。"))])]),tab2:l(({value:e,isActive:n})=>s[15]||(s[15]=[i("p",null,[i("a",{href:"https://learn.microsoft.com/zh-cn/visualstudio/install/install-visual-studio",target:"_blank",rel:"noopener noreferrer"},"安装 visual studio"),a("（体积较大）。")],-1)])),_:1}),s[84]||(s[84]=i("h3",{id:"开发环境",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#开发环境"},[i("span",null,"开发环境")])],-1)),i("p",null,[s[17]||(s[17]=a("我使用 ")),t(r,{to:"/coding/vscode.html"},{default:l(()=>s[16]||(s[16]=[a("VSCode")])),_:1}),s[18]||(s[18]=a(" 作为 C++ 代码编辑器。以下扩展都可以直接在 vscode 商店搜到；只需选择一个即可。"))]),t(p,{id:"86",data:[{id:"clangd"},{id:"Clang-Tidy + Clang-Format"},{id:"Microsoft C/C++"}]},{title0:l(({value:e,isActive:n})=>s[19]||(s[19]=[a("clangd")])),title1:l(({value:e,isActive:n})=>s[20]||(s[20]=[a("Clang-Tidy + Clang-Format")])),title2:l(({value:e,isActive:n})=>s[21]||(s[21]=[a("Microsoft C/C++")])),tab0:l(({value:e,isActive:n})=>[s[27]||(s[27]=i("p",null,"调用外部的 linter + formatter，非常快速。",-1)),s[28]||(s[28]=i("p",null,[a("前置条件：安装 "),i("a",{href:"#%E7%BC%96%E8%AF%91%E5%99%A8"},"clang 全套"),a("工具。主要是 linter "),i("code",null,"clangd"),a(" 和 formatter "),i("code",null,"clang-format"),a("。")],-1)),s[29]||(s[29]=i("div",{class:"hint-container tip"},[i("p",{class:"hint-container-title"},"提示"),i("p",null,[a("相比 "),i("em",null,"C/C++"),a(" 扩展的 LSP，clangd 具有其他优点：")]),i("ol",null,[i("li",null,[a("响应速度快。用过 "),i("em",null,"Microsoft C/C++"),a(" 扩展的人都知道其慢的一批。")]),i("li",null,[i("em",null,"clang-format"),a(" 格式化功能强大，高度自定义化。")]),i("li",null,"支持 inlay hints")])],-1)),i("p",null,[s[23]||(s[23]=a("可能需要自己填一个 ")),s[24]||(s[24]=i("code",null,"clang-format.exe",-1)),s[25]||(s[25]=a(" 的位置，去 llvm 安装位置找，或者用 ")),t(r,{to:"/farraginous/recommend_packages.html#everything"},{default:l(()=>s[22]||(s[22]=[a("everything")])),_:1}),s[26]||(s[26]=a(" 搜一下。"))]),s[30]||(s[30]=i("ul",null,[i("li",null,[i("code",null,"clang-format.exe -style=llvm -dump-config > .clang-format"),a(" 可以导出设置，一般不需要。")])],-1))]),tab1:l(({value:e,isActive:n})=>s[31]||(s[31]=[i("blockquote",null,[i("p",null,[a("Clang-Tidy 比 clangd 要"),i("strong",null,"慢很多"),a("（功能也更多）。并且 "),i("a",{href:"https://discourse.llvm.org/t/list-of-clang-tidy-checks-supported-in-clangd/61013",target:"_blank",rel:"noopener noreferrer"},"clangd 尊重 clang-tidy 的设置"),a("，因此非解耦需求下还是用 clangd 比较好。")])],-1),i("p",null,[a("为什么选这个组合呢，因为解耦：我不喜欢让一个扩展完成所有任务，我希望 linter 和 formatter 分离"),i("sup",{class:"footnote-ref"},[i("a",{href:"#footnote1"},"[1]"),i("a",{class:"footnote-anchor",id:"footnote-ref1"})]),a("，这样是自由度最高的方案。")],-1),i("p",null,[a("Clang-Tidy 在 vscode 扩展里的名字叫 "),i("em",null,"CS 128 Clang-Tidy"),a("。")],-1)])),tab2:l(({value:e,isActive:n})=>s[32]||(s[32]=[i("p",null,[a("all in one 类型的插件，我"),i("strong",null,"不是很喜欢，不够自由"),a("。")],-1),i("div",{class:"hint-container tip"},[i("p",{class:"hint-container-title"},"不过还是说几句好话"),i("ul",null,[i("li",null,"快速上手，对新人友好。"),i("li",null,[a("无需了解"),i("a",{href:"#%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F"},"构建系统"),a("，可以直接点右上角 "),i("em",null,"运行"),a(" 按钮快速运行"),i("strong",null,"单文件"),a("。")]),i("li",null,"可视化 debug。")])],-1),i("ol",null,[i("li",null,[a("在工作区"),i("strong",null,"打开一个文件夹"),a("，新建一个简单的 helloworld.cpp 文件（内容请自己写完）。")]),i("li",null,[i("code",null,"Ctrl + Shift + P"),a(" 打开命令面板。 "),i("ol",null,[i("li",null,[a("搜索并点击 "),i("code",null,"C/C++: Edit Configurations (UI)"),a(" ，将编译器路径改为编译器的 "),i("code",null,"g++.exe"),a("；在 "),i("em",null,"IntelliSense 模式"),a(" 下选择相应的工具链，例如 mingw 选择 "),i("code",null,"gcc-x64"),a("。此时 vscode 会自动在工作区创建 "),i("code",null,".vscode"),a(" 存放配置。")]),i("li",null,[a("搜索并点击 "),i("code",null,"Tasks: Configure Default Build Task"),a("，再选择 "),i("code",null,"C/C++: g++.exe build active file"),a("。")])])])],-1)])),_:1}),s[85]||(s[85]=i("h3",{id:"构建系统",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#构建系统"},[i("span",null,"构建系统")])],-1)),s[86]||(s[86]=i("p",null,[a("最广泛使用的是用 "),i("em",null,"Cmake"),a("，然而我并不喜欢它。网上也有一些类似的想法："),i("a",{href:"https://twdev.blog/2021/08/cmake/",target:"_blank",rel:"noopener noreferrer"},"Why CMake sucks?"),a("。")],-1)),t(p,{id:"195",data:[{id:"xmake"},{id:"cmake"},{id:"cmkr"}]},{title0:l(({value:e,isActive:n})=>s[33]||(s[33]=[a("xmake")])),title1:l(({value:e,isActive:n})=>s[34]||(s[34]=[a("cmake")])),title2:l(({value:e,isActive:n})=>s[35]||(s[35]=[a("cmkr")])),tab0:l(({value:e,isActive:n})=>[s[50]||(s[50]=i("p",null,[a("xmake 是向下兼容 cmake 的构建工具，拥有极度简洁的语法。xmake 使用 lua 脚本作为构建系统语言。"),i("strong",null,[i("s",null,"我真的不想再面对一团乱麻的 cmake 了！")])],-1)),i("ul",null,[s[46]||(s[46]=i("li",null,[i("a",{href:"https://zhuanlan.zhihu.com/p/640701847",target:"_blank",rel:"noopener noreferrer"},"新手教程"),a("，由于我自己摸索而不是看教程，多走了许多弯路。因此推荐看看。")],-1)),i("li",null,[s[45]||(s[45]=a("开始使用： ")),i("ul",null,[i("li",null,[s[37]||(s[37]=a("use ")),t(r,{to:"/farraginous/recommend_packages.html#scoop"},{default:l(()=>s[36]||(s[36]=[a("scoop")])),_:1}),s[38]||(s[38]=a(", ")),s[39]||(s[39]=i("code",null,"scoop install xmake",-1)),s[40]||(s[40]=a(" 一行安装。输入 ")),s[41]||(s[41]=i("code",null,"xmake -h",-1)),s[42]||(s[42]=a(" 了解更多。"))]),s[43]||(s[43]=i("li",null,[a("示例："),i("code",null,"xmake create -l c++ -P ./cpp && cd cpp && xmake && xmake r")],-1)),s[44]||(s[44]=i("li",null,[a("一些 LSP 可能会需要 "),i("code",null,"compile_commands.json"),a("："),i("code",null,"xmake project -k compile_commands")],-1))])]),s[47]||(s[47]=i("li",null,[a("一些预设"),i("div",{class:"language-lua line-numbers-mode","data-highlighter":"shiki","data-ext":"lua",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"set_encodings"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"utf-8"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")            "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"-- 没加会导致 Qt 中文乱码")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"set_policy"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"build.warning"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"true"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"-- 开启编译警告")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"set_languages"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"cxxlatest"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")        "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"-- 设置 C++ 版本")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"set_optimize"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"fastest"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")           "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"-- 优化等级，不过 release 有默认")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"add_requires"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"fmt"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"target"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"test"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  -- ...")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"  add_packages"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"fmt"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")             "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"-- 添加 fmt 包")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])])],-1)),s[48]||(s[48]=i("li",null,[a("查找包（任选）： "),i("ul",null,[i("li",null,[a("手动去 "),i("a",{href:"https://github.com/xmake-io/xmake-repo/",target:"_blank",rel:"noopener noreferrer"},"xmake-repo"),a(" 找")]),i("li",null,[a("命令行："),i("code",null,"xrepo search <package_name>..."),a("，可用 "),i("code",null,"*"),a(" 作为通配符")]),i("li",null,[i("a",{href:"https://xmake.microblock.cc/",target:"_blank",rel:"noopener noreferrer"},"microblock 群友做的第三方网页")])])],-1)),s[49]||(s[49]=i("li",null,[a("指定工具链 "),i("ul",null,[i("li",null,[a("在 target 中添加 "),i("code",null,'set_toolchains("clang")')])])],-1))]),s[51]||(s[51]=i("p",null,"xmake 的主要缺点就是用的人少，出了 bug 找不到解决方案。不过由于我的个人项目简单，我姑且还是用着 xmake 的。",-1))]),tab1:l(({value:e,isActive:n})=>s[52]||(s[52]=[i("p",null,"cmake 内部原理是生成 makefile 然后再 make。",-1),i("p",null,"实际上我也就写 Qt 接触了一下 cmake，后面很快转到 xmake 了，关于 cmake 的了解不算多。",-1),i("ul",null,[i("li",null,[a("安装："),i("code",null,"scoop install cmake"),a("，或者 VS 安装里也有，不过要自己加 PATH。")])],-1)])),tab2:l(({value:e,isActive:n})=>s[53]||(s[53]=[i("p",null,[i("a",{href:"https://github.com/build-cpp/cmkr",target:"_blank",rel:"noopener noreferrer"},"cmkr"),a("，基于 toml 生成 cmake 文件，三阶构建（cmkr -> cmakelists -> makefile）")],-1)])),_:1}),s[87]||(s[87]=h('<h3 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理"><span>包管理</span></a></h3><h4 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>windows</span></a></h4><p>虽然有的构建系统（例如 xmake）有 xrepo 帮你解决了包管理问题，但是大部分项目仍然需要使用专门的包管理器管理依赖，更有甚者需要手动摸索依赖。vcpkg 是 windows msvc 体系里最常用的包管理器。你甚至可以在各种 rust 库里看到要求使用 vcpkg 安装的依赖，例如 libarchive。</p><p>vcpkg <a href="https://learn.microsoft.com/zh-cn/vcpkg/concepts/classic-mode" target="_blank" rel="noopener noreferrer">有两个工作模式</a>，<em>经典模式</em> 和 <em>清单模式</em>，其实就是 global 和 per-project 的区别。如果你使用的是 Visual Studio 自带的 vcpkg，其默认运行在 <em>清单模式</em>；但是很多时候（比如上述的 rust 编译需要调用 vcpkg）时，直接用 <code>vcpkg install xxx</code> 会<a href="https://learn.microsoft.com/zh-cn/vcpkg/troubleshoot/build-failures?WT.mc_id=vcpkg_inproduct_cli#cannot-install-packages-using-classic-mode" target="_blank" rel="noopener noreferrer">报错 <em>Could not locate a manifest</em></a>，我们更需要 <em>经典模式</em> 的全局包，因此用 scoop 再 install 一个独立的 vcpkg 是很有必要的。</p><h4 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>linux</span></a></h4><p>linux 上各种包一般依赖于系统包管理器与 pkgconfig 的 .pc 文件。系统包安装后自带了一个 .pc 文件用于指示包的位置、版本、依赖等信息。构建系统会通过 pkg-config 命令读取这些 .pc 文件来获取编译所需的信息。</p><h3 id="qt-开发环境" tabindex="-1"><a class="header-anchor" href="#qt-开发环境"><span>Qt 开发环境</span></a></h3><p>Qt 是一个 C++ 框架，主要是做 GUI 用的。<a href="#qt">查看介绍</a>。不用的话可以不装。</p><p>由于 Qt creater 没有 vscode 中的强大插件，因此我希望在 vscode 中开发 Qt 代码。</p><p>Qt 的构建（从 Qt6 开始）默认生成 cmake 配置，但也可以手写 xmake 配置。</p><h4 id="windows-1" tabindex="-1"><a class="header-anchor" href="#windows-1"><span>windows</span></a></h4>',11)),t(p,{id:"327",data:[{id:"xmake"},{id:"cmake + C/C++ 扩展"}]},{title0:l(({value:e,isActive:n})=>s[54]||(s[54]=[a("xmake")])),title1:l(({value:e,isActive:n})=>s[55]||(s[55]=[a("cmake + C/C++ 扩展")])),tab0:l(({value:e,isActive:n})=>[i("p",null,[s[57]||(s[57]=a("用 xmake 作为 Qt 的构建系统是一个不错的选择。之前曾经出现过")),t(r,{to:"/gossip/difficulties.html#20230507-qt6-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5"},{default:l(()=>s[56]||(s[56]=[a("一些问题")])),_:1}),s[58]||(s[58]=a("，但 20230802 再次尝试已经可以正常使用。"))]),s[59]||(s[59]=i("ol",null,[i("li",null,"使用 Qt Creator 创建模版项目。"),i("li",null,[i("code",null,"xmake.lua"),a(" 参考"),i("a",{href:"https://xmake.io/#/zh-cn/guide/project_examples?id=widgets-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},"官方文档"),a("，这里是一个示例："),i("div",{class:"language-lua line-numbers-mode","data-highlighter":"shiki","data-ext":"lua",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"add_rules"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"mode.debug"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},", "),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"mode.release"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"target"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"qt_widgetapp"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"    add_rules"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"qt.widgetapp"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"    add_files"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"src/*.cpp"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"    add_files"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"src/mainwindow.ui"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"    add_files"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"src/mainwindow.h"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])])]),i("li",null,[a("可能需要指定 sdk："),i("code",null,"xmake f --qt=D:\\software\\QtSDK\\6.6.0"),a("（你的 Qt 安装路径）")]),i("li",null,[i("a",{href:"https://xmake.io/#/zh-cn/plugin/builtin_plugins?id=%E7%94%9F%E6%88%90compiler_commands",target:"_blank",rel:"noopener noreferrer"},"生成 compiler_commands.json"),a("，使 clangd 能够读取 includePath 等。一行："),i("code",null,"xmake project -k compile_commands")]),i("li",null,[i("code",null,"xmake && xmake r"),a(" 就能跑了。")])],-1)),s[60]||(s[60]=i("p",null,[a("刚做完 2. 的时候会出现经典问题，clangd 报 "),i("em",null,[a("找不到 "),i("code",null,"ui_mainwindow.h"),a(" 文件")]),a("… 因为它是编译期生成的。。用 cmake CLI 的时候可能需要麻烦手动生成，xmake 挺智能的，build 一次后就不会报错了，应该是 xmake 内置的 qt 规则起作用了。")],-1)),s[61]||(s[61]=i("p",null,"需要注意，使用 xmake 构建的 Qt 程序无法在 stdout 输出字符，无论 release 还是 debug mode。（不知道是不是缺少了什么设置选项）",-1))]),tab1:l(({value:e,isActive:n})=>s[62]||(s[62]=[i("ol",null,[i("li",null,"先用 Qt creater 创建一个模板项目，或者打开现有项目，或者自己手写模板。"),i("li",null,[i("code",null,"Ctrl + Shift + P"),a("，键入"),i("code",null,"C/C++: Edit Configurations (UI)"),i("ul",null,[i("li",null,[a("在 "),i("em",null,"包含路径"),a(" 下添加 "),i("code",null,"D:\\software\\Qt\\6.5.0\\mingw_64\\include\\**"),a("（使用你自己的 include path）")]),i("li",null,[a("将 "),i("em",null,"C++ 标准"),a(" 改为你需要的。（截至 Qt6.6.0 不支持 C++23）")])])]),i("li",null,[a("在项目目录下执行："),i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"uic"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," mainwindow.ui"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," ui_mainwindow.h")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"rcc"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," static.qrc"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," static.cpp"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"    //"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 如果有"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," qrc"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 文件则执行。")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"//"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," rcc"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 不会读取"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," qresource"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," prefix，可能需要将"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," .qrc"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," 文件拷贝到静态资源文件夹下并执行")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])])]),i("li",null,[a("将 "),i("em",null,"3."),a(" 生成的文件（static.cpp） 添加至 "),i("code",null,"CMakelists.txt"),a(" 中的 "),i("code",null,"PROJECT_SOURCES")]),i("li",null,[a("在 "),i("code",null,"CMakelists.txt"),a(" 中的 "),i("code",null,"find_package"),a(" 语句前添加："),i("div",{class:"language-cmake","data-highlighter":"shiki","data-ext":"cmake",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"set"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"CMAKE_PREFIX_PATH"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "D:/software/Qt/6.5.0/mingw_64"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")` "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# （使用你自己的 path）")])])])])])],-1)])),_:1}),s[88]||(s[88]=h(`<h4 id="linux-1" tabindex="-1"><a class="header-anchor" href="#linux-1"><span>linux</span></a></h4><p>在 (arch)linux 上开发 qt 应用。</p><ol><li>通过 <a href="#%E5%AE%89%E8%A3%85">aqtinstall</a> 安装 sdk；通过 pacman 安装 <code>qt6-base</code>.</li><li>在 <code>xmake.lua</code> 中，新建 toolchains:<div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toolchain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myqt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;standalone&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> is_os</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;linux&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        set_sdkdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;~/program/qt/6.6.0/gcc_64/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 填写 sdk 目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        set_toolset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cxx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;clang&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 指定编译器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        add_linkdirs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/usr/lib/qt6/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>然后在 target 中 <code>set_toolchains(&quot;myqt&quot;)</code> 即可。</li></ol><h2 id="语言相关" tabindex="-1"><a class="header-anchor" href="#语言相关"><span>语言相关</span></a></h2><p><s>在大片的构建系统篇幅后我们终于走到了语言基础，太悲哀了。</s></p><h3 id="range-based-for-loop" tabindex="-1"><a class="header-anchor" href="#range-based-for-loop"><span>range-based for loop</span></a></h3><blockquote><p>&gt;= C++11</p></blockquote><p>不用再写下标了。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i : vec){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果需要同时使用下标，可以用 <a href="#ranges">ranges enumerate</a>（不过要 C++20）。</p><p>而且，range-based for loop 还有<a href="https://www.reddit.com/r/cpp/comments/pye3iv/c_committee_dont_want_to_fix_rangebased_for_loop/" target="_blank" rel="noopener noreferrer">生命周期问题</a>，10 年未修复。使用时应特别注意。</p><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><ul><li><code>&lt;queue&gt;</code>： <ul><li>优先队列：<code>priority_queue&lt;T, vector&lt;T&gt;, std::greater&lt;T&gt;&gt;</code><ul><li>自定义比较函数；重载类的 <code>&lt;</code> operator</li></ul></li></ul></li></ul><h3 id="值类型" tabindex="-1"><a class="header-anchor" href="#值类型"><span>值类型</span></a></h3><blockquote><p>&gt;= C++11</p></blockquote>`,15)),i("p",null,[s[64]||(s[64]=a("C++11 引入了更多的值类型，这其实也是所有权的体现。在左值和右值中间添加了 xvalue（将亡值），也就是带有所有权的右值（右值引用）")),t(d,null,{default:l(()=>s[63]||(s[63]=[a("（名词真的好多！）")])),_:1}),s[65]||(s[65]=a("至于其他的 glvalue, prvalue 都是集合的相加相减，没啥意思。总之只要知道 xvalue 是啥就行。"))]),s[89]||(s[89]=h(`<p>std::move() 可以将值转换为 xvalue，实际上相当于 <code>static_cast&lt;T &amp;&amp;&gt;()</code>。</p><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><blockquote><p>&gt;= C++11</p></blockquote><ul><li><code>static_cast</code>：不进行安全检查</li><li><code>const_cast</code>：设置或移除指针/引用所指对象的 const</li><li><code>dynamic_cast</code>：进行安全检查，用于指针/引用转换，可以用于运行时父类转子类 <ul><li>有些情况下 <code>dynamic_cast</code> 的性能可以接近 <code>static_cast</code>。但大多数时候有额外开销。</li></ul></li><li><code>reinterpret_cast</code>：无视类型，进行最底层的比特位复制</li></ul><h3 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针"><span>智能指针</span></a></h3><blockquote><p>&gt;= C++11, &lt;memory&gt;</p></blockquote><ul><li><code>shared_ptr</code> 允许多个指针指向同一个对象，引用计数 <ul><li>(C++14) 使用 <code>std::make_shared&lt;Type&gt;()</code> 构建</li><li><code>reset()</code> 不带参数则释放（== release()）</li></ul></li><li><code>unique_ptr</code> 独占所指向的对象</li><li><code>weak_ptr</code> <em>shared_ptr</em> 的弱引用，不影响其计数器</li></ul><h3 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串"><span>多行字符串</span></a></h3><p>Raw string: <code>R&quot;&quot;(some\\text)&quot;&quot;</code></p><h3 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h3><ul><li>构造函数：<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 默认构造函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 拷贝构造函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, data);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 移动构造函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyClass</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">noexcept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nullptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将资源置为空，避免释放时出错</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>protected：指能被子类访问，不能被外部访问的成员。</li><li>virtual：每个拥有虚对象的<strong>类本身</strong>都会有一个虚表，用来查询任何子类的某一特定重载。所以虚表对类是 static 的。 <ul><li>虚函数查找表发生在运行时。</li><li>调用虚函数所需的代价基本上和非虚函数效率一样，开销很小。</li><li>其他的可以看<a href="https://jacktang816.github.io/post/virtualfunction/" target="_blank" rel="noopener noreferrer">这篇文章</a>。</li></ul></li><li>C++ 允许多继承，菱形继承需要将中间类声明为虚类。（正常情况下不要使用菱形继承！）</li><li>非虚函数定义在类内自动内联。类外则需要显式 inline。</li><li>C++ 实现 interface：纯虚类，所有函数都是纯虚函数。</li><li>C++ 提倡继承代替组合。因为空类还会有 1byte 的空间，组合的话很亏。</li><li>私有继承不允许多态转换。</li></ul><h3 id="option" tabindex="-1"><a class="header-anchor" href="#option"><span>option</span></a></h3><p>(C++17) C++ 中有 <code>std::optional&lt;T&gt;</code> 起到类似 rust 中 Option 的作用。</p><ul><li>一些函数：<code>has_value() -&gt; bool</code>, <code>value() -&gt; T</code>, <code>value_or(T) -&gt; T</code></li></ul><h3 id="template" tabindex="-1"><a class="header-anchor" href="#template"><span>template</span></a></h3><p>前往 <a href="#external">external 1.</a>，讲得非常不错。</p><h3 id="内置模版比较函数" tabindex="-1"><a class="header-anchor" href="#内置模版比较函数"><span>内置模版比较函数</span></a></h3><p>算法竞赛常用的，例如优先队列会用到。签名是 class Compare。主要有：<code>std::greater</code>, <code>std::greater_equal</code>, <code>std::equal_to</code>, <code>std::not_equal_to</code>，再加上两个 greater 改成 less 的。</p><h3 id="variant" tabindex="-1"><a class="header-anchor" href="#variant"><span>variant</span></a></h3><p>（C++17）</p><p><a href="#external">external 14.</a> 是对 variant 的深度评测，推荐阅读。</p><p>variant 本意是封装的 <code>union</code>，可以当成错误处理的一种实现，类似 rust <code>Result</code>. C++23 请使用 <code>std::expected</code>.</p><p>获取值可以用 <code>std::get</code> + try catch，可以用 <code>std::get_if</code>，也可用 <a href="https://en.cppreference.com/w/cpp/utility/variant/visit" target="_blank" rel="noopener noreferrer"><code>std::visit</code></a>:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::variant</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(v);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (std::bad_variant_access </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(v);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pval </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">v))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pval;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::cerr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;failed to get value!&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">visit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">decay_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">decltype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arg)&gt;;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> constexpr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (std::is_same_v</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;int with value &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> arg </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> constexpr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (std::is_same_v</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T, string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;errlog: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> arg </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="assert" tabindex="-1"><a class="header-anchor" href="#assert"><span>assert</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static_assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;error message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // compile time</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cassert&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;error message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // runtime</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于 assert_eq 这种 std 就没有了，需要自己写宏或者引入 crpcut.hpp、GoogleTest 等框架。</p><h3 id="explicit" tabindex="-1"><a class="header-anchor" href="#explicit"><span>explicit</span></a></h3><p>explicit 可以防止隐式转换；修饰构造函数时，还可以防止复制初始化。rust 人非常喜欢这个东西。</p><h3 id="if-constexpr" tabindex="-1"><a class="header-anchor" href="#if-constexpr"><span>if constexpr</span></a></h3><p>编译期剪枝。可以用于类型判断。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;type_traits&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typename</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> constexpr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (std::is_same_v</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static_assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ranges" tabindex="-1"><a class="header-anchor" href="#ranges"><span>ranges</span></a></h3><blockquote><p>&gt;= C++20</p></blockquote><p>ranges 是 C++ 在函数式方面的努力，C++20 的四大特性之一。简单的说就是把各类操作变换 chain 在一起，简化写法，不再需要 <code>(c.begin(), c.end(), ...)</code>。</p><p>example 可以看 <a href="https://en.cppreference.com/w/cpp/ranges" target="_blank" rel="noopener noreferrer">cpp reference</a>。</p>`,36)),i("ul",null,[s[70]||(s[70]=i("li",null,[i("code",null,"std::views"),a(" 和 "),i("code",null,"std::ranges::views"),a(" 是等价的。")],-1)),s[71]||(s[71]=i("li",null,[i("code",null,"std::ranges::for_each(Range, func)"),a(" 不能用 "),i("code",null,"|"),a(" chain，我不明白为什么要这么设计，有点脑残。")],-1)),s[72]||(s[72]=i("li",null,[i("code",null,"std::views::transform"),a(" 就是 map。")],-1)),i("li",null,[s[68]||(s[68]=a("直到 C++23 都没有一个可 chain 的 reduce (")),i("a",m,[s[66]||(s[66]=a("std")),t(o,{icon:"ranges"}),s[67]||(s[67]=a("fold_left"))]),s[69]||(s[69]=a(")"))]),s[73]||(s[73]=h('<li><code>std::views::zip</code> 和 <code>std::views::enumerate</code> 返回结果都是 tuple，要用 <code>std::get&lt;0&gt;(tuple)</code> 取值。</li><li>遍历 zip 时必须用 <code>auto</code>，不能用 <code>auto &amp;</code>：<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [a, b] : std::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ranges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">views</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">zip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(range_a, range_b)) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li>',2))]),s[90]||(s[90]=h('<h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span><a href="https://www.runoob.com/w3cnote/c-volatile-keyword.html" target="_blank" rel="noopener noreferrer">volatile</a></span></a></h2><p>表示某个变量可能随时变化，不要优化此变量的操作。</p><h2 id="程序计时" tabindex="-1"><a class="header-anchor" href="#程序计时"><span>程序计时</span></a></h2><p>程序计时可以用于分析代码效率。<a href="https://stackoverflow.com/questions/12883493/timing-the-execution-of-statements-c" target="_blank" rel="noopener noreferrer">代码参考</a> <span class="heimu" title="你知道的太多了">大佬能直接看汇编分析，但是太复杂还得 benchmark</span></p><h2 id="其他注意点" tabindex="-1"><a class="header-anchor" href="#其他注意点"><span>其他注意点</span></a></h2><ul><li>C++ 的错误处理并没有一个除 0 的标准错误，因此自己处理时需要 if 判断并 throw.</li><li>被 C++20 的 <code>std::ranges::remove_if()</code> 坑过（可能当时编译器实现有 bug(?)）</li><li>或许很难注意到的一些 <a href="#%E5%B8%B8%E8%A7%81%E5%90%8D%E8%AF%8D">UB</a>：有符号整数的溢出是 UB，控制流到达返回值不为 void 的函数的末尾，<s>还有一些操作裸指针的</s> <a href="https://zhuanlan.zhihu.com/p/391088391" target="_blank" rel="noopener noreferrer">source</a></li></ul><h2 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此处 Qt 部分版本代码为 Qt4-5，不保证能正常迁移至 Qt6;</p><p>以下内容并不是 Qt 基础的教程，缺乏目的性和针对性</p></div><h3 id="基本介绍-官网" tabindex="-1"><a class="header-anchor" href="#基本介绍-官网"><span>基本介绍 --&gt; <a href="https://www.qt.io/" target="_blank" rel="noopener noreferrer">官网</a></span></a></h3><p>Qt 是一个成熟的跨平台，<s>跨语言</s>的 GUI 框架（不建议再使用 MFC 等等了）。我用 C++ 做的最早的 GUI 应用就是用 Qt 写的。对于 C++ + GUI 需求，Qt 是比较简单快速的选择。</p><ul><li>它封装了很多窗口与控件类，可以轻松使用而并不需要深入了解其内部实现与原理 <em><s>（实际上它几乎封装了一切）</s></em></li><li>它支持可视化构建窗口界面 (Qt Designer)，极大幅度减小代码量</li><li><s>它提供的软件打包方式比较人性化</s>（有坑）</li></ul><h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1"><span>安装</span></a></h3><blockquote><p>推荐使用 CLI，快、用时短、空间占用小、无需登录</p></blockquote><ul><li>CLI: <a href="https://aqtinstall.readthedocs.io/en/latest/getting_started.html" target="_blank" rel="noopener noreferrer">aqtinstall</a><ol><li><code>scoop install aqtinstall</code></li><li><code>aqt install-qt --outputdir D:\\software\\QtSDK windows desktop 6.6.0 win64_msvc2019_64</code>（我的示例，别抄，去读文档；安装大小是 1.46G，已经很不错了）</li></ol></li><li>官方 GUI: <a href="https://www.qt.io/zh-cn/download" target="_blank" rel="noopener noreferrer">qt.io</a>。 <ul><li>需要在 msvc/mingw 中选择其一(?)。如果不想装重量级的 Visual Studio (提供 msvc)，你可以尝试安装 mingw 的 sdk，占用空间小点，不过配置会稍微麻烦一点。</li></ul></li></ul><h3 id="第三方" tabindex="-1"><a class="header-anchor" href="#第三方"><span>第三方</span></a></h3><p>一些可能会用到的第三方组件 / 框架。</p><ul><li><a href="https://github.com/ColinDuquesnoy/QDarkStyleSheet" target="_blank" rel="noopener noreferrer">QDarkStyleSheet</a>：窗口深色模式，参考<a href="#dark-mode">深色模式</a>。</li><li><a href="https://github.com/zhuzichu520/FluentUI" target="_blank" rel="noopener noreferrer">FluentUI</a>：提供一套 UI 框架。</li></ul><h3 id="dark-mode" tabindex="-1"><a class="header-anchor" href="#dark-mode"><span>dark mode</span></a></h3><p>深色模式支持是很重要的。</p><p>你可以很简单地<a href="https://forum.qt.io/topic/101391/windows-10-dark-theme/4" target="_blank" rel="noopener noreferrer">添加深色模式</a>（高对比度）；若你想使用更为柔和一点的颜色，可以使用第三方的<a href="https://github.com/ColinDuquesnoy/QDarkStyleSheet" target="_blank" rel="noopener noreferrer">QDarkStyleSheet</a>。</p><h3 id="唤起最小化的窗口" tabindex="-1"><a class="header-anchor" href="#唤起最小化的窗口"><span>唤起最小化的窗口</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showNormal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">raise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">activateWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre></div><h3 id="关于控件组" tabindex="-1"><a class="header-anchor" href="#关于控件组"><span>关于控件组</span></a></h3><p>Qt 官方提供了 QButtonGroup 类。该类提供了对 QAbstractButton（即记忆化选择按钮）的分组。将按钮添加到 QButtonGroup 对象中，点击某一按钮时，组中其他按钮会被自动取消 toggle（已点击状态）。你也可以为组中每个按钮赋予数字 id，通过 id 对控件进行调用。</p><p>当然，QButtonGroup 类的使用范围是具有很大局限性的。若想对其他不同类型的控件新建分组该怎么做呢？</p><p>答：使用 <code>QVector&lt;QWidget*&gt;</code>。由于部分常用控件(QPushButton,QLable 等)继承自 QWidget，因此通过 QWidget 类型容器对组内控件进行统一操作，例如需要隐藏主窗口内的所有控件，只需 <code>for (auto &amp;i : elements) i-&gt;hide();</code> 即可。</p><p><em>对于 hide() 与 show() 操作来说，更简便的方法是将所有控件加入新的 widget，然后将该 widget 的父对象设为主窗口。之后的隐藏与显示只需对该 widget 操作即可。</em></p><h3 id="关于资源文件" tabindex="-1"><a class="header-anchor" href="#关于资源文件"><span>关于资源文件</span></a></h3><p>Qt 提供方便的资源文件引用。在项目中通过 <code>Add New...</code>新建 Qt Resource File<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> 并添加文件到 <code>.qrc</code> 内。Qt 在构建时会将添加的文件以二进制形式存放在生成的 exe 文件中。无需将资源文件放入打包目录，程序将会从 exe 中引用资源。</p><p>但是请注意，<strong>加入 .qrc 中的资源文件是只读的。有修改需求的文件请勿使用此方法。*</strong>（使用相对路径）*</p><h3 id="添加图标与版本信息" tabindex="-1"><a class="header-anchor" href="#添加图标与版本信息"><span>添加图标与版本信息</span></a></h3><details class="hint-container details"><summary>使用 qmake，已过时</summary><p>图标：在项目目录下放入 .ico 图标（<a href="https://www.aconvert.com/cn/icon/" target="_blank" rel="noopener noreferrer">在线转 ico</a>），在项目 .pro 文件中加入 <code>RC_ICONS = xxx.ico</code> 即可。所有该项目下的子窗口都会自动使用该图标。注意仅允许 ico 格式图像。</p><p>版本信息：在项目 .pro 文件中加入 <code>VERSION = x.x.x</code> 即可。</p></details><ol><li>新建 <code>xxx.rc</code>，内容为 <code>IDI_ICON1 ICON DISCARDABLE &quot;logo.ico&quot;</code> （定位到你的 ico 图标）</li><li>（使用 <a href="#xmake">xmake</a>）将 <code>xxx.rc</code> 加入 xmake.lua：<code>add_files(static/xxx.rc)</code></li></ol><h3 id="打包" tabindex="-1"><a class="header-anchor" href="#打包"><span>打包</span></a></h3><p>Qt 拥有人性化的打包服务。复制 release 输出目录中的 exe 文件到任意目标目录，在目录下使用 <code>windeployqt xxx.exe</code> 命令即可完成打包（windeployqt 需要在环境变量内，否则使用绝对位置）。</p><p>但是到了 Qt6，情况就完全不一样了。。Qt6 的打包不管使用 <code>windeployqt</code> 或 <code>windeployqt6</code> 打包后，程序都无法运行。重装 SDK 后也是如此。首先，使用 <code>windeployqt</code> 会缺失 <code>Qt6Core.dll</code>, <code>Qt6Gui.dll</code>, <code>Qt6Widgets.dll</code> 这老三样。其次，手动复制这三样后，测试还会出现 bug：</p>',36)),t(g,{alt:"bug",src:"/images/coding/cpp/windeployqt_bug.png",scale:"50%"}),s[91]||(s[91]=h('<p>解法是将 Qt SDK 目录下的 <code>plugins</code> 文件夹复制到打包的 exe 目录下<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>。。</p><h4 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h4><p>这样打包出来的程序体积还能<strong>进一步缩小</strong>。运行 exe 后，全选目录下文件并删除，跳过已被打开的所有文件，并递归地对每个文件夹进行同样的操作。这样能够移除不必要的运行库从而<mark>大幅</mark>降低发布包的大小。</p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h4><p>打包之后需要测试有没有丢运行库。换用另一个环境测试也太麻烦了点，而傻逼 windows GUI 也把环境变量藏得实在是太好，徒增了许多麻烦。其实只要在命令行中临时删除环境变量，再运行即可：</p>',5)),t(A,{id:"955",data:[]}),s[92]||(s[92]=h(`<h3 id="全局快捷键" tabindex="-1"><a class="header-anchor" href="#全局快捷键"><span>全局快捷键</span></a></h3><p><a href="https://blog.csdn.net/scueee/article/details/108541574" target="_blank" rel="noopener noreferrer">参考此文章</a>。<em>如果要在 Qt6 中使用，需要把 <code>virtual bool nativeEventFilter</code> 的最后一个参数由 <code>long*</code> 改为 <code>qintptr*</code>.</em></p><blockquote><p>怎么说，这几乎是我在几乎全网搜到的唯一可用的全局快捷键代码<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>。。而且由于调用了 windows api，因此只能在目标为 windows 上的 Qt 使用。linux 还需要看看 Github <a href="https://github.com/Skycoder42/QHotkey" target="_blank" rel="noopener noreferrer">QHotKey</a>。</p></blockquote><h3 id="按键事件" tabindex="-1"><a class="header-anchor" href="#按键事件"><span>按键事件</span></a></h3><p>Qt6 提供了 <em>QShortCut</em>，大大简化了<mark>非全局</mark>按键事件的处理。只需要创建一个 <em>QShortCut</em> 对象，connect 即可。</p><h3 id="json-处理" tabindex="-1"><a class="header-anchor" href="#json-处理"><span>JSON 处理</span></a></h3><blockquote><p>根据 <a href="#%E6%BD%9C%E4%BC%8F%E7%9F%A5%E8%AF%86">benchmark</a>，QJson 是 JSON 库中占用内存最小的。（某个测试项目）</p></blockquote><h4 id="读取" tabindex="-1"><a class="header-anchor" href="#读取"><span>读取</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QFile</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a.json&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(QIODevice::ReadOnly)){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    qDebug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;open file failed.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QByteArray</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QJsonParseError jError;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QJsonDocument jDoc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> QJsonDocument::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fromJson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">jError);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">jError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> !=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> QJsonParseError::NoError){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    qDebug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;read json error.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QJsonObject rootjsonobj </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> jDoc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时<code>rootjsonobj</code>即为读入的 QJsonObject 对象（理解为 python 中的字典对象）。</p><p>通过 <code>rootjsonobj[KEY]</code> 访问得到一个 QJsonValue，可以调用 <code>toObject()</code> / <code>toString()</code> 等函数将之转换为对应类型。</p><h4 id="写入" tabindex="-1"><a class="header-anchor" href="#写入"><span>写入</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QJsonDocument</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> jDoc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">rootjsonobj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QFile</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b.json&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(QIODevice::Truncate </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> QIODevice::WriteOnly)){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    qDebug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;write json error.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QByteArray</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">jDoc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toJson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="潜伏知识" tabindex="-1"><a class="header-anchor" href="#潜伏知识"><span>潜伏知识</span></a></h2><ol><li>C++ 开源 json 库性能好的有 simdjson 和 sonic；<a href="https://github.com/miloyip/nativejson-benchmark" target="_blank" rel="noopener noreferrer">benchmark</a>, but out of date</li></ol><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="noopener noreferrer">C++ Template 进阶指南</a></li><li><a href="https://www.bilibili.com/video/BV1et4y1D796/" target="_blank" rel="noopener noreferrer">2020 年 C++语言律师 等级考试 参考答案</a></li><li><a href="https://www.zhihu.com/question/22853451/answer/1847571322" target="_blank" rel="noopener noreferrer">为什么看到这么多人不推荐 C++？</a></li><li><a href="https://kristoff.it/blog/zig-new-relationship-llvm/" target="_blank" rel="noopener noreferrer">Zig&#39;s New Relationship with LLVM</a></li><li><a href="https://xr1s.me/2023/08/13/cxx-user-defined-range-adaptor/" target="_blank" rel="noopener noreferrer">C++ 用户定义 Ranges 算子</a></li><li>C++23 特性总结 <a href="https://zhuanlan.zhihu.com/p/562383157" target="_blank" rel="noopener noreferrer">上</a> | <a href="https://zhuanlan.zhihu.com/p/562383556" target="_blank" rel="noopener noreferrer">下</a>，可以学到很多</li><li><a href="https://zhuanlan.zhihu.com/p/642214693" target="_blank" rel="noopener noreferrer">C++ 移动语义</a></li><li><a href="https://zhuanlan.zhihu.com/p/25148592" target="_blank" rel="noopener noreferrer">[Brief Talk] <code>auto</code>, <code>auto&amp;</code>, <code>const auto&amp;</code> 以及其它形式的 auto 变种在 for-range loop 的选择</a></li><li><a href="https://zhuanlan.zhihu.com/p/391088391" target="_blank" rel="noopener noreferrer">浅谈 C++ Undefined Behavior</a></li><li><a href="https://zhuanlan.zhihu.com/p/380982475" target="_blank" rel="noopener noreferrer">ELF 格式的 Symbol 及 C++ 的 inline 关键字</a></li><li><a href="https://simontoth.substack.com/archive" target="_blank" rel="noopener noreferrer">Daily bit(e) of C++</a></li><li><a href="https://tulach.cc/writing-gui-apps-for-windows-is-painful/" target="_blank" rel="noopener noreferrer">Writing GUI apps for Windows is painful</a></li><li><a href="https://hackingcpp.com/" target="_blank" rel="noopener noreferrer">hackingcpp</a>：提供语法的简洁 cheatsheet。</li><li><a href="https://ykiko.me/zh-cn/articles/645810896/" target="_blank" rel="noopener noreferrer">std::variant 很难用！</a></li><li><a href="https://github.com/Qihoo360/safe-rules/blob/main/cpp-ub-list.md" target="_blank" rel="noopener noreferrer">附录：C++ 未定义行为成因列表</a></li><li><a href="https://travisdowns.github.io/blog/2019/08/26/vector-inc.html" target="_blank" rel="noopener noreferrer">Incrementing Vectors</a> 探讨了 <code>vector&lt;uint8_t&gt;</code> 存在的问题。</li></ol><p>books:</p><ol><li><a href="https://github.com/weaiken/ebook/blob/master/01_programming/C++/C++%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97.pdf" target="_blank" rel="noopener noreferrer">C++ 性能优化指南</a></li><li><a href="https://best.openssf.org/Compiler-Hardening-Guides/Compiler-Options-Hardening-Guide-for-C-and-C++.html" target="_blank" rel="noopener noreferrer">Compiler Options Hardening Guide for C and C++</a></li></ol><hr class="footnotes-sep">`,20)),i("section",F,[i("ol",b,[s[80]||(s[80]=i("li",{id:"footnote1",class:"footnote-item"},[i("p",null,[a("例如我在嵌入式课用 vscode 写码，我需要一个 formatter 减少我的精神负担，但是由于嵌入式开发 Keil 使用自己的构建系统，因此我希望关闭 linter，否则 linter 读不出项目的结构，会满屏红色报错。 "),i("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎")])],-1)),s[81]||(s[81]=i("li",{id:"footnote2",class:"footnote-item"},[i("p",null,[i("code",null,".qrc"),a(" 文件内部是 xml 格式，理论可手搓，因此可以放心抛弃 QtCreator。 "),i("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎")])],-1)),i("li",f,[i("p",null,[s[75]||(s[75]=a("我找出这个问题")),t(r,{to:"/gossip/difficulties.html#20230507qt6-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5"},{default:l(()=>s[74]||(s[74]=[a("真的不容易")])),_:1}),s[76]||(s[76]=a("，还差点错怪 xmake。。主要是 ")),s[77]||(s[77]=i("code",null,"Plugins",-1)),s[78]||(s[78]=a(" 并不在我的环境变量中，但却能够跑起来，迷惑了我的判断。这个报错也基本上得不到信息，网上也找不到解法。 ")),s[79]||(s[79]=i("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1))])]),s[82]||(s[82]=i("li",{id:"footnote4",class:"footnote-item"},[i("p",null,[a("升级 Qt6 后我尝试寻找其他全局快捷键方法，全部失败。甚至生出了直接调 windows.h api 的心。 "),i("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎")])],-1))])])])}const x=c(y,[["render",v],["__file","Cpp.html.vue"]]),E=JSON.parse('{"path":"/coding/Cpp.html","title":"C++","lang":"zh-CN","frontmatter":{"date":"2022-06-11T00:00:00.000Z","icon":"code","category":["编程","经历"],"tag":["编程语言"],"description":"C++ ——我从未懂过 C++ 一些工具 cppinsights：显式指明代码中的隐式转换与中间变量。 godbolt：汇编分析；pastebin；不同编译器的行为分析 Quick C++ Benchmark 常见名词 UB：Undefined behavior，未定义行为，典型的有 i = i++ + ++i，一个容易被忽视的 UB 是 a[i] =...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-26T16:19:34.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/Cpp.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"C++"}],["meta",{"property":"og:description","content":"C++ ——我从未懂过 C++ 一些工具 cppinsights：显式指明代码中的隐式转换与中间变量。 godbolt：汇编分析；pastebin；不同编译器的行为分析 Quick C++ Benchmark 常见名词 UB：Undefined behavior，未定义行为，典型的有 i = i++ + ++i，一个容易被忽视的 UB 是 a[i] =..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-26T16:19:34.000Z"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:published_time","content":"2022-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-26T16:19:34.000Z"}]]},"git":{"createdTime":1651638772000,"updatedTime":1750954774000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"1421962366@qq.com","commits":82,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":18.92,"words":5676},"filePathRelative":"coding/Cpp.md","localizedDate":"2022年6月11日","excerpt":"\\n","autoDesc":true}');export{x as comp,E as data};
