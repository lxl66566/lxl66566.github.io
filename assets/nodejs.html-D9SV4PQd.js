import{_ as k,e as d,g as i,i as l,f as r,h as e,j as a,r as o,o as c}from"./app-DMhg1O5Z.js";const g={};function m(u,s){const p=o("RouteLink"),h=o("Tabs");return c(),d("div",null,[s[23]||(s[23]=i("h1",{id:"js-运行时",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#js-运行时"},[i("span",null,"JS 运行时")])],-1)),i("blockquote",null,[i("p",null,[i("em",null,[s[1]||(s[1]=e("（js/ts 语言有关请")),l(p,{to:"/coding/tsjs.html"},{default:a(()=>s[0]||(s[0]=[e("跳转 JavaScript/TypeScript")])),_:1}),s[2]||(s[2]=e("）"))])])]),s[24]||(s[24]=i("p",null,[e("现在也出现了很多新的 js/ts 集成开发环境（你们 Rust 人…），如 "),i("s",null,[i("a",{href:"https://swc.rs/",target:"_blank",rel:"noopener noreferrer"},"swc")]),e("（swc 是底层，不要直接用它）, "),i("a",{href:"https://bun.sh/",target:"_blank",rel:"noopener noreferrer"},"bun"),e(", "),i("a",{href:"https://deno.com/",target:"_blank",rel:"noopener noreferrer"},"deno"),e(" 等。这些新 runtime 对 TypeScript 的支持都非常好。")],-1)),l(h,{id:"11",data:[{id:"node.js"},{id:"bun"},{id:"deno"}]},{title0:a(({value:n,isActive:t})=>s[3]||(s[3]=[e("node.js")])),title1:a(({value:n,isActive:t})=>s[4]||(s[4]=[e("bun")])),title2:a(({value:n,isActive:t})=>s[5]||(s[5]=[e("deno")])),tab0:a(({value:n,isActive:t})=>s[6]||(s[6]=[i("p",null,[e("Node.js 是 js 运行时 + npm 包管理 + corepack，前端开发"),i("strong",null,"必装"),e("。毕竟公司的运行时用的一定是最老牌最稳定的 Node.js。")],-1),i("p",null,"Node.js 正在计划原生支持 ts，不过截至 2024 尚未实装。",-1),i("p",null,"Node.js 的原生 command 和文件系统 API 都很难用。",-1)])),tab1:a(({value:n,isActive:t})=>s[7]||(s[7]=[i("p",null,"bun 是 Rust 写的 js 运行时，自带包管理器，并且比 deno 快。",-1),i("p",null,[i("a",{href:"https://bun.sh/guides/runtime",target:"_blank",rel:"noopener noreferrer"},"bun 的一些 API 设计"),e("非常对我的胃口，特别是 system command。")],-1),i("ul",null,[i("li",null,"不过跨平台差了点。我在 2023 年就尝试过 bun 了。当时刚宣布支持 windows，结果疯狂 crash，就是一坨。不过现在倒是稳定了许多，即使现在还是有很多 crash 报告。")],-1)])),tab2:a(({value:n,isActive:t})=>s[8]||(s[8]=[i("p",null,"deno 我也试用过了一下，没啥感觉。",-1)])),_:1}),s[25]||(s[25]=r(`<h2 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理"><span>包管理</span></a></h2><p>nodejs 常见的就 npm, yarn, pnpm 三件套，现在的框架文档也基本会同时给出这三个包管理器的命令。其他的 js 运行时或许有自带包管理（bun），这样统一也不错。</p><ul><li><a href="#npm">npm</a> 为 Node.js 的自带官方包管理器，挺难用的，安装又慢，进度条又假。当然由于 nodejs 自带，普及率非常广。</li><li>yarn 在早期比 npm 强，卖点是可复现性。然而现在优势<a href="https://zhuanlan.zhihu.com/p/27449990" target="_blank" rel="noopener noreferrer">貌似不大</a>。</li><li><a href="#pnpm">pnpm</a> 使用硬链接，一块硬盘上同一个依赖不会被复制多次，在节省空间上具有很大优势。安装速度也非常快。但普及度还是略逊一筹（可能难以找到非常规问题解法），并且老项目兼容性会差一点。</li></ul><p>节省磁盘空间对我来说真的很加分，因此我使用 pnpm。由于其文档并不面向初心者，建议先熟悉 npm 命令后，再使用 pnpm 命令。</p><h3 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm"><span>pnpm</span></a></h3><p><a href="https://pnpm.io/zh/pnpm-cli#%E5%91%BD%E4%BB%A4%E8%A1%8C" target="_blank" rel="noopener noreferrer">用前必读</a></p><ul><li>如果直接使用 <code>pnpm i</code> 安装依赖后运行报错（而在 npm/yarn 上表现良好），请使用 <code>pnpm i --shamefully-hoist</code> 安装依赖！<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></li><li><code>npm init ...</code> == <code>pnpm create ...</code></li></ul><h3 id="npm" tabindex="-1"><a class="header-anchor" href="#npm"><span>npm</span></a></h3><p>我已不再使用 npm。npm 比起其他包管理器有太多不足了，除非公司强制使用，否则我不用。</p><details class="hint-container details"><summary>archive</summary><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h4><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;                 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查找包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; [option]       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --depth=0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                     # 列出全局包，不包含依赖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                             # Update all global</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uninstall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; [option]     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 卸载包及其依赖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">comman</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;                             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># npm 的脚本运行器，可以自动下载脚本并运行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://www.runoob.com/w3cnote/npm-switch-repo.html" target="_blank" rel="noopener noreferrer">镜像</a></li></ul><h4 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令"><span>其他命令</span></a></h4><ul><li><p>如果需要重装所有 <code>node_modules</code>，可在 bash 中：<code>rm -rf node_modules &amp;&amp; npm cache clear --force</code></p></li><li><p>更新依赖(<a href="https://juejin.cn/post/6844903827599015944" target="_blank" rel="noopener noreferrer">ref</a>)：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm-check</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm-check</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="关于-save" tabindex="-1"><a class="header-anchor" href="#关于-save"><span>关于 --save</span></a></h4><p>有时候会看到 <code>npm i xxx --save</code>，<code>--save</code> 是写入 <code>package.json</code> 的过程，而 npm 5 之后 install 会自动 save，不需要手动指定。一句话：<strong>不用加</strong>。</p></details><h3 id="关于-lockfile" tabindex="-1"><a class="header-anchor" href="#关于-lockfile"><span>关于 lockfile</span></a></h3><blockquote><p>对于不同的包管理器，lockfile 的名称不同。</p></blockquote><p>在 <code>package.json</code> 的包版本信息是使用<a href="https://eminoda.github.io/2021/01/29/npm-semver-strategy/" target="_blank" rel="noopener noreferrer">版本修饰符</a>，允许上下浮动的。并且依赖、依赖的依赖……都可能不固定版本。然而版本不同就有可能导致错误，此时就需要使用 lockfile 进行精确版本的指定。</p><p>若 lockfile 不存在，install/update 时会自动生成。若存在且 lockfile 版本符合 <code>package.json</code> 版本，则从 lockfile 中安装依赖。若 lockfile 不兼容 <code>package.json</code>，则 pnpm/npm 会直接更新 lockfile 或报错退出（因此，强烈建议将 lockfile 添加到 git 版本控制中<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>）。</p><p>很遗憾，目前我没有找到任何方法使我能够严格依照 lockfile 进行依赖安装：在冲突时使用 <code>--frozen-lockfile</code> 参数，npm 会直接忽略之并写入 lockfile，pnpm/yarn 会报错并终止。同样的，<code>npm init -y</code> | <code>npm-collect</code> 都无法完成此任务。</p><h3 id="一些查询" tabindex="-1"><a class="header-anchor" href="#一些查询"><span>一些查询</span></a></h3><ul><li>查询包的 install size 可以使用 <a href="https://packagephobia.com/" target="_blank" rel="noopener noreferrer">Package Phobia</a>。</li><li>在前端项目中查询未使用的依赖可以用 depcheck：<code>pnpm i -g depcheck &amp;&amp; depcheck</code></li></ul><h2 id="运行时特性" tabindex="-1"><a class="header-anchor" href="#运行时特性"><span>运行时特性</span></a></h2><h3 id="输入" tabindex="-1"><a class="header-anchor" href="#输入"><span>输入</span></a></h3><p>JS/TS 有一个很大的特点，就是对于 console 输入、文件系统等实现并不是由语言本身，而是由 runtime 提供的 builtin package 完成的。因此这部分内容在不同的 runtime 上需要实现不同的代码。这其中自然就有 API 设计的优劣之分。</p>`,20)),l(h,{id:"170",data:[{id:"deno"},{id:"bun"},{id:"nodejs"}]},{title0:a(({value:n,isActive:t})=>s[9]||(s[9]=[e("deno")])),title1:a(({value:n,isActive:t})=>s[10]||(s[10]=[e("bun")])),title2:a(({value:n,isActive:t})=>s[11]||(s[11]=[e("nodejs")])),tab0:a(({value:n,isActive:t})=>s[12]||(s[12]=[i("p",null,"deno 支持 prompt API：",-1),i("div",{class:"language-ts line-numbers-mode","data-highlighter":"shiki","data-ext":"ts",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"alert"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"Please acknowledge the message."'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"); "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 相当于带消息的 pause")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"confirm"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"Do you want to proceed?"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"); "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// yN 选择器")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"prompt"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"Please enter your name:"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"); "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// input")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,"但是 prompt API 有一个巨大的问题：无法不带 prompt。这是例子：",-1),i("div",{class:"language-ts line-numbers-mode","data-highlighter":"shiki","data-ext":"ts",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"prompt"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"(); "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},'// 会在用户输入前打印 "Prompt "')]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"prompt"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'""'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"); "),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},'// 会在用户输入前打印 " "')])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,"prompt api 总是会想要打印一点东西，我是真的没绷住。",-1)])),tab1:a(({value:n,isActive:t})=>s[13]||(s[13]=[i("p",null,"bun 官方提供了一个示例：",-1),i("div",{class:"language-ts line-numbers-mode","data-highlighter":"shiki","data-ext":"ts",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"for"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," await"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ("),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"const"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#E5C07B"}}," line"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," of"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," console"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},") {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,[e("但是问题是我并不知道如何仅读取一行输入。如果每次都要在 for 循环里读入然后 break 也太傻了。然而翻了 "),i("a",{href:"https://stackoverflow.com/questions/78247715/",target:"_blank",rel:"noopener noreferrer"},"SO 的回答"),e(" 和 "),i("a",{href:"https://github.com/oven-sh/bun/issues/7541",target:"_blank",rel:"noopener noreferrer"},"关联的 issue"),e("，并没有其他解法，还是 break 大法好。")],-1),i("p",null,"bun 也同时支持 prompt API，不过如前文 deno 所述，有一个问题。",-1)])),tab2:a(({value:n,isActive:t})=>s[14]||(s[14]=[i("p",null,[i("a",{href:"https://nodejs.org/en/learn/command-line/accept-input-from-the-command-line-in-nodejs",target:"_blank",rel:"noopener noreferrer"},"nodejs 的 api"),e(" 又臭又长，暂且不论。")],-1)])),_:1}),s[26]||(s[26]=i("h3",{id:"system-command",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#system-command"},[i("span",null,"system command")])],-1)),l(h,{id:"205",data:[{id:"bun"}]},{title0:a(({value:n,isActive:t})=>s[15]||(s[15]=[e("bun")])),tab0:a(({value:n,isActive:t})=>s[16]||(s[16]=[i("p",null,"目前的 js runtime 里，system command 我只服 bun 一个。他的语法实在是太简洁了。",-1),i("div",{class:"language-ts line-numbers-mode","data-highlighter":"shiki","data-ext":"ts",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"import"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," { "),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"$"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," } "),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"from"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "bun"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"let"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," res"),i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," ="),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," await"),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," $"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},"`ls .`"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"for"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," ("),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"const"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#E5C07B"}}," line"),i("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," of"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E5C07B"}}," res"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}},"stdout"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"toString"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"split"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"'),i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"\\n"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")) {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E5C07B"}},"  console"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"log"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"line"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},");")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[27]||(s[27]=r(`<h2 id="构建包" tabindex="-1"><a class="header-anchor" href="#构建包"><span>构建包</span></a></h2><p>如果开发了一个库，需要将其上传到 npmjs 上，这时候可以使用专门用于构建与上传的包，可以省去很多烦恼。</p><p>有许多包可以做到这件事，例如 <a href="https://github.com/unjs/unbuild" target="_blank" rel="noopener noreferrer">unbuild</a>，<a href="https://github.com/huozhi/bunchee" target="_blank" rel="noopener noreferrer">bunchee</a>和<a href="https://github.com/privatenumber/pkgroll" target="_blank" rel="noopener noreferrer">pkgroll</a>。阅读 README 后我更倾向于使用 pkgroll，虽然我都没试过。</p><h2 id="遇到的问题" tabindex="-1"><a class="header-anchor" href="#遇到的问题"><span>遇到的问题</span></a></h2><blockquote><p>时间倒序</p></blockquote><h3 id="fetch-爆炸" tabindex="-1"><a class="header-anchor" href="#fetch-爆炸"><span>fetch 爆炸</span></a></h3><p>nodejs 跑 ofetch 一直爆炸，然而我的测试脚本都是用 <code>bun xxx.ts</code> 跑的，而测试脚本运行完好。debug 许久发现是 nodejs 的 fetch 有问题 (<a href="https://t.me/withabsolutex/2234" target="_blank" rel="noopener noreferrer">src</a>)。。</p><h3 id="标准输入" tabindex="-1"><a class="header-anchor" href="#标准输入"><span>标准输入</span></a></h3><p>nodejs 想实现在 terminal 内的标准输入甚至需要对 async/await 模型有一点了解。</p><p>首先，<code>import readline from &quot;readline&quot;;</code> 的 readline 是非阻塞的。回调函数会在用户输入后才执行，但在 readline 前的代码就惨了。。</p><p>其次，<code>&quot;readline&quot;</code> 本身没有提供 Promise。因此需要这样：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> readline</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;node:readline/promises&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> rl</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> readline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createInterface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">stdin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> element</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> of</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  do_something_pre</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> answer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> rl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">question</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;?&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  do_something_after</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>才能让 <code>pre()</code> 与 <code>after()</code> 都呈现阻塞的效果。</p><p>当然，如果你可以使用 npmjs 包还可以用 <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener noreferrer">Inquirer</a>；如果不使用 nodejs 运行时也能享受到其他运行时的 prompt API 设计，没必要硬吃 nodejs 这坨屎。至于 <a href="https://t.me/withabsolutex/2047" target="_blank" rel="noopener noreferrer">prompt API 也是一坨屎</a>……那没救了。</p><h3 id="脚本调库" tabindex="-1"><a class="header-anchor" href="#脚本调库"><span>脚本调库</span></a></h3><p>有时我们可能会想在简单的脚本中调用第三方 nodejs 库。但使用包管理器后，又带来了不必要的复杂度。</p><p>当我为了调库而创建了一个项目后，首先需要填写一堆信息。当然，只是写点小脚本完全可以不填，一路回车。然后再安装需要的包。</p><p>然而，在代码中直接使用 <code>require</code> 调库会报错：</p><blockquote><p>ReferenceError: require is not defined in ES module scope, you can use import instead</p></blockquote><p>而使用 <code>import</code> 又会报：</p><blockquote><p>SyntaxError: Cannot use import statement outside a module</p></blockquote><p>在 <code>package.json</code> 中添加 <code>&quot;type&quot;: &quot;module&quot;,</code> 后，才能算是结束。</p><h3 id="神秘报错" tabindex="-1"><a class="header-anchor" href="#神秘报错"><span>神秘报错</span></a></h3><p>nodejs 出错的报错基本上是没用的，因为一般出现玄学问题是依赖包的问题而不是用户的问题（笑）。</p>`,24)),i("ol",null,[i("li",null,[s[18]||(s[18]=e("pnpm 安装 ")),l(p,{to:"/coding/bot.html"},{default:a(()=>s[17]||(s[17]=[e("koishi")])),_:1}),s[19]||(s[19]=e(" 依赖的问题，dev 的时候遇到神秘报错，而使用 npm 安装却不会报错。需要使用 ")),s[20]||(s[20]=i("code",null,"--shamefully-hoist",-1)),s[21]||(s[21]=e(" 生成与 npm 一样的扁平化目录。"))]),s[22]||(s[22]=i("li",null,[i("a",{href:"https://github.com/DIYgod/RSSHub/issues/13007",target:"_blank",rel:"noopener noreferrer"},"vuepress1 文档构建失败"),e("：webpack 与 nodejs 之间的碰撞！我甚至想到了降级 nodejs 到 LTS，但没想到的是连 LTS v18 也不行，得降到 v17......")],-1))]),s[28]||(s[28]=r(`<h3 id="安装-sharp" tabindex="-1"><a class="header-anchor" href="#安装-sharp"><span>安装 sharp</span></a></h3><p>我想使用 sharp 作为图像处理库。而直接 <code>npm i sharp</code> 会报错：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm ERR! code 1</span></span>
<span class="line"><span>npm ERR! path D:\\program\\koishi-app\\node_modules\\sharp</span></span>
<span class="line"><span>npm ERR! command failed</span></span>
<span class="line"><span>npm ERR! command C:\\WINDOWS\\system32\\cmd.exe /d /s /c (node install/libvips &amp;&amp; node install/dll-copy &amp;&amp; prebuild-install) || (node install/can-compile &amp;&amp; node-gyp rebuild &amp;&amp; node install/dll-copy)</span></span>
<span class="line"><span>npm ERR! sharp: Downloading https://github.com/lovell/sharp-libvips/releases/download/v8.14.3/libvips-8.14.3-win32-x64.tar.br</span></span>
<span class="line"><span>npm ERR! sharp: Please see https://sharp.pixelplumbing.com/install for required dependencies</span></span>
<span class="line"><span>npm ERR! sharp: Installation error: Request timed out</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试：</p><ol><li><p>更换其他 npm 源，无法解决。</p></li><li><p>使用 <code>--ignore-scripts</code> 选项，能够安装，但无法启动 koishi 服务器：</p><blockquote><p>app Error: <br> Something went wrong installing the &quot;sharp&quot; module<br> Cannot find module &#39;../build/Release/sharp-win32-x64.node&#39;</p></blockquote></li><li><p>尝试执行(<a href="https://sharp.pixelplumbing.com/install#chinese-mirror" target="_blank" rel="noopener noreferrer">ref</a>)：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sharp_binary_host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://npmmirror.com/mirrors/sharp&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sharp_libvips_binary_host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://npmmirror.com/mirrors/sharp-libvips&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>报错</p><blockquote><p>npm ERR! code ENOWORKSPACES<br> npm ERR! This command does not support workspaces.</p></blockquote></li></ol><p>难道真的山穷水尽了吗？不！再次 <code>npm i sharp</code> 后，经过漫长的等待，终于安装成功了！并且服务器也没有报错！</p><p>总之，还是挺玄学的。</p><h3 id="cors-policy" tabindex="-1"><a class="header-anchor" href="#cors-policy"><span>CORS policy</span></a></h3><p>在单文件 html 内写 js 时调试，总会遇到 CORS policy 问题，即不允许访问本地文件。解法很简单，开个 local server (!= localhost) 跑 html 就完事了。 在文件目录下 <code>python -m http.server</code>，打开浏览器访问 <code>localhost:8000</code>，点击要调试的 html 即可。<span class="heimu" title="你知道的太多了">20230603：我是铸币</span></p><p>这种方法只能避开访问 localhots 的跨域，不能避开 fetch 其他网站的跨域。如果对于确定的网站资源，可以 <em>curl</em> 到本地再引入。</p><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://javascript.plainenglish.io/npm-vs-pnpm-vs-yarn-which-package-manager-reigns-supreme-a942d17a2051" target="_blank" rel="noopener noreferrer">npm vs pnpm vs Yarn — Which Package Manager Reigns Supreme?</a></li><li><a href="https://wooyun.js.org/drops/%E5%8A%A0%E7%9B%90hash%E4%BF%9D%E5%AD%98%E5%AF%86%E7%A0%81%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F.html" target="_blank" rel="noopener noreferrer">加盐 hash 保存密码的正确方式</a></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>感谢 Asuka Minato 解答；大概是有依赖不支持 pnpm 的目录模式。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p><a href="https://t.me/withabsolutex/1216" target="_blank" rel="noopener noreferrer">惨痛教训</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,14))])}const y=k(g,[["render",m],["__file","nodejs.html.vue"]]),b=JSON.parse('{"path":"/coding/nodejs.html","title":"JS 运行时","lang":"zh-CN","frontmatter":{"date":"2023-07-24T00:00:00.000Z","icon":"brands fa-node-js","category":["编程"],"tag":["工具","前端"],"description":"JS 运行时 （js/ts 语言有关请） 现在也出现了很多新的 js/ts 集成开发环境（你们 Rust 人…），如 （swc 是底层，不要直接用它）, bun, deno 等。这些新 runtime 对 TypeScript 的支持都非常好。 包管理 nodejs 常见的就 npm, yarn, pnpm 三件套，现在的框架文档也基本会同时给出这三个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS 运行时\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-04T10:13:23.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/nodejs.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"JS 运行时"}],["meta",{"property":"og:description","content":"JS 运行时 （js/ts 语言有关请） 现在也出现了很多新的 js/ts 集成开发环境（你们 Rust 人…），如 （swc 是底层，不要直接用它）, bun, deno 等。这些新 runtime 对 TypeScript 的支持都非常好。 包管理 nodejs 常见的就 npm, yarn, pnpm 三件套，现在的框架文档也基本会同时给出这三个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-04T10:13:23.000Z"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:published_time","content":"2023-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-04T10:13:23.000Z"}]]},"git":{"createdTime":1690137964000,"updatedTime":1749032003000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"18259734087@163.com","commits":21,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":8.37,"words":2511},"filePathRelative":"coding/nodejs.md","localizedDate":"2023年7月24日","excerpt":"\\n","autoDesc":true}');export{y as comp,b as data};
