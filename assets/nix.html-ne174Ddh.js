import{_ as r,e as o,f as l,g as s,k as h,h as e,i as a,j as t,r as p,o as d}from"./app-DemZbnJB.js";const k={};function c(g,i){const n=p("RouteLink");return d(),o("div",null,[i[25]||(i[25]=l('<h1 id="安装与配置-nixos-篇" tabindex="-1"><a class="header-anchor" href="#安装与配置-nixos-篇"><span>安装与配置（NixOS 篇）</span></a></h1><p>早在去年我便说过我的下一个操作系统很有可能是 NixOS。202405 的 OS 课需要做 PPT 汇报，我的选题是包管理器杂谈，又吹了一波 nix，把我自己心吹得痒痒的。</p><p>在考试期间由于压抑的氛围和不情愿的学习，平常想做的事的欲望会被放大许多。但是我预料到 NixOS 的安装肯定会非常折磨（好预测！），所以只在 WSL 里尝尝鲜。而 WSL 终究无法发挥出 Nix 的特色。于是熬到了考完试当晚，我就开始安装 NixOS 了。</p><h2 id="nixos-安装" tabindex="-1"><a class="header-anchor" href="#nixos-安装"><span>NixOS 安装</span></a></h2><p>安装我看的是<a href="https://nixos-cn.org/tutorials/installation/Subsystem.html" target="_blank" rel="noopener noreferrer">NixOS 中文</a>。</p><p>NixOS 的安装比我想象的要折磨得多。原以为装过 Arch 的我已经无惧困难，结果输得非常彻底。。一大原因是因为没有 Archlinux 那样的顶级文档，而另一个则是群友人数确实更少，解答问题的也更少。不过这些都是后话了。</p><p>我是在还没有学习 nix 语言和特性的情况下装的系统，踩了不少坑。</p>',7)),s("p",null,[i[3]||(i[3]=e("首先，我")),a(n,{to:"/articles/linux/basic.html#%E8%B0%83%E6%95%B4%E5%A4%A7%E5%B0%8F"},{default:t(()=>i[0]||(i[0]=[e("缩了 ArchLinux 的分区大小")])),_:1}),i[4]||(i[4]=e("，踩了一次 ")),a(n,{to:"/articles/linux/problem.html#cfdisk-%E6%93%8D%E4%BD%9C%E5%88%86%E5%8C%BA"},{default:t(()=>i[1]||(i[1]=[e("cfdisk 的坑")])),_:1}),i[5]||(i[5]=e("。而后下载了 NixOS 的图形化安装程序，用 ventoy 引导启动，一切正常。然而在安装引导的分区时我发现，图形化界面没有提供 btrfs 分区，只提供 ext4。于是我停止使用图形化界面，改用里面的 konsole 终端。结果 channel update 时无法正常重启某些服务（")),i[6]||(i[6]=s("code",null,"xe-daemon.service: NewCachedXenstore error: Cannot locate xenbus dev path...",-1)),i[7]||(i[7]=e("）。我猜测这是图形界面导致的问题，于是我重新打开 arch，下载了 minimal iso，这里面还有一个")),a(n,{to:"/articles/linux/problem.html#%E4%BD%A0%E7%9A%84%E5%A4%8D%E5%88%B6%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%A4%8D%E5%88%B6"},{default:t(()=>i[2]||(i[2]=[e("好玩的小插曲")])),_:1}),i[8]||(i[8]=e("。"))]),i[26]||(i[26]=l(`<p>果然进了 minimal <s>有一种回家的感觉</s>，并且确实没有重启服务失败的问题了。一番鼓捣，总结出一些重要规律：</p><ul><li>碰到 <code>HTTP error 200 (curl error: Stream error in the HTTP/2 framing layer)</code> 不要管，后台会重试。（说到底，code 200 还报 error 是我没想到的）</li><li>如果 <code>denpendency fail to build</code>，换个源重新试。 <ul><li>如果换源后碰到同样的问题，把源换回去再试。</li></ul></li><li>安装过程中遇到 <code>core dumped</code>。。。emmm，这有点脑残了，不过换了个源又好了，可能是因为没拉到缓存，构建时 core dump？</li></ul><p>就这样，两个源交替查缺补漏，总算是 install success 了。“最终退后三步朝电脑跪拜祈求它能正常开机，至此基本安装教程完毕。”——才怪，sddm 进去后，root 和我都无法登录（保证密码正确）。于是类似 Arch 那样重走挂载流程，<code>nixos-enter</code> 进去修。</p><p>这进去一 rebuild 我就感觉不对劲，此处把报错贴出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo: PAM account management error: Authentication service cannot retrieve authentication info</span></span>
<span class="line"><span>sudo: a password is required</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>求助群友，群友说 <code>nixos-install</code> 与 <code>nixos-rebuild</code> 效果基本是一样的，让我去外面用 install 试。效果确实差不多，不过每次在 livecd install 都相当于重装，无法用内部的缓存，全部重新下载，还是有点耗时的。install success 后再次 <code>nixos-enter</code> 试，还是一样的报错，只要用到 sudo 就会炸。鼓捣了大半天，reinstall 了好几次都无法解决，另一个管理说，在 <code>nixos-enter</code> 中这是正常现象，内核的表现是不一致的。我一直把 <code>nixos-enter</code> 当 <code>arch-chroot</code> 用，没想到这玩意这么捞。</p><ul><li>日后刷到了<a href="https://blog.lzc256.com/posts/recovering-sudo-in-nixos/" target="_blank" rel="noopener noreferrer">一篇博文</a>，描述了另一个人是如何解决此问题的。我感觉这更像是 nixos 的 bug 而不是内核不一致。</li></ul><p>这回重启就正常了，也不知道是其中的哪次 install 尝试起了作用。于是我成功进入系统开始激情编辑配置。</p><h3 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span>后记</span></a></h3><p>第二天学校有实践课加上 cs2 出新图，没怎么折腾系统，尝试给电脑<a href="#%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8">装了个 nvidia 驱动</a>和其他玩意就去睡觉了。</p><p>第三天起床一开机，直接 dmesg 卡死无法切 tty。兄弟我还有课啊！于是带着去教室不听课，校园网认证还过不了，只好用手机开热点修。这次知道不能 <code>nixos-enter</code> 了，但是只能用小手机查资料，每次挂载输入一大串，用镜像输一大串，重新 install 等好久，试错成本偏高。加上我昨天配置改了很多，二分查找需要的次数也不可估量，因此还是非常慢的。（不能简单地放弃 NVIDIA 驱动，因为有 NixOS gaming 需求）</p><p>二分查错过程中我发现每次 install 并不会重新写入 EFI 分区（配置里注释了启动项，但是 grub 菜单并没有消失），因此向群友提问。群友答日常 build 和 install 是不会擦除 EFI 的，只有 gc 时会。但是我并不在系统里，<code>nixos-enter</code> 如上文所述，并不能执行 gc 指令。</p>`,12)),s("p",null,[i[10]||(i[10]=e("后来怀疑是内核原因：我换了 zen 内核，按理需要用 dkms 的 NVIDIA 驱动，然而实际用的是 NVIDIA 闭源驱动。。换回原内核又发生了 ")),a(n,{to:"/articles/linux/problem.html#efi-%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3"},{default:t(()=>i[9]||(i[9]=[e("EFI 空间不足")])),_:1}),i[11]||(i[11]=e("的惨剧，又折腾许久。等我禁用了 NVIDIA 成功开机，都过了午饭时间了。然后一开机我就去定制了一个 iso，太折磨了。"))]),i[27]||(i[27]=l('<p>下午折腾中文双拼输入法，详见<a href="#%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95">输入法</a>。</p><p>又过了一天，我想起来 NVIDIA 驱动一直没开，而此时我已经做好了万全的准备，btrfs 打了快照，grub 加了禁用 nvidia 的启动项，自制了启动盘，是时候挑战 NVIDIA 驱动了！于是我开启了显卡驱动，果然又卡 dmesg 了。把 <code>hardware.nvidia.open = false;</code> 改成 <code>true</code> 以后又好了。正当我高兴，一天后的 rebuild 又让我吸了口凉气，问题并没有解决。</p><p>这个问题一放就是两个月，总结了一点规律：</p><ul><li>X11 的锅，卡 dmesg 是 X11 起不来的表现</li><li>从 windows 重启到 nixos 时卡住的概率更高</li><li>如果不进 windows，只使用 nixos，则基本不会遇到此问题</li></ul><p>反正现在我摆烂了，看到卡 dmesg 就 sysrq 重启。</p><h2 id="学习" tabindex="-1"><a class="header-anchor" href="#学习"><span>学习</span></a></h2><p>如何学习 nix 呢？nix 没有强大的 wiki，遇到问题只能到处 google。但是也有一些好的资源。</p><ul><li><a href="https://nixos-cn.org/tutorials/installation/Subsystem.html" target="_blank" rel="noopener noreferrer">NixOS 中文</a>：安装教程与初步使用</li><li><a href="https://nixos-and-flakes.thiscute.world/zh/preface" target="_blank" rel="noopener noreferrer">NixOS 与 Flakes - thiscute</a>：进阶好书</li><li><a href="https://lantian.pub/article/modify-website/nixos-why.lantian/" target="_blank" rel="noopener noreferrer">Lan Tian @ Blog</a>：打包与高级用法</li><li><a href="https://discourse.nixos.org/c/learn/chinese/55" target="_blank" rel="noopener noreferrer">中文 discourse</a> &amp; <a href="https://t.me/nixos_zhcn" target="_blank" rel="noopener noreferrer">telegram group</a>：可能可以来问问题</li></ul>',8)),h(` - 还有些其他的：
  ::: details 课外阅读

  ::: `),i[28]||(i[28]=l(`<p>一个要点是理清 nix 的 一些事实标准，例如 flake， home manager，他们是什么，有什么用。好在那本 thiscute 的书完美解决了此问题。</p><p>还有一个学习方法是多看别人的 configuration，<s>并且大量摘抄</s>。我的配置在<a href="#%E9%85%8D%E7%BD%AE">下面</a>，还有一些：<a href="https://github.com/TsubakiDev/nixos-config" target="_blank" rel="noopener noreferrer">1</a> <a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">2</a> <a href="https://codeberg.org/shitpostalotl/nixos" target="_blank" rel="noopener noreferrer">3</a> <a href="https://github.com/wimpysworld/nix-config" target="_blank" rel="noopener noreferrer">4</a> <a href="https://github.com/jackdbd/nix-config" target="_blank" rel="noopener noreferrer">5</a> <a href="https://github.com/nmasur/dotfiles" target="_blank" rel="noopener noreferrer">6</a> <a href="https://github.com/oo-infty/nixos-configurations" target="_blank" rel="noopener noreferrer">7</a></p><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具"><span>工具</span></a></h2><ul><li><a href="https://github.com/nix-community/nix-index" target="_blank" rel="noopener noreferrer">nix-index</a>：找包位置。<strong>实际上并不好用</strong>，因为 <ol><li>需要查找的时候经常是刚安装完软件的时候，还没有 updatedb。而 nixos 的手动 updatedb 耗时极长。</li><li>默认 locate 时也会搜索路径，nix 路径又基于 hash，因此会有很多 hash 污染搜索结果。</li></ol><ul><li>感觉真不如 <code>cd /nix/store &amp;&amp; fd xxx</code>。</li></ul></li></ul><h3 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索"><span>搜索</span></a></h3><p>安装与配置中很重要的一环是学会搜索。即使 nixos 的文档比较内个，也有一些非常好用的网站用来查询所需信息。</p><ul><li><a href="https://search.nixos.org/packages" target="_blank" rel="noopener noreferrer">https://search.nixos.org/packages</a>：查找包。 <ul><li>主要也就看 Homepage 和 Source，分别对应项目 README 和 打包 nix 源码</li></ul></li><li><a href="https://search.nixos.org/options" target="_blank" rel="noopener noreferrer">https://search.nixos.org/options</a>：查找设置项</li><li><a href="https://home-manager-options.extranix.com/" target="_blank" rel="noopener noreferrer">https://home-manager-options.extranix.com/</a>：查找 home-manager 中的设置项</li><li><a href="https://noogle.dev/" target="_blank" rel="noopener noreferrer">https://noogle.dev/</a>：nix 语言学习查找</li><li><a href="https://nur.nix-community.org/" target="_blank" rel="noopener noreferrer">https://nur.nix-community.org/</a>：NUR 包</li><li><a href="https://luoxu.torus.icu/" target="_blank" rel="noopener noreferrer">Nix 落絮</a></li></ul><h3 id="其他资源" tabindex="-1"><a class="header-anchor" href="#其他资源"><span>其他资源</span></a></h3><ul><li><a href="https://xtonix.tei.su/" target="_blank" rel="noopener noreferrer">x to nix</a>：将 json，xml，yaml 配置转为 nix 配置。</li></ul><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p><a href="https://github.com/lxl66566/nixos-config" target="_blank" rel="noopener noreferrer">我的配置仓库</a></p><h3 id="linter-formatter" tabindex="-1"><a class="header-anchor" href="#linter-formatter"><span>linter / formatter</span></a></h3><p>nix 是一门图灵完备的函数式语言，写 nixos config 就是编程的过程。说到编程那肯定少不了 linter 和 formatter。而我是 all in vscode 人，我使用的插件如下：</p><ul><li><em>Nix IDE - Noortheen</em>：lsp，需要手动安装 <code>pkgs.nil</code></li><li><em>nixfmt - brettm12345</em>：formatter，需要手动安装 <code>pkgs.nixfmt-rfc-style</code></li></ul><h3 id="显卡驱动" tabindex="-1"><a class="header-anchor" href="#显卡驱动"><span>显卡驱动</span></a></h3><p>官方给出了比较详细的 NixOS 显卡驱动教程(<a href="https://nixos.wiki/wiki/Nvidia" target="_blank" rel="noopener noreferrer">NixOS Manual - Nvidia</a>)，看就完了。我认为还存在一些缺点：</p><ol><li>有些复杂，例如双显卡需要手动查总线并写入 hardware-configuration.</li><li>prime 功能有点残缺，官方给出的 example 里只有在启动时选择不同的启动项以应对外带和接电源两种情况，而不能动态调整性能模式：正常情况下应该是在游戏启动时启用显卡而在未游戏时关闭。</li></ol><p>还有我自己<a href="#%E5%90%8E%E8%AE%B0">折腾</a>后想说的注意事项：使用 <code>hardware.nvidia.open = true;</code>，使用官方内核。</p><h3 id="拼音输入法" tabindex="-1"><a class="header-anchor" href="#拼音输入法"><span>拼音输入法</span></a></h3><p>用英文有点习惯，要不是我打开博客想写论文我都想不到中文输入法没装。</p><p>我先尝试 arch 上用习惯的 fcitx5：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i18n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">defaultLocale</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;zh_CN.UTF-8&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i18n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">inputMethod</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fcitx5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  fcitx5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">addons</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> pkgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    fcitx5-chinese-addons</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    fcitx5-mozc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    fcitx5-gtk</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    fcitx5-rime</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    fcitx5-configtool</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而这并不能使用，在输入法里切到了中文键盘，打出的一直都是英文。</p><p>然后我尝试用了一下 ibus：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i18n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">defaultLocale</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;zh_CN.UTF-8&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i18n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">inputMethod</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ibus&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ibus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">engines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> pkgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ibus-engines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    rime</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    libpinyin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用倒是能用了，但是我并不清楚 ibus 如何支持双拼。而且其自定义程度也不太行，切换输入法居然不能 <code>Ctrl + Shift</code> 而需要给实际键位，因此我还是折腾 fcitx。</p><p>跑了一次 <code>fcitx5-diagnose</code>，发现 locale 里显示的不太对，怎么全都是 <code>en_US.UTF-8</code>？明明已经设了 <code>i18n.defaultLocale</code>...后续设成这样：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">defaultLocale</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;zh_CN.UTF-8&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">extraLocaleSettings</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  LANG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zh_CN.UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  LC_ALL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">defaultLocale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>莫名奇妙就好了，在输入法设置里可以找到双拼键盘，开起来就行。</p><p>ps. 根据<a href="https://t.me/nixos_zhcn/477206" target="_blank" rel="noopener noreferrer">群友描述</a>，只需要将 KDE 配置文件删除即可，与 defaultLocale 无关。</p><p>然后被 rime 党吹的有点心动，想试试 rime。刚好 ryan4yin 佬<a href="https://github.com/ryan4yin/nix-config/tree/main/overlays" target="_blank" rel="noopener noreferrer">就是 rime + 小鹤</a>，于是我便直接开抄配置。可能是 overlays 哪出了问题，rebuild 的时候并没有把数据移到 rimedata，我也百思不得其解。后来手动移过去试了一下，发现真难用啊（包括快捷键啥都不懂）。于是滚回了 fcitx5-chinese-addon。</p><p><code>fcitx5-configtool</code> 里双拼键盘下的“管理自定义词组”是坏的，点不开。我也懒得修了，把以前 archlinux 位于 <code>~/.local/share/fcitx5/pinyin/customphrase</code> 的词库搬出来，拿到 home-manager 里 source 一下就好了（需要 <a href="https://wiki.archlinux.org/title/Fcitx5#Emoji_show_abnormally_in_the_candidate_box" target="_blank" rel="noopener noreferrer">重启 fcitx5</a>：在 bash 里跑 <code>kill \`ps -A | grep fcitx5 | awk &#39;{print $1}&#39;\` &amp;&amp; fcitx5&amp;</code>），也符合 nixos 的原则。</p><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h3>`,33)),s("p",null,[i[14]||(i[14]=e("我最开始使用 ")),a(n,{to:"/articles/proxy/proxy_software.html#v2raya"},{default:t(()=>i[12]||(i[12]=[e("v2rayA")])),_:1}),i[15]||(i[15]=e(" 过渡，然后就跑到 ")),a(n,{to:"/articles/proxy/proxy_software.html#dae"},{default:t(()=>i[13]||(i[13]=[e("dae")])),_:1}),i[16]||(i[16]=e(" 了。"))]),i[29]||(i[29]=l('<h3 id="备份" tabindex="-1"><a class="header-anchor" href="#备份"><span>备份</span></a></h3><p>nix 的配置显然用 git 备份的话非常舒适。起初我以为 <code>/etc/nixos</code> 不能放 <code>.git</code> 仓库。后来发现是不允许放未提交（dirty）的仓库。再后来我知道有配置可以强制 nixos 使用 dirty 仓库：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">warn-dirty</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这下终于可以不用 copy 到其他地方备份了。但是有一点需要注意：在 rebuild 前一定记得把新增的文件 <code>git add</code> 到暂存区！！否则会报 <em>No such file or directory</em>。</p><p>至于备份加密，由于我的隐私文件并不算非常隐私，所以用的是我自己写的 <a href="https://github.com/lxl66566/git-simple-encrypt" target="_blank" rel="noopener noreferrer">git-simple-encrypt</a>，仅需一个密码即可解锁。如果你有更高的安全需求可以看看 sops-nix 或 agenix。</p><h3 id="home-manager" tabindex="-1"><a class="header-anchor" href="#home-manager"><span>home manager</span></a></h3><p>我本来是不想用 home manager 的，全写在 <code>configuration.nix</code> 里也不麻烦。但是后来还是用了：</p><ol><li>假设滚挂了，方便 reinstall（把 import 注释掉即可；否则一个 <code>configuration.nix</code> 不好拆，我也不想一个 install 下载几十 GB）</li><li>有些配置文件确实不方便统一管，例如 KDE 的某些设置等。</li></ol><p>从 <code>configuration.nix</code> 转移到 home manager 也不麻烦，<a href="#%E5%AD%A6%E4%B9%A0">thiscute</a> 有很好的教程，并且它们的条目基本是兼容的。</p><p>但是进一步定制各种配置文件就没那么简单了，因为 <a href="https://nix-community.github.io/home-manager/index.xhtml" target="_blank" rel="noopener noreferrer">home-manager 的 manual</a> 就是一坨屎！建议直接用<a href="#%E6%90%9C%E7%B4%A2">第三方的 options 搜索</a>。</p><h3 id="plasma-manager" tabindex="-1"><a class="header-anchor" href="#plasma-manager"><span><a href="https://github.com/nix-community/plasma-manager" target="_blank" rel="noopener noreferrer">plasma manager</a></span></a></h3><p>在 nixos 下，很多 kde plasma6 的设置都不能在 conf 或 home manager 中定义。例如我尝试在 <code>home.nix</code> 中使用 <code>services.random-background</code> 更换壁纸，结果开机会显示 0.5s 壁纸然后被换回 kde 默认壁纸；还有包括<a href="https://discourse.nixos.org/t/stop-screen-locking-in-plasma/15303/3" target="_blank" rel="noopener noreferrer">锁屏时间设置</a>的问题等等等等。</p><p>顾名思义，plasma manager 就是为了应对此情况出现的。它能保存的 kde 配置不算多，毕竟 kde 世界配置文件无穷无尽。但在一定程度上还是有用的。</p><h3 id="gaming" tabindex="-1"><a class="header-anchor" href="#gaming"><span>Gaming</span></a></h3><ul><li><a href="https://www.reddit.com/r/NixOS/comments/1c7csct/gaming_on_nixos/" target="_blank" rel="noopener noreferrer">Gaming on nixos : r/NixOS</a></li><li><a href="https://github.com/fufexan/nix-gaming" target="_blank" rel="noopener noreferrer">github:fufexan/nix-gaming</a>：主要是 OSU 相关</li></ul><p>Linux 上游戏还是不太行。。。cs2 fps windows 140+，在 nix 上只有 50 左右。不过据群友说，在 vulkan 着色器编译完成后游戏可以大幅提高帧率。我暂时还未尝试。</p><p>不过平常玩点轻量级游戏问题不大，galgame，启动！你的下一台电脑又何必是游戏本！扯远了。</p><p>steam 游戏都能够点击即玩，proton 还是牛逼的。一些傻逼引擎的 galgame 无法在 wine 下正常运行，此时就需要安装<a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>了。</p>',18)),s("p",null,[i[18]||(i[18]=e("nix gaming 还有过不去的一关就是性能释放。。我这台电脑")),a(n,{to:"/articles/linux/problem.html#nixos-%E8%B0%83%E6%95%B4%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F"},{default:t(()=>i[17]||(i[17]=[e("风扇总是不转，无法调整风扇转速")])),_:1}),i[19]||(i[19]=e("，有点悲惨。风扇不转想打啥游戏都不行吧，立刻降频了。大量求助后仍然未果，所以立刻开寄。"))]),i[30]||(i[30]=l(`<h3 id="虚拟机" tabindex="-1"><a class="header-anchor" href="#虚拟机"><span>虚拟机</span></a></h3><p>参考我的配置中的 <a href="https://github.com/lxl66566/nixos-config/blob/main/others/vm.nix" target="_blank" rel="noopener noreferrer"><code>others/vm.nix</code></a> 安装 qemu kvm 及其运行库。</p><p>至于镜像我在 win10 和 win11，ltsc 和 tiny 里纠结了一下，选择了 tiny 11 23H3。可以看看<a href="https://www.iplaysoft.com/tiny11.html" target="_blank" rel="noopener noreferrer">教程</a>，里面还有中文字体包，反正我来者不拒。下载从 web archive 或教程给的地址任选，反正我用了前者。</p><p>安装后，打开 <code>Virtual Machine Manager</code>，创建新虚拟机，选择下载的 iso 镜像。需要注意，如果 auto detect os 检测不到，需要在下面取消勾选 auto detect os 后自行输入 win11。反正这个 UI 逻辑是挺傻逼的。至于传文件，打开 USB 直通，我的移动硬盘可以分别在两端挂载，这样也不需要考虑太多。</p><p>感想：</p><ul><li>tiny 11 感觉也不 tiny。。。安装完占了我 17G 空间，感觉还是得 win10 吧。</li><li>libvirt 也不好用，剪贴板和文件都没有傻瓜式解决方案。</li></ul><h3 id="快照" tabindex="-1"><a class="header-anchor" href="#快照"><span>快照</span></a></h3><p>NixOS 官方的图形界面安装镜像并没有提供 btrfs 的选项，合理猜测大部分人安装都是用的 ext4 分区，因此 btrfs 的资料应该不多。况且 NixOS 本身就是一个强可复现系统，按理来说并不需要快照作为保护系统的手段。然而可复现是一回事，可复现的难易度又是一回事。<code>nixos-enter</code> 的缺陷、 minimal 镜像的折磨、外加 NVIDIA 驱动频繁崩溃，促使我用快照保护系统的安全。</p><p>在 nixos 上倒没有频繁打快照的必要，因为只要我有一个正常的快照，恢复后就可以从最新的配置文件 rebuild 回去（快照在这里起到的作用可能是 nixos-enter 的补充，使我能够使用盘里的缓存进行 rebuild），因此我选择不使用自动快照软件例如 snapper，而是手打。</p><p>nix 的根目录下都是符号链接，理论上有价值的快照理应是 nix 子卷快照而不是 root 快照。当然都打也可以。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /nix/.snapshot</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> btrfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> subvolume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> snapshot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /nix</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /nix/.snapshot/nix_20240629</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我还没有尝试过快照的恢复，等用到再更新吧。</p><p>ps. 理论上确实没必要为 <code>/nix</code> 打快照；我现在的解法是放一个 <code>minimal.nix</code> 作为崩溃的恢复，由于软件不多，重装也能快速装好。</p><h3 id="root-on-tmpfs" tabindex="-1"><a class="header-anchor" href="#root-on-tmpfs"><span>root on tmpfs</span></a></h3><p>由于大部分内容都是软链接，nixos 上能玩一个很骚的操作：把 root 挂载成 tmpfs。好处是每次重启所有东西都会被清，可以随便运行一些喜欢到处拉屎的软件。</p><p>我看的教程是<a href="https://lantian.pub/article/modify-computer/nixos-impermanence.lantian/" target="_blank" rel="noopener noreferrer">Lan Tian @ Blog NixOS 系列（四）：“无状态”操作系统</a>，结果还是踩了点坑。</p><ol><li>犯了<a href="https://nixos.wiki/wiki/Impermanence" target="_blank" rel="noopener noreferrer">官方文档中置顶标红</a>的大忌：<strong>没有设 user 密码</strong>。（之前的 defaultPassword 删掉了）于是进不去系统。快照打的是 <code>/nix</code>，但是密码在 <code>/etc/shadow</code> 并不归 <code>/nix</code> 管；也没法直接改挂载选项把原先的 <code>/</code> 挂上，因为 <code>nixos-enter</code> 进去<a href="#nixos-%E5%AE%89%E8%A3%85">无法 rebuild</a>，<code>--bootloader</code> 也是 <code>nixos-rebuild</code> 的，<code>nixos-install</code> 并没有。 <ul><li>最后还是改挂载选项重新 <code>nixos-install</code> 了，得益于使用 home-manager 把我的一大堆个人软件分开，本次 install 并没有花费太多时间。install 完至少能先进系统，再修配置，重启就结束了。</li></ul></li><li>然后发现我的 <code>/etc/nixos</code> 配置本身没有被 impermanence。。。遂从原先的 <code>/</code> 里拷贝之，加入 impermanence，rebuild 即可。</li></ol><p>教程中把 <code>/var</code> 加入 impermanence，而我更喜欢用 btrfs 子卷管理。由于直接在 <code>/var</code> 创建子卷，子卷的 parent 会指向 <code>/</code>，所以我进了一次 live cd 创建子卷，保持 <code>var</code> 子卷与 <code>root</code>、<code>home</code> 等同级，然后把东西移过去，重启后写 <code>hardware-configuration.nix</code> 然后 rebuild 就行。</p><p>之后我还尝试了其他东西，踩了一些坑：</p><ol><li>不要把 <code>/etc/shadow</code> 或 <code>/etc/passwd</code> 加入持久化。我加入以后开不了机，无法登录。</li></ol><h3 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h3><p>我一直使用 vscode，但是在 nixos 上，还是有点难用的。</p><ul><li>vscode 全自动同步过程中，有部分插件没有同步过来。</li><li>手动在 <code>home.nix</code> 里添加插件后，所有禁用的插件会被自动启用。</li><li>某些插件在非 feh 环境下无法运行；feh 环境下无法在终端使用 sudo。</li><li>无法使用 ssh 插件远程开发。</li></ul><h2 id="劝退" tabindex="-1"><a class="header-anchor" href="#劝退"><span>劝退</span></a></h2><p>最后来说说劝退。NixOS 自身的问题还是不小的：</p>`,25)),s("ul",null,[i[21]||(i[21]=s("li",null,[e("文档稀烂，缺乏条目 "),s("ul",null,[s("li",null,"google 比文档多，学习靠社区解答")])],-1)),i[22]||(i[22]=s("li",null,"社区不合，drama 不断",-1)),i[23]||(i[23]=s("li",null,"报错模糊",-1)),s("li",null,[a(n,{to:"/coding/package_manager.html#nix"},{default:t(()=>i[20]||(i[20]=[e("包管理达不到预期")])),_:1})]),i[24]||(i[24]=s("li",null,[e("nix 开发，mkshell 实在是太烂了。 "),s("ul",null,[s("li",null,"居然做不到 alias！")])],-1))]),i[31]||(i[31]=l('<p>我在使用过程中也有一些想吐槽的（其实上面就有很多）：</p><ul><li>图形化安装界面垃圾</li><li>minimal 镜像缺功能</li><li>home manager 捞</li></ul><p>我的资历尚浅，只能够发出如此感叹。如果你希望看到更多对 nixos 的评价，可以看看 <a href="#external">external 2.</a>。</p><h2 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>external</span></a></h2><ol><li><a href="https://ayats.org/blog/no-flake-utils/" target="_blank" rel="noopener noreferrer">Why you don&#39;t need flake-utils</a></li><li><a href="https://thiscute.world/posts/my-experience-of-nixos/" target="_blank" rel="noopener noreferrer">OS as Code - 我的 NixOS 使用体会 - thiscute</a></li></ol>',5))])}const u=r(k,[["render",c],["__file","nix.html.vue"]]),f=JSON.parse('{"path":"/articles/linux/nix.html","title":"安装与配置（NixOS 篇）","lang":"zh-CN","frontmatter":{"date":"2024-06-28T00:00:00.000Z","icon":"regular fa-snowflake","category":["教程"],"tag":["Linux","桌面端"],"description":"安装与配置（NixOS 篇） 早在去年我便说过我的下一个操作系统很有可能是 NixOS。202405 的 OS 课需要做 PPT 汇报，我的选题是包管理器杂谈，又吹了一波 nix，把我自己心吹得痒痒的。 在考试期间由于压抑的氛围和不情愿的学习，平常想做的事的欲望会被放大许多。但是我预料到 NixOS 的安装肯定会非常折磨（好预测！），所以只在 WSL ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安装与配置（NixOS 篇）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T16:45:11.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/articles/linux/nix.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"安装与配置（NixOS 篇）"}],["meta",{"property":"og:description","content":"安装与配置（NixOS 篇） 早在去年我便说过我的下一个操作系统很有可能是 NixOS。202405 的 OS 课需要做 PPT 汇报，我的选题是包管理器杂谈，又吹了一波 nix，把我自己心吹得痒痒的。 在考试期间由于压抑的氛围和不情愿的学习，平常想做的事的欲望会被放大许多。但是我预料到 NixOS 的安装肯定会非常折磨（好预测！），所以只在 WSL ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T16:45:11.000Z"}],["meta",{"property":"article:tag","content":"桌面端"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2024-06-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T16:45:11.000Z"}]]},"git":{"createdTime":1719567019000,"updatedTime":1733330711000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"lxl66566@gmail.com","commits":24,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":15.99,"words":4798},"filePathRelative":"articles/linux/nix.md","localizedDate":"2024年6月28日","excerpt":"\\n","autoDesc":true}');export{u as comp,f as data};
