import{_ as t,e as a,f as r,o}from"./app-BqAWojnP.js";const n={};function i(p,e){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="音频处理" tabindex="-1"><a class="header-anchor" href="#音频处理"><span>音频处理</span></a></h1><p>音频处理是编程界的几大天坑之一。</p><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h2><p>待续</p><h2 id="编码" tabindex="-1"><a class="header-anchor" href="#编码"><span>编码</span></a></h2><p>待续</p><h2 id="响度与均衡" tabindex="-1"><a class="header-anchor" href="#响度与均衡"><span>响度与均衡</span></a></h2><p><em>峰值电平</em> 并不严格等同于 <em>响度</em>：响度是人耳对声音强度的主观感知，会受到多种因素影响。</p><p>ITU-R BS.1770-4 (2015) 定义了 LUFS 作为响度单位。LUFS 综合考虑了电信号强度与人类感知，已经得到了广泛的使用。</p><h3 id="ebu-r-128" tabindex="-1"><a class="header-anchor" href="#ebu-r-128"><span>EBU R.128</span></a></h3><p>EBU R.128 是 EBU (European Broadcasting Union) 提出的关于响度标准化的<strong>建议</strong>和一套<strong>测量方法</strong>。其一般实现支持测量音频信息片段或音频流的 LUFS。</p><p>EBU R.128 本身并不具备响度标准化的能力；一般的响度标准化会用 EBU R.128 测出 LUFS 后，为音频叠加一个<strong>全局增益</strong>使其达到 target LUFS。经过我的一些原型验证，这样的处理具有较为显著的缺点：</p><ul><li><a href="https://github.com/lxl66566/Loudness-Normalization-tauri-app" target="_blank" rel="noopener noreferrer">Loudness-Normalization-tauri-app</a> 是<strong>流式场景</strong>下的响度标准化应用。在人声占据主导地位的场合下，人声的第一个字会爆音，因为基于之前的非人声音频流计算出的增益过高。</li><li><a href="https://github.com/lxl66566/audio-loudness-batch-normalize" target="_blank" rel="noopener noreferrer">audio-loudness-batch-normalize</a> 是<strong>音频片段</strong>下的响度标准化应用。在片段上应用时不会出现爆音问题，在一定程度上可以改善用户体验；但是由于简单的全局增益不会改变动态范围（即高音量与低音量之间的差值），这并不能使人声更加清晰可辨，没有达到我做响度均衡的期望。</li></ul><p>对于长音频片段来说，<strong>分段增益</strong>可能可以改善音频片段的响度标准化体验。分段增益的切分点较为关键，应该尽可能避免在高音量时切分导致响度割裂。继续改进，我们可以将分段的增益进行平滑处理，使其成为连续的增益曲线。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>Bilibili 在 2024 年实装了 <em>音量动态均衡</em> 功能，具体算法未公开，猜测是基于 EBU R.128 的检测，全局增益或分段增益均有可能。不过，文章 <a href="https://www.bilibili.com/opus/951243597171130370" target="_blank" rel="noopener noreferrer">ASMR 类的 UP 主和听众, 可以帮我一起向客服反馈下音量均衡爆音的问题吗?</a> 表明，正常音频的 target LUFS 并不适合 ASMR 的 target LUFS。</p><p>Youtube 会对高于 -14 LUFS 的音频进行负增益调至 -14 LUFS，对小于 -14 LUFS 的音频不作处理（来源请求）。不过也有<a href="https://gearspace.com/board/mastering-forum/1374443-chasing-after-12-lufs-youtube.html" target="_blank" rel="noopener noreferrer">一些帖子</a>认为 Youtube 的增益算法有一些问题，其调整并不严格。</p>',17)]))}const l=t(n,[["render",i],["__file","audio.html.vue"]]),c=JSON.parse('{"path":"/coding/audio.html","title":"音频处理","lang":"zh-CN","frontmatter":{"date":"2025-06-24T00:00:00.000Z","icon":"volume-high","category":["原理"],"tag":["音频"],"description":"音频处理 音频处理是编程界的几大天坑之一。 容器 待续 编码 待续 响度与均衡 峰值电平 并不严格等同于 响度：响度是人耳对声音强度的主观感知，会受到多种因素影响。 ITU-R BS.1770-4 (2015) 定义了 LUFS 作为响度单位。LUFS 综合考虑了电信号强度与人类感知，已经得到了广泛的使用。 EBU R.128 EBU R.128 是 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"音频处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-24T17:22:31.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/coding/audio.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"音频处理"}],["meta",{"property":"og:description","content":"音频处理 音频处理是编程界的几大天坑之一。 容器 待续 编码 待续 响度与均衡 峰值电平 并不严格等同于 响度：响度是人耳对声音强度的主观感知，会受到多种因素影响。 ITU-R BS.1770-4 (2015) 定义了 LUFS 作为响度单位。LUFS 综合考虑了电信号强度与人类感知，已经得到了广泛的使用。 EBU R.128 EBU R.128 是 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-24T17:22:31.000Z"}],["meta",{"property":"article:tag","content":"音频"}],["meta",{"property":"article:published_time","content":"2025-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-24T17:22:31.000Z"}]]},"git":{"createdTime":1750785751000,"updatedTime":1750785751000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"lxl66566@gmail.com","commits":1,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":2.31,"words":694},"filePathRelative":"coding/audio.md","localizedDate":"2025年6月24日","excerpt":"\\n","autoDesc":true}');export{l as comp,c as data};
