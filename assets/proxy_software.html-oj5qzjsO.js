import{_ as h,e as p,f as l,i as o,j as e,r as d,o as k,g as i,h as s}from"./app-mdj3OEFk.js";const c={};function g(y,a){const r=d("Tabs");return k(),p("div",null,[a[4]||(a[4]=l('<h1 id="代理客户端选择" tabindex="-1"><a class="header-anchor" href="#代理客户端选择"><span>代理客户端选择</span></a></h1><p>有关于各代理客户端的性能 benchmark，请看<a href="https://docs.google.com/spreadsheets/d/1UaWU6nNho7edBNjNqC8dfGXLlW0-cm84MM7sH6Gp7UE/edit?pli=1&amp;gid=1965963111#gid=1965963111" target="_blank" rel="noopener noreferrer">这里</a>。</p><h2 id="clash-系" tabindex="-1"><a class="header-anchor" href="#clash-系"><span>Clash 系</span></a></h2><blockquote><p>20231102-20231103 Clash 系几乎全部删库跑路。虽然也有一些 fork 版本接手就是了。<br> 不过我不推荐使用，除非你用的是只提供 clash 配置的机场。</p></blockquote><details class="hint-container details"><summary>详情</summary><h3 id="clash-verge" tabindex="-1"><a class="header-anchor" href="#clash-verge"><span><a href="https://github.com/zzzgydi/clash-verge" target="_blank" rel="noopener noreferrer">Clash Verge</a></span></a></h3><p>开源跨平台 Clash 客户端，rust + tauri 使我非常放心。</p><p>相比<a href="#clash-for-windows">Clash for Windows</a>，其拥有更小的体积（66MB，vs 240MB）与开放性，图形界面不相上下，而<span class="heimu" title="你知道的太多了">对于一般使用者无关紧要的</span>功能会更少一些。</p><p>其 <em>设置热键</em> 的功能也是我非常喜欢的一点。不过由于 VPS 自建节点的原因，懒得做订阅转换，放弃了 Clash Verge 而去使用了 <a href="#v2ray">v2rayN</a>。</p><h4 id="简易教程" tabindex="-1"><a class="header-anchor" href="#简易教程"><span>简易教程</span></a></h4><p>我们可以先在设置中将其语言调成中文。</p><p>类似地，在 <em>配置</em> 中粘贴订阅链接，下载并选中，然后就可以在 <em>代理</em> 中使用节点了。记得在 <em>配置</em> 中打开 <em>系统代理</em> 选项。</p><h3 id="clash-for-windows" tabindex="-1"><a class="header-anchor" href="#clash-for-windows"><span>Clash for Windows</span></a></h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h4><p><em>Clash for Windows</em> 是闭源的 PC 客户端。（然而因为一个 <a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1105" target="_blank" rel="noopener noreferrer">bug</a>导致我转向了 <a href="#clash-verge">Clash Verge</a>。）</p><h4 id="下载地址" tabindex="-1"><a class="header-anchor" href="#下载地址"><span>下载地址</span></a></h4><p><a href="https://github.com/Fndroid/clash_for_windows_pkg" target="_blank" rel="noopener noreferrer">项目地址</a> | <a href="https://github.com/Fndroid/clash_for_windows_pkg/releases" target="_blank" rel="noopener noreferrer">PC 端下载地址</a> | <a href="https://wwp.lanzout.com/ixncj0a1k28h" target="_blank" rel="noopener noreferrer">私链</a></p><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h4><ul><li>优秀图形界面</li><li>简单易上手</li></ul><h4 id="简易配置教程-v0-19-16" tabindex="-1"><a class="header-anchor" href="#简易配置教程-v0-19-16"><span>简易配置教程 <em>v0.19.16</em></span></a></h4><ol><li>在 Profiles 中的文本框内粘贴订阅链接并下载。选中下载的配置文件。</li><li>进入 Proxies，选择 rule，点击测速图标并在下方选择一个可用节点。</li><li>进入 General，开启 System Proxy。</li></ol><h4 id="一些提示" tabindex="-1"><a class="header-anchor" href="#一些提示"><span>一些提示</span></a></h4><ul><li><a href="https://github.com/BoyceLig/Clash_Chinese_Patch" target="_blank" rel="noopener noreferrer">这里</a>提供 clash 的汉化。</li><li>在节点界面点击测速图标测试全部节点的连通性</li><li>建议设置配置文件自动更新（Profiles -&gt; 右击配置文件 -&gt; Settings -&gt; Update Interval 设为 24）</li></ul><h3 id="clash-for-android" tabindex="-1"><a class="header-anchor" href="#clash-for-android"><span>Clash For Android</span></a></h3><blockquote><p>20231103 继 CFW 删库后，Clash 内核与 Meta 核均删库跑路。</p></blockquote><p>请前往谷歌商店或<a href="https://github.com/Kr328/ClashForAndroid/releases" target="_blank" rel="noopener noreferrer">前往 github 下载</a>。<a href="https://wwp.lanzout.com/iL6sD03mi0gf" target="_blank" rel="noopener noreferrer">私链</a></p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><ul><li><a href="https://github.com/MetaCubeX/Yacd-meta" target="_blank" rel="noopener noreferrer">Yacd-meta</a></li><li><a href="https://xrhexo.netlify.app/posts/1542838017/" target="_blank" rel="noopener noreferrer">神秘模块</a>：magisk module</li><li><a href="https://github.com/ModuleList/akashaProxy" target="_blank" rel="noopener noreferrer">虚空代理</a>：magisk/kernelsu module</li></ul></details><h2 id="v2ray-系" tabindex="-1"><a class="header-anchor" href="#v2ray-系"><span>V2ray 系</span></a></h2><h3 id="v2rayn" tabindex="-1"><a class="header-anchor" href="#v2rayn"><span><a href="https://github.com/2dust/v2rayN" target="_blank" rel="noopener noreferrer">V2rayN</a></span></a></h3><p>V2rayN 是 V2ray 的 windows 前端，支持自定义协议，也可以更换内核。</p><p>相比于 clash，v2ray 主战场在自建节点的方向。由于 clash 订阅本质上是一组节点+规则，单个特定协议的节点无法直接导入 clash，因此使用 v2ray <span class="heimu" title="你知道的太多了">能手搓配置文件的当我没说</span>。但是 v2ray 也能使用 clash 配置文件。</p><ol><li>前往 PC 客户端项目地址，下载 <code>v2rayN-With-Core.zip</code>。（我以前是自己配内核的，但是后来发现问题太多了，还有跨版本兼容性，真不如 with core）</li><li>复制节点地址，按 <code>Ctrl+V</code> 导入，按 <code>Enter</code> 激活。</li><li>测试真连接延迟，确保节点有效。</li><li>下方 <em>系统代理</em> 处选择 <em>自动配置系统代理</em>，开启代理。</li></ol><p>若为订阅链接：</p><ol><li>点击加号，在订阅分组设置中，将订阅链接填入 URL。别名随便写。</li><li>订阅分组 - 更新全部订阅</li><li>一键测延迟/速度，选择节点双击激活。</li><li>同上方 4.</li></ol><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ul><li>在 v2rayN 7.3 及以上版本，bbr2 可能会导致其不可用。可以尝试关闭 bbr2。</li></ul><h3 id="v2raya" tabindex="-1"><a class="header-anchor" href="#v2raya"><span>v2rayA</span></a></h3><p>v2rayA 是一个跨多平台的代理客户端。它有一个易于使用的网页面板，对于初入 linux 的 user 是非常友好的；它也支持透明代理、分流规则、订阅链接等。</p><p>安装：</p>',17)),o(r,{id:"216",data:[{id:"archlinux"},{id:"OpenWRT"}]},{title0:e(({value:n,isActive:t})=>a[0]||(a[0]=[s("archlinux")])),title1:e(({value:n,isActive:t})=>a[1]||(a[1]=[s("OpenWRT")])),tab0:e(({value:n,isActive:t})=>a[2]||(a[2]=[i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"sudo"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," pacman"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -S"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," v2raya")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"sudo"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," v2raya")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 也可以不用 sudo：`v2raya --lite`")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# fishshell")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"set"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -Ux"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," ALL_PROXY"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "http://127.0.0.1:20172"'),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  # 必须加 -x, 否则系统代理无效")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,[s("如果需要后台运行，开机自启，可以参考"),i("a",{href:"https://v2raya.org/docs/advanced-application/noroot/",target:"_blank",rel:"noopener noreferrer"},"文档"),s("："),i("code",null,"systemctl --user enable --now v2raya-lite.service"),s("。")],-1),i("p",null,[s("用 sudo 和不用 sudo 的区别主要是透明代理的支持。显然 "),i("code",null,"--lite"),s(" （无需 sudo）是不能开透明代理的。")],-1)])),tab1:e(({value:n,isActive:t})=>a[3]||(a[3]=[i("p",null,[i("a",{href:"https://v2raya.org/docs/prologue/installation/openwrt/",target:"_blank",rel:"noopener noreferrer"},"https://v2raya.org/docs/prologue/installation/openwrt/"),s("，讲得非常清除。注意需要安装 "),i("code",null,"xray-core"),s("。")],-1)])),_:1}),a[5]||(a[5]=l(`<p>之后的操作都在网页上 (<code>127.0.0.1:2017</code>) 进行。</p><ul><li>如果你不开透明代理，则代理端口最好使用 <code>http://127.0.0.1:20172</code>，这个端口带有分流。</li><li>如果你开启透明代理，可以将分流规则选成 <a href="https://v2raya.org/docs/manual/routinga/" target="_blank" rel="noopener noreferrer">RoutingA</a>，然后透明代理分流与端口分流一致。这样方便自定义直连或代理的规则。</li></ul><h3 id="v2rayng" tabindex="-1"><a class="header-anchor" href="#v2rayng"><span>V2rayNG</span></a></h3><p>v2ray 的 Android 前端。</p><h3 id="nekoray" tabindex="-1"><a class="header-anchor" href="#nekoray"><span><a href="https://github.com/MatsuriDayo/nekoray" target="_blank" rel="noopener noreferrer">NekoRay</a></span></a></h3><p>基于 Qt 的代理前端，支持 V2ray &amp; sing-box 内核。</p><blockquote><p>记得好像有停更过一阵子，仓库提交记录是 2022 开始的，找不到。</p></blockquote><h3 id="qv2ray" tabindex="-1"><a class="header-anchor" href="#qv2ray"><span>qv2ray</span></a></h3><p>2017 年左右的很多油管教程都会推荐 qv2ray。qv2ray 停止维护过一段时间(?)，但是我在 2024 年看的时候是有人接手维护的。我没用过。</p><h2 id="sing-box-系" tabindex="-1"><a class="header-anchor" href="#sing-box-系"><span>sing-box 系</span></a></h2><p><em>sing-box 系</em> 指基于 sing-box 内核的一堆代理软件。sing-box 号称是 <em>The universal proxy platform</em>，以支持的协议多闻名。</p><p>缺点就是 bug 也多。</p><ul><li><a href="https://github.com/MatsuriDayo/NekoBoxForAndroid" target="_blank" rel="noopener noreferrer">NekoBox</a>：Matsuri 的继任，Android 端的好选择。</li><li><a href="https://github.com/MatsuriDayo/Matsuri" target="_blank" rel="noopener noreferrer">Matsuri</a>：项目已 archived。之前用过一阵，后面换回 V2rayNG 了。</li><li><a href="https://github.com/SagerNet" target="_blank" rel="noopener noreferrer">SagerNet</a>：前两位的 base。试了一下 hysteria 插件，不可用，遂无兴趣。</li></ul><p>并且观测到一个很有趣的现象：在 Android 上，成功（以打断 V2rayNG 方式?）启动过 sing-box 后，之后的 V2rayNG 启动连接的速度会变慢，变为需要约 1s-2s+。</p><h2 id="daed" tabindex="-1"><a class="header-anchor" href="#daed"><span><a href="https://github.com/daeuniverse/daed" target="_blank" rel="noopener noreferrer">daed</a></span></a></h2><blockquote><p>根据 dae 的官方测试，（与 v2raya 相比）确实是基于 eBPF 的 dae 速度更快，但不是快特别多</p><div style="text-align:right;"><p>——Au, <a href="https://t.me/archlinuxcn_group/2912643" target="_blank" rel="noopener noreferrer">src</a></p></div></blockquote><p>daed 是网页面板的开源代理软件，<a href="#dae">dae</a> 的前端，而 dae 基于 eBPF<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>，仅支持 linux。由于比较新，目前使用的人不多。</p><p>这是我目前用过的<strong>最舒服</strong>的代理软件，可以<strong>维护多个节点池</strong>，对于池中节点取最小延迟使用，并能根据不同规则进行节点池分流。例如香港不能用 tg，那就多建一个节点池，加一条分流规则就行。</p><ol><li>安装：<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pacman</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> daed</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enable</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --now</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> daed</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 启动，并设为开机自启</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>浏览器进入 <code>localhost:2023</code></li><li>一路确定。例如数据库后端使用默认值：<code>http://127.0.0.1:2023/graphql</code>，首次登录会要求设账号密码，设一个即可。</li><li>导入节点信息，拖拽到左侧 proxy 即可。</li></ol><p>踩坑：</p><ol><li>daed 默认使用透明代理，没有 socks/http 端口。如果有设置 <code>ALL_PROXY</code> 等系统代理变量记得取消；firefox 需要在代理设置中设为 <em>自动探测网络环境</em>。</li><li><s>务必将 <em>配置 - global - 连接选项 - 拨号模式</em> 设为 <em>ip</em>（默认值）。否则可能无法使用 chatgpt。</s> 经测试，非此问题。</li></ol><p>需要写规则可以参考<a href="https://github.com/daeuniverse/dae/discussions/245#discussioncomment-6575522" target="_blank" rel="noopener noreferrer">这里</a>。</p><p>软件数据存储在 <code>/etc/daed/wing.db</code>（sqlite 数据库），如果需要备份、改账号密码，需要先给 rw 权限，然后用数据库软件更改。</p><p>daed 的一个缺点是无法主动测试节点连通性。但是 daed 默认每 30s 会测试一次节点延迟，你可以 <code>journalctl -eu daed</code> 查看其日志，获取信息。</p><h2 id="dae" tabindex="-1"><a class="header-anchor" href="#dae"><span><a href="https://github.com/daeuniverse/dae" target="_blank" rel="noopener noreferrer">dae</a></span></a></h2><p>在 NixOS 上 nixpkgs 没有 daed 的包，只有 dae 能够直接使用。而 dae 官方提供了一个 <a href="https://github.com/daeuniverse/flake.nix" target="_blank" rel="noopener noreferrer">flake.nix</a> 配置（包含 dae 和 daed），我现在推荐使用此 flake，因为 flake 的版本更新，也包含了最新的 bug 修复；但是我之前<a href="https://github.com/daeuniverse/flake.nix/issues/103" target="_blank" rel="noopener noreferrer">踩了这玩意一个坑</a>，因此在 bug 解决之前我还是回退到 nixpkgs 的 dae。</p><p>不使用 daed 还有一个原因：不符合 NixOS 的确定一切的思想。特定位置存的 sqlite 总归是不如用 git 管理配置文件的。</p><p>我已经用了很长一段时间的 daed，写 dae 配置文件可以说是非常简单；而且 dae 的官方教程确实非常不错，把 <a href="https://github.com/daeuniverse/dae/blob/main/example.dae" target="_blank" rel="noopener noreferrer">example</a> 下载下来对着改就行，内含丰富注释。这里由于隐私问题，我并未把我的配置公开，而是加密后上传到 github。</p><p>改完配置以后，直接在 <code>configuration.nix</code> 中写：</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">dae</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  enable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  configFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;your/config/file/path&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 必需是绝对路径字符串，看我的踩坑</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  assets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> pkgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    v2ray-geoip</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    v2ray-domain-list-community</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rebuild 后重启即可（不直接生效，是 eBPF 的特性？）。这分流不比 v2rayA 爽多了？</p><p>当然，如果你的配置主目录不一定在 <code>/etc/nixos</code> 下，使用绝对路径确实不算明智。这时候可以用一个比较脏的方法，监听 config 的改动，并且每次改动时将最新版本复制到特定绝对路径里。</p><div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># configuration.nix</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">dae</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  enable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # dae needs 0600 permission, but we cannot source file with permission.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # related issue: https://github.com/nix-community/home-manager/issues/3090</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  configFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/home/absx/.config/absx_.dae&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  assets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> pkgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    v2ray-geoip</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    v2ray-domain-list-community</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># home.nix</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">home</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">file</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;.config/absx.dae&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./config/absx.dae</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    onChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      rm -f ~/.config/absx_.dae</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      cp ~/.config/absx.dae ~/.config/absx_.dae</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      chmod 0640 ~/.config/absx_.dae</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><a href="https://ebpf.io/what-is-ebpf/" target="_blank" rel="noopener noreferrer">What is eBPF?</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,35))])}const f=h(c,[["render",g],["__file","proxy_software.html.vue"]]),b=JSON.parse('{"path":"/articles/proxy/proxy_software.html","title":"代理客户端选择","lang":"zh-CN","frontmatter":{"date":"2023-11-25T00:00:00.000Z","icon":"circle-check","category":["推荐","教程"],"tag":["桌面端","移动端","网络"],"description":"代理客户端选择 有关于各代理客户端的性能 benchmark，请看这里。 Clash 系 20231102-20231103 Clash 系几乎全部删库跑路。虽然也有一些 fork 版本接手就是了。 不过我不推荐使用，除非你用的是只提供 clash 配置的机场。 详情 Clash Verge 开源跨平台 Clash 客户端，rust + tauri 使...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理客户端选择\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-16T16:20:26.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://absx.pages.dev/articles/proxy/proxy_software.html"}],["meta",{"property":"og:site_name","content":"绝对值_x 的博客"}],["meta",{"property":"og:title","content":"代理客户端选择"}],["meta",{"property":"og:description","content":"代理客户端选择 有关于各代理客户端的性能 benchmark，请看这里。 Clash 系 20231102-20231103 Clash 系几乎全部删库跑路。虽然也有一些 fork 版本接手就是了。 不过我不推荐使用，除非你用的是只提供 clash 配置的机场。 详情 Clash Verge 开源跨平台 Clash 客户端，rust + tauri 使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-16T16:20:26.000Z"}],["meta",{"property":"article:tag","content":"网络"}],["meta",{"property":"article:tag","content":"移动端"}],["meta",{"property":"article:tag","content":"桌面端"}],["meta",{"property":"article:published_time","content":"2023-11-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-16T16:20:26.000Z"}]]},"git":{"createdTime":1700886418000,"updatedTime":1742142026000,"contributors":[{"name":"lxl66566","username":"lxl66566","email":"18259734087@163.com","commits":17,"url":"https://github.com/lxl66566"}]},"readingTime":{"minutes":7.57,"words":2271},"filePathRelative":"articles/proxy/proxy_software.md","localizedDate":"2023年11月25日","excerpt":"\\n","autoDesc":true}');export{f as comp,b as data};
