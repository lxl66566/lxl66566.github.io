<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://absx.pages.dev/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://absx.pages.dev/rss.xml" rel="self" type="application/rss+xml"/>
    <title>绝对值_x 的博客</title>
    <link>https://absx.pages.dev/</link>
    <description>没什么有价值的内容的，真的！</description>
    <language>zh-CN</language>
    <pubDate>Thu, 09 Jan 2025 16:17:10 GMT</pubDate>
    <lastBuildDate>Thu, 09 Jan 2025 16:17:10 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>随笔</category>
    <category>编程</category>
    <category>教程</category>
    <category>经历</category>
    <category>评价</category>
    <category>推荐</category>
    <category>学习</category>
    <category>爱好</category>
    <category>应用</category>
    <item>
      <title>2025</title>
      <link>https://absx.pages.dev/essay/2025.html</link>
      <guid>https://absx.pages.dev/essay/2025.html</guid>
      <source url="https://absx.pages.dev/rss.xml">2025</source>
      <description>2025 20250109 大众认可的美是艺术，只有自己认可并且坚信的美也是艺术。但是你要是拿自己的艺术强迫大众接受，那还是滚吧。 20250107</description>
      <category>随笔</category>
      <pubDate>Tue, 07 Jan 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>20250109</h2>
<p>大众认可的美是艺术，只有自己认可并且坚信的美也是艺术。但是你要是拿自己的艺术强迫大众接受，那还是滚吧。</p>
<h2>20250107</h2>
<p><s>穿得少，肌肉需要制造更多热量，这也是一种锻炼吧</s></p>
]]></content:encoded>
    </item>
    <item>
      <title>React</title>
      <link>https://absx.pages.dev/coding/react.html</link>
      <guid>https://absx.pages.dev/coding/react.html</guid>
      <source url="https://absx.pages.dev/rss.xml">React</source>
      <description>React 初学，包含的东西较少。等到我真正用 React 开发一个项目的时候，这一页的东西才会变多起来。 JSX 基础 JSX 是 React 的核心，JSX 将一个 html 标签也视为一个 js object。 多行 JSX 需要用括号包围；每个 JSX 只能是单标签，如果多标签则需要用 &amp;lt;&amp;gt;&amp;lt;/&amp;gt; 空标签包围。 JSX 内插值（插表达式）使用单...</description>
      <category>编程</category>
      <pubDate>Sat, 04 Jan 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>初学，包含的东西较少。等到我真正用 React 开发一个项目的时候，这一页的东西才会变多起来。</p>
<h2>JSX 基础</h2>
<p>JSX 是 React 的核心，JSX 将一个 html 标签也视为一个 js object。</p>
<ul>
<li>多行 JSX 需要用括号包围；每个 JSX 只能是单标签，如果多标签则需要用 <code>&lt;&gt;&lt;/&gt;</code> 空标签包围。</li>
<li>JSX 内插值（插表达式）使用单大括号。</li>
<li>JSX 里的 class 要改为 className。</li>
<li>JSX 里可以写内联 style，接受一个类似 CSS 的对象。</li>
<li>JSX 里可以直接用 <code>&lt;div {...object} /&gt;</code> 进行 props 传入的解构，非常方便。</li>
</ul>
<p>JSX 能够非常灵活地组织组件，比 Vue 灵活太多了。</p>
<h2>组件</h2>
<p>一般来说只需要使用基于函数的 API。现在所有现代前端都在使用基于函数的 API，例如 Kotlin Compose UI，因为组合优于继承，灵活性非常强。</p>
<ul>
<li>React 每一个返回 JSX 对象的函数都是一个组件。</li>
<li>函数的第一个入参是 props。</li>
<li>如果要传递 JSX 给组件，默认传到 <code>props.children</code>。</li>
<li>组件间传值：
<ul>
<li>父向子，props，没问题。</li>
<li>子向父，回调函数。</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#react-hooks"><span></span></a><a href="https://zh-hans.react.dev/reference/react/hooks" target="_blank" rel="noopener noreferrer">React Hooks</a></h2>
<p>Hooks 是响应式的基础。React 内置了许多 Hooks，但是平常最常用的也就 useState，useRef，useEffect。</p>
<h3>useState</h3>
<p>React 里最常用的响应式就是 useState 了。其返回两个值，<code>content</code> 是内容的引用 (getter)，<code>setContent</code> 是一个函数，用于改变内容 (setter)。这样可以比较明确地控制如何渲染 DOM 树。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">content</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"default content"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>useRef</h3>
<p>跟 Vue 的 ref 有很大区别，useRef 这里的 ref 是不会触发渲染的。</p>
<p>有一点跟 Vue 一样的就是 Vue 的 ref 需要 <code>.value</code> 获取内部值，而 useRef 需要 <code>.current</code> 获取。</p>
<h3>useCallback</h3>
<p>包装函数，让组件重新渲染时，该函数不会重新创建，也就是保持同一个对象。可以用于 <code>memo</code>。</p>
<h2>external</h2>
<ul>
<li><a href="https://juejin.cn/post/7195513281228898363" target="_blank" rel="noopener noreferrer">2023 再看 React 状态管理库</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>SolidJS</title>
      <link>https://absx.pages.dev/coding/solidjs.html</link>
      <guid>https://absx.pages.dev/coding/solidjs.html</guid>
      <source url="https://absx.pages.dev/rss.xml">SolidJS</source>
      <description>SolidJS SolidJS 是一个轻量级前端框架，其以 JSX 为核心，为 React 做了许多减法，少了很多难记的 Hooks，所以学起来非常快（不论有无 React 基础）。不过本文假设读者已经熟悉了 React 基础。 SolidJS 的哲学就是 small and simple。所以用起来可能没有那么方便舒服，有的地方需要自己手操逻辑。 H...</description>
      <category>编程</category>
      <pubDate>Sat, 04 Jan 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>SolidJS 是一个轻量级前端框架，其以 JSX 为核心，为 React 做了许多减法，少了很多难记的 Hooks，所以学起来非常快（不论有无 React 基础）。不过本文假设读者已经熟悉了 React 基础。</p>
<p>SolidJS 的哲学就是 small and simple。所以用起来可能没有那么方便舒服，有的地方需要自己手操逻辑。</p>
<h2>Hooks</h2>
<h3>createSignal</h3>
<p>就是 useState。</p>
<h3>createContext</h3>
<p>可以用来跨组件传输数据，不需要通过 props。</p>
<h3>createResource</h3>
<p>可以用来执行 async 函数。SolidJS 对 async 支持算不上好，这可能是唯一的 async 执行器。</p>
<p>createResource 可以跟 Suspence 组件<a href="https://docs.solidjs.com/reference/components/suspense" target="_blank" rel="noopener noreferrer">配合使用</a>。其实就是包装了一下 <code>res.loading</code> 的判断而已。</p>
<h2>components</h2>
<p>SolidJS 也提供了一些内置组件，让写 Vue 的人倍感熟悉。</p>
<ul>
<li><code>&lt;Show when={...}&gt;&lt;/Show&gt;</code>，v-if</li>
<li><code>&lt;For each={...}&gt;&lt;/For&gt;</code>，v-for</li>
</ul>
<h2>Router</h2>
<p>使用 <a href="https://github.com/solidjs/solid-router" target="_blank" rel="noopener noreferrer">solid-router</a>，很简单。</p>
<h2>Icons</h2>
<p>SolidJS <a href="https://solid-icons.vercel.app/" target="_blank" rel="noopener noreferrer">自带了一个图标库</a>，图标非常全，使用也方便。</p>
]]></content:encoded>
    </item>
    <item>
      <title>域名</title>
      <link>https://absx.pages.dev/articles/proxy/domain.html</link>
      <guid>https://absx.pages.dev/articles/proxy/domain.html</guid>
      <source url="https://absx.pages.dev/rss.xml">域名</source>
      <description>域名 很多时候你需要一个域名用来部署代理服务，因为基于 SSL 的代理（trojan 等）都需要域名来签发 https 证书。即使你不使用代理，也有可能需要部署自己的网站，用域名作为 IP 的助记。 一般域名的续费是很贵的，卖域名的就好这一口。所以如果是为了部署代理，完全没有必要续费域名，每年一换即可。 免费域名一般是二级域名，也就是到手至少是 xxx...</description>
      <category>教程</category>
      <category>经历</category>
      <pubDate>Fri, 03 Jan 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>很多时候你需要一个域名用来部署代理服务，因为基于 SSL 的代理（trojan 等）都需要域名来签发 https 证书。即使你不使用代理，也有可能需要部署自己的网站，用域名作为 IP 的助记。</p>
<ul>
<li>一般域名的续费是很贵的，卖域名的就好这一口。所以如果是为了部署代理，完全没有必要续费域名，每年一换即可。</li>
<li>免费域名一般是二级域名，也就是到手至少是 xxx.xx.xx 形式。（世界上真的存在一级免费域名大善人吗）</li>
</ul>
<h2>域名服务器</h2>
<p>付费购买的域名一般都会提供域名服务器。而免费域名一般需要自己准备，这里就不得不提到赛博菩萨 cloudflare，它的域名服务器很稳定，添加也方便。</p>
<p>一般来说，使用 cloudflare 的域名服务器需要以下步骤：</p>
<ol>
<li>在 cloudflare 里添加域</li>
<li>点点点，所有步骤做完以后会给两个（或几个）dns 服务器地址，填写到域名提供商那里并 update。</li>
<li>等待几个小时</li>
</ol>
<p>然后用 nslookup 就能查到了。</p>
<h2>免费</h2>
<ul>
<li><a href="https://register.us.kg" target="_blank" rel="noopener noreferrer">us.kg</a>：可以托管到 cloudflare，注册还算不难。</li>
</ul>
<h2>付费</h2>
<ul>
<li><a href="https://www.namecheap.com/" target="_blank" rel="noopener noreferrer">namecheap</a>：买了两次，还算便宜。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>找工作经历</title>
      <link>https://absx.pages.dev/gossip/job.html</link>
      <guid>https://absx.pages.dev/gossip/job.html</guid>
      <source url="https://absx.pages.dev/rss.xml">找工作经历</source>
      <description>找工作经历 首先本精神自由人的定位非常清楚：不考研，不考公。因此找工作是我的唯一选择。 感想 经历了一次春招一次秋招，有一点感想。 谨慎投招聘网站上经常刷到的小公司。这么多毕业生，小公司又没有多少招人需求，那为什么一直都在招人呢？因为真的难过它们的面试，恨不得招的都是 ACM 金。 而大厂面试也没有那么难，非常公式化。多看面经，多背八股，刷点基础算法即...</description>
      <category>评价</category>
      <category>经历</category>
      <pubDate>Mon, 25 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>首先本精神自由人的定位非常清楚：不考研，不考公。因此找工作是我的唯一选择。</p>
<h2>感想</h2>
<p>经历了一次春招一次秋招，有一点感想。</p>
<ul>
<li>谨慎投招聘网站上经常刷到的小公司。这么多毕业生，小公司又没有多少招人需求，那为什么一直都在招人呢？因为真的难过它们的面试，恨不得招的都是 ACM 金。
<ul>
<li>而大厂面试也没有那么难，非常公式化。多看面经，多背八股，刷点基础算法即可。</li>
</ul>
</li>
<li>学校招聘会都是垃圾。给的少，大多要实习，这就是纯纯压榨，如果你会点技术还是去网上投吧。</li>
</ul>
<h2>关于我</h2>
<h3>方向</h3>
<p>我喜欢的是新技术，做小玩意，想给大家带来更好的使用体验。因此我一开始选择的是 <em>客户端开发</em>。但是实际上客户端指的大多数是移动端，基本没有专门的桌面软件开发。我之前写 Android 被折磨得非常痛苦，ios 也不会，因此放弃了这个方向。</p>
<p>后端方向基本全是 Java/C++，偶尔会有一些 python 后端（Django, Flask）。我除了 Django 就没接触过其他框架，而且我并不喜欢后端。</p>
<p>不论爱好，考虑我的技术栈，我感觉 <em>测试开发</em> 和 <em>Linux 运维</em> 挺适合我的，毕竟前者 python 用得烂熟，也鼓捣过几个爬虫和自动化项目，后者就纯粹是喜欢尝试创造新工具，写过脚本与包管理器。确实，测开的要求低很多，运维稍微麻烦一点。但是我面试了几次测开/运维，都没有给我留下对这个行业的好印象。</p>
<p>至于前端，我也写过不少前端的东西，会框架会 TS，但是基础不牢。而且 AI 横行，前端的前景并不好。</p>
<p>因此我并没有一个确定的就业方向，只好投递一些万金油岗位，没有太细的要求，只要基础好，先招进去再学的那种。</p>
<h3>语言</h3>
<ul>
<li>我尽可能避开了 JAVA 和 C++ 这两个最多岗位的语言。。JAVA 的话我卷不过后端小子，框架也一点不熟；C++ 我甚至不敢说我会写（怀抱着对《The Book of Modern C++》的恐惧）。</li>
<li>而 Rust 非常显然，几乎没有公司招；即使有一些量化要 rust，我也暂时没有考虑，因为使用 Rust 的实习经历给我带来了不小的心理创伤。</li>
<li>最终还是 Python 岗位看得多一点，然而由于不想从事 Python 后端，我也只能投一点万金油。</li>
</ul>
<p>语言其实并不是重点，啥语言学一周都能上手。重要的还是计算机背后的逻辑。</p>
<h2>准备</h2>
<h3>软件</h3>
<ul>
<li>牛客：更偏向互联网，人才多；牛客首页是论坛，所以软件本身性质更偏向交流的。</li>
<li>BOSS：纯招聘向的软件。BOSS 社招很多，校招会少点。</li>
</ul>
<h3>简历模板</h3>
<p>我用 <a href="/learning/typst.html" target="_blank">typst</a> 比较多，好久之前就盯上了 <a href="https://github.com/OrangeX4/Chinese-Resume-in-Typst" target="_blank" rel="noopener noreferrer">OrangeX4 的简历模板</a>。字体在 Linux 上可能要折腾一会儿，但是确实够好看。</p>
<p>typst 可能有些难，再不济至少也得用个 <a href="https://github.com/BingyanStudio/LapisCV" target="_blank" rel="noopener noreferrer">markdown 简历模版</a> 吧。</p>
<p>如果你跟我很熟，可以把 Github 用户名告诉我，我给你开权限看我的简历与招聘全记录。</p>
<h2>2024 秋招</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>只显示部分结果（有进度的）；点击列表可以查看详细内容，包括笔试/面试，公司业务和评价。</p>
</div>

<p>最后去了哪家，可以猜猜。</p>
<h3>关于测评</h3>
<ul>
<li>携程和小米用的都是 ceping.com 提供的，这玩意非常烂。我见一次就想吐一次。
<ul>
<li>不同公司需要重复测评，同一套题库不能只做一次。</li>
<li>超时貌似是直接判负的，而不是当前选中的答案。</li>
<li>有很多傻逼计算题和智商测试题，还 tm 限时。</li>
</ul>
</li>
<li>华为是另一套系统，纯自我评价，不涉及其他测试。我觉得还行。</li>
<li>拼多多测评是北森，这个是完全看出题者的。还行，不过题量有点大。</li>
</ul>
<h2>2024 春，实习</h2>
<p><s>据说</s>在找工作时有实习经历是很重要的，因此我在大三下初期找暑期实习。</p>
<p>基本信息：</p>
<ul>
<li>暑期实习的难度一般比日常实习要高，不过也提供更多的转正机会。</li>
<li>一般互联网实习都是线上面试 &amp; 笔试。</li>
<li>金三银四是真的，好的实习机会早点更多。</li>
</ul>
<p>心得：</p>
<ul>
<li>在如今的环境下，211 学历比我想象中更吃香。刷着帖子，切身感受到了学历的重要性，<s>把高考前的我抓来打</s>。</li>
<li>信息来源，可以是用 app（牛客，实习僧，智联，boss），一般学校也会拉群给实习信息。后者档次就相对低一点，主要是学校合作企业和当地企业在招？</li>
<li>小厂的笔试/面试体验比大厂好很多。</li>
<li>互联网大厂，算法非常重要（也可以说大厂岗位就是给 OI 爷准备的）。</li>
</ul>

<p>其他否决票：</p>
<ul>
<li>阿里：主要在杭州招。（后来感觉其实我应该投的，即使不一定能去，多面几次也是不错的经验）</li>
<li>美团、菜鸟、高德...：都是（都只有）移动端/后端，技术栈不匹配，不考虑</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>CSS</title>
      <link>https://absx.pages.dev/coding/css.html</link>
      <guid>https://absx.pages.dev/coding/css.html</guid>
      <source url="https://absx.pages.dev/rss.xml">CSS</source>
      <description>CSS 本人是 CSS 超级苦手，甚至以前都只会写 nocss 页面。但是如果要给别人做东西用，nocss 肯定不太行。当今所有主流 GUI 框架中没一个打得过前端设计，我也想在前端领域玩玩，因此学习一点 CSS 是有必要的。 预处理器 css 本身不带逻辑，处理嵌套也麻烦。因此有各种各样的预处理器可以允许我们写更强大、更有意思的扩展语法，然后由它们在...</description>
      <category>编程</category>
      <pubDate>Fri, 13 Dec 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>本人是 CSS 超级苦手，甚至以前都只会写 nocss 页面。但是如果要给别人做东西用，nocss 肯定不太行。当今所有主流 GUI 框架中没一个打得过前端设计，我也想在前端领域玩玩，因此学习一点 CSS 是有必要的。</p>
<h2>预处理器</h2>
<p>css 本身不带逻辑，处理嵌套也麻烦。因此有各种各样的预处理器可以允许我们写更强大、更有意思的扩展语法，然后由它们在编译器改成标准 css。</p>
<ul>
<li>scss：sass 3.0 的别名，我觉得最泛用的。</li>
<li><a href="https://lesscss.org/" target="_blank" rel="noopener noreferrer">less</a>，朋友的公司在用</li>
</ul>
<p>上面两个预处理器都兼容原生 css。</p>
<h2>盒模型</h2>
<p>前端基础概念了。</p>
<ul>
<li>标准盒模型：<code>box-sizing: content-box</code>，content = size；border 和 padding 向外扩展</li>
<li>IE 盒模型：<code>box-sizing: border-box</code>，content = size - border - padding，可以从外部统一大小。</li>
</ul>
<div style="position: relative; width: 400px">
  <!-- Margin Layer -->
  <div style="background-color: #e8f4f8; padding: 20px; text-align: center; border: 2px dashed #a8d1dc">
    <div style="
        position: absolute;
        top: 0px;
        left: 50%;
        transform: translateX(-50%);
        background-color: white;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 14px;
      ">
      margin
    </div>
    <!-- Border Layer -->
    <div style="background-color: #ffb6b6; padding: 20px">
      <div style="
          position: absolute;
          top: 20px;
          left: 50%;
          transform: translateX(-50%);
          background-color: white;
          padding: 2px 8px;
          border-radius: 4px;
          font-size: 14px;
        ">
        border
      </div>
      <!-- Padding Layer -->
      <div style="background-color: #e6ffe6; padding: 20px">
        <div style="
            position: absolute;
            top: 40px;
            left: 50%;
            transform: translateX(-50%);
            background-color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 14px;
          ">
          padding
        </div>
        <!-- Content Layer -->
        <div style="background-color: #fff2e6; padding: 20px; text-align: center">Content Area</div>
      </div>
    </div>
  </div>
</div>
<h2>flex 布局</h2>
<p>flex 布局是响应式的绝佳实践，而且对于前端初学者来说，flex 也非常符合界面直觉。</p>
<p>关于版本：flex <a href="https://www.cnblogs.com/xiaohuochai/p/5323146.html" target="_blank" rel="noopener noreferrer">有多个版本</a>。2024 年了，不需要考虑 flex 兼容性，可以假定所有浏览器都支持最新版本 flex。</p>
<p>无脑 flex：</p>
<ol>
<li>想要让内部的玩意水平垂直居中，可以直接无脑 flex：<code>display: flex; align-items: center; justify-content: center;</code></li>
<li>想要让某个元素占满空间，可以给父元素设为 flex（不要设 align-items &amp; justify-content），然后该元素设为 <code>flex: 1</code>。</li>
</ol>
<p>flex 基础：</p>
<ol>
<li>主轴与交叉轴：主轴是元素排布的方向，交叉轴是与主轴垂直的方向。</li>
<li>basis, <a href="https://juejin.cn/post/6844904016439148551" target="_blank" rel="noopener noreferrer">grow and shrink</a>
<ul>
<li>basis 是每个元素的基础长度。默认为 0，此时使用元素 width （或 height）。</li>
<li>grow 是当所有元素填不满 flex 时，对于剩下的空间的瓜分策略。实际上就是按 grow 比例瓜分。</li>
<li>shrink 是当所有元素超出 flex 时，对所有元素的压缩策略。每个元素被压缩的空间也是按 shrink 比例压缩。</li>
</ul>
</li>
<li>对齐：
<ul>
<li>主轴：<code>justify-content</code>。一般常用的有 <code>center</code>, <code>space-between</code>, <code>space-around</code>, <code>space-evenly</code></li>
<li>交叉轴：一旦使用了 flex，所有元素就会在交叉轴上被拉到最大（由默认值 <code>align-items: stretch;</code> 控制），非常直觉。</li>
</ul>
</li>
<li>超出自动换行：<code>flex-wrap: wrap;</code>；换行后又会引入行间对齐 <code>align-content</code>。</li>
</ol>
<h2>框架</h2>
<p>虽说写原生 CSS 也不是不行，但是有框架为什么不用呢。</p>
<p>大多数框架都喜欢将 “写 css” 变为 “写 class”，免去了 html 和 css 之间切来切去的烦恼，用得熟练的话确实可以加快开发速度；特别是对基于 JSX 的前端框架非常有用。而写 vue 的话，css 框架对于初学者来说就是多了查文档的时间，如果文档烂的话还是挺烦人的。</p>
<ul>
<li><a href="https://unocss.dev/" target="_blank" rel="noopener noreferrer">UnoCSS</a>：新一代完全自定义化的 css 框架。</li>
<li><a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">tailwindcss</a>：一套预设的 class。目前广泛使用。</li>
<li>Bootstrap：老一辈预设的 class，目前算是被 tailwindcss 取代了吧(?)</li>
</ul>
<h3>TailwindCSS</h3>
<p><a href="https://tailwindcss.com/docs/customizing-colors" target="_blank" rel="noopener noreferrer">配色</a></p>
<ul>
<li>TailwindCSS 只能写静态类名。所以不能写出 <code>bg-${color}-500</code> 这种插值，否则编译的时候不会编出这个 style，样式就丢失了。</li>
<li>只有 <code>flex: 1</code> 可以写为 <code>flex-1</code>。其他 <code>flex: x</code> 要写为 <code>flex-[x]</code>。</li>
</ul>
<h4>插件</h4>
<ul>
<li><a href="https://github.com/reslear/tailwind-scrollbar-hide" target="_blank" rel="noopener noreferrer">tailwind-scrollbar-hide</a>：隐藏 scrollbar</li>
</ul>
<h2>external</h2>
<ol>
<li><a href="https://zh.learnlayout.com/" target="_blank" rel="noopener noreferrer">学习 CSS 布局</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>内网穿透</title>
      <link>https://absx.pages.dev/articles/frp.html</link>
      <guid>https://absx.pages.dev/articles/frp.html</guid>
      <source url="https://absx.pages.dev/rss.xml">内网穿透</source>
      <description>内网穿透 在 软路由上部署了应用后，我需要一个内网穿透让我在任何地点都能连上应用。因此我尝试了几个内网穿透工具，并在此做一个简单的评价。 需求：免费，稳定。 cloudflare tunnel（推荐） 折腾完了其他几个服务我才想到 cloudflare，一搜，果然有。 cloudflare 的内网穿透是部署最简单，使用体验最好的服务，杀死了所有其他 f...</description>
      <category>推荐</category>
      <category>教程</category>
      <category>评价</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在 <a href="/articles/linux/openwrt.html" target="_blank">iStoreOS</a> 软路由上部署了应用后，我需要一个内网穿透让我在任何地点都能连上应用。因此我尝试了几个内网穿透工具，并在此做一个简单的评价。</p>
<p>需求：免费，稳定。</p>
<h2>cloudflare tunnel（推荐）</h2>
<p>折腾完了其他几个服务我才想到 cloudflare，一搜，果然有。</p>
<p>cloudflare 的内网穿透是部署最简单，使用体验最好的服务，杀死了所有其他 frp 玩家。</p>
<ol>
<li>前往 <a href="https://one.dash.cloudflare.com/" target="_blank" rel="noopener noreferrer">cloudflare zero trust</a>，左侧选择 <em>Networks - Tunnels</em>，创建一个新的 tunnel。</li>
<li>根据提示在服务器上安装 cloudflared。提示中的 Linux 部分只包含了 rpm/deb 系，但是没有关系，直接到 <a href="https://github.com/cloudflare/cloudflared" target="_blank" rel="noopener noreferrer">Github cloudflared</a> 的 release 中下载对应架构 binary 文件。</li>
<li>执行 cloudflare 步骤里带有 token 的命令。</li>
</ol>
<p>就这么简单，可以说一行命令完成内网穿透也不为过。而且你永远可以相信 cloudflare 的延迟和稳定性。</p>
<p>不过 cloudflared 在 <a href="/articles/linux/openwrt.html#%E6%9C%8D%E5%8A%A1" target="_blank">procd</a> 系统上只会将 service 写入 <code>/etc/init.d/cloudflared</code>，并不会开机自启。如果需要开机自启，需要手动创建一个软链接：</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /etc/rc.d</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ../init.d/cloudflared</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ./S99cloudflared</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2>zerotier</h2>
<p><a href="https://openwrt.org/docs/guide-user/services/vpn/zerotier" target="_blank" rel="noopener noreferrer">据说</a> openwrt 是有 zerotier 的软件包的，但是我在 iStoreOS 里一点也找不到，不知道是 iStoreOS 的 fork 问题还是 opkg 的问题。</p>
<p>然后我想直接下载 binary，结果发现<a href="https://www.zerotier.com/download" target="_blank" rel="noopener noreferrer">下载页面</a>里只有 rpm/deb 系的，Github release 里也找不到 binary。合着其他发行版就不配装你的程序了？</p>
<p>而且 zerotier 几个产品之间关系也比较混乱，一会儿把你推去 zerotier One，一会儿又踢回 zerotier，但是我没空，也没兴趣了解它们之间的关系。</p>
<h2><a class="header-anchor" href="#rathole"><span></span></a><a href="https://github.com/rapiz1/rathole" target="_blank" rel="noopener noreferrer">rathole</a></h2>
<p>rathole 是一个 Github 开源项目，本身并不提供内网穿透的服务器；它需要在一台有公网 IP 的服务器上部署转发程序（server），并在内网服务器上部署 client。其实也就是相当于部署一个代理了。不过好在它的配置非常简单，只要写端口就行；而且是 Rust 写的，有编程语言原神之力加持，所以我还是尝试了一下。</p>
<p>程序很容易就跑起来了，唯一的问题是开机自启。公网服务器上是正常发行版（systemd），这个还好写，我之前做过一个 <a href="https://github.com/lxl66566/user-startup-rs" target="_blank" rel="noopener noreferrer">user-startup-rs</a>的程序，可以做到一键自启。但是 iStoreOS 用的是 procd，老式的 service 命令写服务，这 service 里还大量调用了 OpenWRT 的接口，学习成本和心智负担都不可忽视。</p>
<p>service 写完，可以跑起来了，结果实际使用时还整天断连，稳定性非常低。我猜测是 service 写出了问题，然而这又不像 systemd 接 journal，没有日志输出，调试非常不便。</p>
<p>同时因为我的公网服务器大多是月抛小鸡，每个月都要修改配置还是非常麻烦的，最后还是放弃了。</p>
<h2>tailscale</h2>
<p>很早以前用过，给我宿舍电脑做 ssh 穿透。感觉延迟还是有一点高的，稳定性也差了点。</p>
]]></content:encoded>
    </item>
    <item>
      <title>OpenWRT</title>
      <link>https://absx.pages.dev/articles/linux/openwrt.html</link>
      <guid>https://absx.pages.dev/articles/linux/openwrt.html</guid>
      <source url="https://absx.pages.dev/rss.xml">OpenWRT</source>
      <description>OpenWRT 我之前买了一个 n1 盒子用来玩，上面已经刷了 iStoreOS，这是一个 OpenWRT 的分支。这里记录了一些我的折腾过程。 日后我可能会为其刷其他系统（Arch），不过现在还是先算了吧。 包管理 OpenWRT 用的包管理器是 opkg。虽然 OpenWRT 已经声称要转到 apt，但是还没转，并且 iStoreOS 应该还没有那...</description>
      <category>教程</category>
      <pubDate>Wed, 04 Dec 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>我之前买了一个 n1 盒子用来玩，上面已经刷了 iStoreOS，这是一个 OpenWRT 的分支。这里记录了一些我的折腾过程。</p>
<p>日后我可能会为其刷其他系统（Arch），不过现在还是先算了吧。</p>
<h2>包管理</h2>
<p>OpenWRT 用的包管理器是 <code>opkg</code>。虽然 OpenWRT 已经声称要转到 apt，但是还没转，并且 iStoreOS 应该还没有那么快跟上。因此我不得不用这个不合格的包管理器。</p>
<ul>
<li>查找：help 里写 <code>opkg find &lt;regexp&gt;</code>，但是我使用 <code>opkg find 'python.*'</code> 并不能找到任何结果。我感觉这个 regexp 是假的。</li>
<li>软件包本身也是残缺的，例如 vim 的 <code>si</code> 功能被砍了。</li>
</ul>
<h2>docker</h2>
<p>iStoreOS 上啥都没有，但是有 docker。</p>
<p>然而这个 docker 的配置是 OpenWRT 乱写的，需要去看 <code>/etc/init.d/dockerd</code> 才知道怎么配，配置文件在哪。网上的 docker 配置教程都废了。（<a href="https://t.me/withabsolutex/2119" target="_blank" rel="noopener noreferrer">开喷</a>）</p>
<h2>代理</h2>
<p>OpenWRT 的 Linux 内核是 5.10，iStoreOS 也<a href="https://github.com/istoreos/istoreos/issues/1386" target="_blank" rel="noopener noreferrer">遵循上游内核版本</a>。然而 dae 的最低内核要求是 5.17，因此我无法在 iStoreOS 上使用 dae 作为代理。</p>
<h2>服务</h2>
<p>OpenWRT 不支持 systemd，果然还是太重了吧。所以必须使用传统的 <a href="https://openwrt.org/docs/guide-developer/procd-init-scripts" target="_blank" rel="noopener noreferrer">procd init script</a>。</p>
<ol>
<li>在 <code>/etc/init.d/&lt;service name&gt;</code> 写入：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">#!/bin/sh /etc/rc.common</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">USE_PROCD</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">START</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">90</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">start_service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    procd_open_instance</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> MyInstance</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> command</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">your</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> startup</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> comman</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> limits</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> nofile="unlimited"</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> respawn</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 300</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> stdout</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> stderr</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    procd_close_instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>（这里我关闭了输出到日志，为了避免体积膨胀）</li>
<li>添加权限：<code>chmod +x /etc/init.d/&lt;service name&gt;</code></li>
<li>运行 <code>service &lt;service name&gt; enable</code>。</li>
<li>开机自启：<code>cd /etc/rc.d &amp;&amp; ln -s ../init.d/&lt;service&gt; ./S99&lt;service&gt;</code></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>八股</title>
      <link>https://absx.pages.dev/coding/bagu.html</link>
      <guid>https://absx.pages.dev/coding/bagu.html</guid>
      <source url="https://absx.pages.dev/rss.xml">八股</source>
      <description>八股 本文内容大多是面试八股，写在这里只是加深记忆。至于内容确实没有太多看的价值，网上类似的可太多了。 关于、、等，我都放在了关联的文章内。只有找不到啥关联的后端八股才写在此处。 Redis 内存型 KV 数据库，用于缓存。 穿透，击穿，雪崩 external C/C++ 技术面试基础知识总结</description>
      <category>编程</category>
      <pubDate>Fri, 08 Nov 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>本文内容大多是面试八股，写在这里只是加深记忆。至于内容确实没有太多看的价值，网上类似的可太多了。</p>
<p>关于<a href="/coding/algorithm.html" target="_blank">算法</a>、<a href="/coding/java.html" target="_blank">Java</a>、<a href="/coding/sql.html" target="_blank">数据库</a>等，我都放在了关联的文章内。只有找不到啥关联的后端八股才写在此处。</p>
<h2>Redis</h2>
<p>内存型 KV 数据库，用于缓存。</p>
<ul>
<li><a href="https://lry722.github.io/posts/redis-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener noreferrer">穿透，击穿，雪崩</a></li>
</ul>
<h2>external</h2>
<ul>
<li><a href="https://github.com/huihut/interview" target="_blank" rel="noopener noreferrer">C/C++ 技术面试基础知识总结</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>信息论</title>
      <link>https://absx.pages.dev/learning/information_theory.html</link>
      <guid>https://absx.pages.dev/learning/information_theory.html</guid>
      <source url="https://absx.pages.dev/rss.xml">信息论</source>
      <description>信息论 熵 信源熵（平均不确定度）：Hs​=−i=1∑n​pi​logd​pi​ 条件熵（已知 X，关于 Y）：H(X∣Y)=−i,j∑​p(xi​,yj​)logp(xi​∣yj​)=−i,j∑​p(xi​,yj​)logp(yj​)p(xi​,yj​)​ 联合熵（X 和 Y 同时发生）：H(X∣Y)=−i,j∑​p(xi​,yj​)logp(xi​...</description>
      <category>学习</category>
      <pubDate>Wed, 30 Oct 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2><a class="header-anchor" href="#熵"><span></span></a><a href="https://zh.wikipedia.org/wiki/%E7%86%B5_(%E4%BF%A1%E6%81%AF%E8%AE%BA)" target="_blank" rel="noopener noreferrer">熵</a></h2>
<p>信源熵（平均不确定度）：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msub><mi>H</mi><mi>s</mi></msub><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>p</mi><mi>i</mi></msub><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>d</mi></msub><msub><mi>p</mi><mi>i</mi></msub></mstyle></mrow><annotation encoding="application/x-tex">{\displaystyle H_{s}=-\sum _{i=1}^{n}p_{i}\log _{d}p_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>条件熵（已知 X，关于 Y）：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">{\displaystyle \mathrm {H} (X|Y)=-\sum _{i,j}p(x_{i},y_{j})\log {p(x_{i}|y_{j})}=-\sum _{i,j}p(x_{i},y_{j})\log {\frac {p(x_{i},y_{j})}{p(y_{j})}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.8408em;vertical-align:-1.4138em;"></span><span class="mord"><span class="mord mathrm">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p>
<p>联合熵（X 和 Y 同时发生）：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">{\displaystyle \mathrm {H} (X|Y)=-\sum _{i,j}p(x_{i},y_{j})\log {p(x_{i},y_{j})}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4638em;vertical-align:-1.4138em;"></span><span class="mord"><span class="mord mathrm">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></span></p>
<p><span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X,Y) = H(X) + H(Y | X) = H(Y)+ H(X |Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></p>
<h3><a class="header-anchor" href="#互信息"><span></span></a><a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E4%BF%A1%E6%81%AF" target="_blank" rel="noopener noreferrer">互信息</a></h3>
<p>互信息代表随机变量彼此之间的相关性。</p>
<p><span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mtext> </mtext><mtext> ⁣</mtext></mstyle></mrow><annotation encoding="application/x-tex">{\displaystyle I(X;Y)=\sum _{y\in Y}\sum _{x\in X}p(x,y)\log {\left({\frac {p(x,y)}{p(x)\,p(y)}}\right)},\,\!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.8804em;vertical-align:-1.4304em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4304em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:-0.1667em;"></span></span></span></span></span></p>
<p>关于熵和互信息之间的关系只需要记下这张图：</p>
<svg width="300" height="200" xmlns="http://www.w3.org/2000/svg">
  <!-- 圆 X -->
  <circle cx="100" cy="100" r="60" fill="skyblue" fill-opacity="0.5"></circle>
  <text x="60" y="100" font-size="12" fill="red">H(X|Y)</text>
  <!-- 圆 Y -->
<circle cx="160" cy="100" r="60" fill="orange" fill-opacity="0.5"></circle><text x="180" y="100" font-size="12" fill="red">H(Y|X)</text>  <!-- 重叠区域 I(X; Y) -->
<text x="125" y="100" font-size="12" fill="red">I(X;Y)</text>  <!-- 联合熵 H(X, Y) -->
<text x="120" y="40" font-size="12" fill="red">H(X, Y)</text>  <!-- 条件熵 H(X|Y) 和 H(Y|X) -->
<text x="50" y="150" font-size="12" fill="red">H(X)</text><text x="180" y="150" font-size="12" fill="red">H(Y)</text></svg>
<h2>信道</h2>
<h3>模型</h3>
<ul>
<li>信源：H(X)</li>
<li>信道：H(Y)</li>
<li>信道中损失的信息量（疑义度）：H(X|Y)</li>
<li>噪声熵：H(Y|X)</li>
<li>接收端获得的信息量：I(X;Y)</li>
</ul>
<h3>公式</h3>
<p>信道容量：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mtext>&nbsp;</mtext><mi>C</mi><mo>=</mo><mi>m</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msub><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">{\displaystyle \ C=max _{p(x)}I(X;Y)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">ma</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></span>，一般可以拿 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(X;Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span> 来变形</p>
<p>单位时间信道容量：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>t</mi></msub><mo>=</mo><mi>C</mi><mi mathvariant="normal">/</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">C_t=C/t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">/</span><span class="mord mathnormal">t</span></span></span></span></p>
<p>BSC 信道（二进制对称 DMC 信道）：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mn>1</mn><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>ε</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C=1-H(ε)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">ε</span><span class="mclose">)</span></span></span></span> bit （ε 为转移概率）</p>
<p>二元擦除信道（两个输入的擦除是改到同一个值）：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mn>1</mn><mo>−</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">C=1-a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> bit （a 为擦除概率）</p>
<p>定义如果信道转移矩阵的任何两行互相置换，任何两列也互相置换，那么称该信道是对称的。如果转移矩阵的每一行都是其他每行的置换，而所有列的元素 sum 相等，则称这个信道是弱对称的。</p>
<p>对于弱对称信道，C=log (Y 的取值个数) - H(转移矩阵的一行)</p>
<p>和信道：指在任一单位时间内随机地选用任一个而不能同时选用多个的信道。和信道中 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mo>∑</mo><msup><mn>2</mn><msub><mi>C</mi><mi>i</mi></msub></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C=log(\sum 2^{C_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0715em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h2>编码</h2>
<p>(M, n) 码指的是 X 的 (码本长度，序列长度)。</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV19z4y1o7nV/?p=2&amp;t=642" target="_blank" rel="noopener noreferrer">定长编码</a>
<ul>
<li>无失真：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>&gt;</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R&gt;H(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></li>
<li>输出信息率（码率）：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo>⋅</mo></mrow><annotation encoding="application/x-tex">R=log m\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord">⋅</span></span></span></span> (编码后长度/编码前长度)，其中 m 为进制数</li>
<li>编码效率 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi><mo>=</mo><mfrac><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><mi>R</mi></mfrac></mrow><annotation encoding="application/x-tex">\eta=\frac{H(X)}R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
</ul>
</li>
</ul>
<p>信道编码定理：对于离散无记忆信道，小于信道容量 C 的所有码率都是可达的。</p>
<h3>信源编码</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Huffman_coding" target="_blank" rel="noopener noreferrer">Haffman 编码</a>：构建 Haffman Tree 即可，非常简单。每次取两个最小的节点组成新的子树。约定每次概率较大的分配 0，较小的分配 1。</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%9C%AF%E7%BC%96%E7%A0%81" target="_blank" rel="noopener noreferrer">算术编码</a>：直接把整个输入的消息编码为一个数
<ul>
<li>先对输入符号的概率进行估计</li>
<li>按照估计概率之比，对 0-1 的区间进行切分</li>
<li>每次取实际信息的一个符号，在符号对应的区间继续按照相同的比例切分</li>
<li>切分全部结束后，任取最终区间内的一点即为编码结果。最终可以将此小数转为整数；也可以转为二进制。</li>
</ul>
</li>
</ul>
<h2>微分熵</h2>
<p>连续变量的熵 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo>∫</mo><mi>S</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">h(X)=-\int_S f(x)log f(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1225em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></p>
<p>正态分布熵：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>e</mi><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mtext>&nbsp;</mtext><mi>b</mi><mi>i</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">h(N(\mu,\sigma^2))=\frac12log(2\pi e \sigma^2) \ bits</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace">&nbsp;</span><span class="mord mathnormal">bi</span><span class="mord mathnormal">t</span><span class="mord mathnormal">s</span></span></span></span></p>
<h2>高斯信道</h2>
<p>一般功率要求 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>∑</mo><msubsup><mi>x</mi><mi>i</mi><mn>2</mn></msubsup><mo>≤</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">\frac1n\sum x_i^2\le P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></p>
<p>高斯信道：<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Z</mi><mi>i</mi></msub><mo>∼</mo><mi mathvariant="script">N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Z_i\sim\mathcal{N}(0, N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.14736em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p>
<p><span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><msup><mi>X</mi><mn>2</mn></msup><mo>=</mo><mi>P</mi><mo separator="true">,</mo><mi>E</mi><msup><mi>Y</mi><mn>2</mn></msup><mo>=</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">EX^2=P, EY^2=N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></p>
<p><span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>≤</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>l</mi><mi>o</mi><mi>g</mi><mn>2</mn><mi>π</mi><mi>e</mi><mo stretchy="false">(</mo><mi>P</mi><mo>+</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(Y)\le\frac12log2\pi e(P+N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p>
<p><span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>l</mi><mi>o</mi><mi>g</mi><mn>2</mn><mi>π</mi><mi>e</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">h(Z)=\frac12log2\pi eN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></p>
<p><span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mi>P</mi><mi>N</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C=\frac12log(1+\frac{P}{N})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，最大值在 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>∼</mo><mi mathvariant="script">N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim\mathcal{N}(0, P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.14736em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span></p>
<p>并联高斯信道容量 = sum</p>
]]></content:encoded>
    </item>
    <item>
      <title>Vue.js</title>
      <link>https://absx.pages.dev/coding/vue.html</link>
      <guid>https://absx.pages.dev/coding/vue.html</guid>
      <source url="https://absx.pages.dev/rss.xml">Vue.js</source>
      <description>Vue.js 前言 前端技术栈里，我最熟悉的肯定就是 vue 了，这两年折腾博客不是白折腾的。但是之前主要学习的还都是 Vue2 语法，并且伴随着摸索的痛苦。现在由于一些契机，我开始较为系统地学习前端，因此有了这一篇文章。 在了解了其他框架后，我发现 Vue 关键字太多很难记这一点确实是对的。 Vue 2 与 Vue 3 Vue 当前版本迭代到 Vue...</description>
      <category>编程</category>
      <pubDate>Fri, 18 Oct 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>前言</h2>
<p>前端技术栈里，我最熟悉的肯定就是 vue 了，这两年折腾博客不是白折腾的。但是之前主要学习的还都是 Vue2 语法，并且伴随着摸索的痛苦。现在由于一些契机，我开始较为系统地学习前端，因此有了这一篇文章。</p>
<p>在了解了其他框架后，我发现 Vue 关键字太多很难记这一点确实是对的。</p>
<h2>Vue 2 与 Vue 3</h2>
<p>Vue 当前版本迭代到 Vue 3。但是如果上网问 GPT，给出的答案基本全是 Vue 2 的答案。截至 2024.10 的现在，本博客的所有组件仍然是 Vue 2 写成的。</p>
<p>Vue 3 基本上兼容 Vue 2 的写法。当我尝试了一下 Vue 3 语法后我感觉确实不错，比 Vue 2 要灵活多了。</p>
<h3>迁移到 Vue 3</h3>
<p>Vue3 的所有函数和导出全部写在 <code>setup()</code> 里，也可以使用 <code>&lt;script setup&gt;</code> 语法糖，免去两层嵌套和手动导出。</p>
<p>Vue2 使用大量的 <code>this.$set</code> 进行组件状态更新和重新渲染；Vue 3 只需要把变量声明为 <code>ref</code>/<code>reactive</code> 即可。具体用法和 android 差不多，ref 必需取 <code>.value</code>，是浅层的变更追踪；reactive 主要用于各种对象与容器，是深层变更追踪，reactive 对象本身是一个 proxy 而不是原先的类型。</p>
<p>Vue3 本来还有个 <code>$ref()</code> 的语法糖可以将 ref 的 <code>.value</code> 给省掉，但是后来在 Vue3.4 废弃了。</p>
<ul>
<li>关于 props 修改：Vue2 的 <code>props</code> 可以整个直接复制到 Vue3 的 <code>defineProps()</code> 括号里。调用时，需要把 <code>this.</code> 改为 <code>props.</code>。</li>
</ul>
<h2>组件解析</h2>
<p>每个 <code>.vue</code> 组件由 template, script, style 三部分组成。</p>
<h3>template</h3>
<ul>
<li>在标签区域里使用 <code>:</code> (v-bind) 进行表达式调用，例如 <code>a="root"</code> 表示给 a 赋值为字符串 <code>"root"</code>，而 <code>:a="root"</code> 表示给 a 赋值为名为 root 的变量的值。
<ul>
<li>vue2 中，只写函数名则只调用，不拿返回值；加了括号是拿返回值。</li>
</ul>
</li>
</ul>
<h3>style</h3>
<p>请务必使用 <code>&lt;style scoped&gt;</code>！避免 css 污染其他样式。更常用的是 <code>&lt;style lang="scss" scoped&gt;</code>，可以同时使用 scss 语法。</p>
<p>style scoped 里的样式默认会穿透到子组件里。</p>
<h3>script</h3>
<p>使用 <code>&lt;script lang="ts"&gt;</code> 可以指定 ts 语法。vue 3 里一般使用 <code>&lt;script lang="ts" setup&gt;</code>，setup 是一个语法糖。</p>
<h2>vue 类型与方法</h2>
<h3>ref</h3>
<p>最基础的响应式，不多说了。用的时候需要 <code>.value</code>。</p>
<h3>computed</h3>
<p>Vue2 与 Vue3 中都有 computed。我最开始以为是在编译期就计算出结果（），结果不是，computed 是用于追踪数据变化的。</p>
<p><code>computed()</code> 接受一个闭包，这个闭包一般会捕获外部变量。当此捕获变量被改变时，该闭包就会重新计算。它可以维护数据之间的依赖关系，而 computed 属性的计算顺序是基于依赖关系的树状结构。</p>
<p>类似的函数还有 watch，区别：</p>
<p>| <strong>特性</strong>     | <strong>computed</strong>                           | <strong>watch</strong>                                     |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>修图嵌字</title>
      <link>https://absx.pages.dev/learning/ps.html</link>
      <guid>https://absx.pages.dev/learning/ps.html</guid>
      <source url="https://absx.pages.dev/rss.xml">修图嵌字</source>
      <description>修图嵌字 因为一些契机，开始学修图/嵌字。 此处内容肯定以 PS 为主。如果使用其他工具会先声明。 下载 PS：详见。我目前用的 2024 版。 常用快捷键 Ctrl + k 打开首选项（设置） 按住空格可拖动 x 交换前景色和背景色 Ctrl + d 取消选区 Ctrl + j 将选中区域/图层克隆为新图层 Alt + del 将选中区域填充为前景色...</description>
      <category>学习</category>
      <category>爱好</category>
      <pubDate>Mon, 30 Sep 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>因为一些契机，开始学修图/嵌字。</p>
<p>此处内容肯定以 PS 为主。如果使用其他工具会先声明。</p>
<h2>下载</h2>
<ul>
<li>PS：详见<a href="/farraginous/recommend_websites.html#%E5%AA%92%E4%BD%93%E5%88%9B%E4%BD%9C" target="_blank">网址汇总</a>。我目前用的 2024 版。</li>
</ul>
<h2>常用快捷键</h2>
<ul>
<li><code>Ctrl + k</code> 打开首选项（设置）</li>
<li>按住空格可拖动</li>
<li><code>x</code> 交换前景色和背景色</li>
<li><code>Ctrl + d</code> 取消选区</li>
<li><code>Ctrl + j</code> 将选中区域/图层克隆为新图层</li>
<li><code>Alt + del</code> 将选中区域填充为前景色</li>
</ul>
<h2>配置</h2>
<p>首选项配置：</p>
<ol>
<li>选中 <em>工具 - 用滚轮缩放</em></li>
<li>取消选中 <em>工具 - 启用轻击平移</em></li>
</ol>
<p>其他配置：</p>
<ol>
<li>关闭 <em>视图 - 对齐</em>，否则元素吸附太多，移动受限。</li>
</ol>
<h2>基础</h2>
<ul>
<li>旋转
<ul>
<li>文本框旋转：需要先 <em>栅格化文本</em>，再选中后 <code>Ctrl + t</code> <em>自由变换</em> 然后旋转。</li>
<li>提取元素并旋转：框选，建个新的图层，旋转该图层</li>
</ul>
</li>
</ul>
<h2>嵌字技巧</h2>
<h3>去字留背景</h3>
<p>背景指的是非纯色较复杂的图案。有几种方法可以做到。</p>
<ol>
<li>选区后，<code>Shift + F5</code> 打开填充，选择 <em>内容识别</em>（默认），直接确定。这个方法可能会去除一些背景，需要用仿制图章再画回来。</li>
<li>直接用移除工具，根据情况可能需要画多次。对于简单背景的效果很好。</li>
<li>选区，然后 <em>编辑 - 内容识别填充</em>。这种方法也可能损背景。</li>
</ol>
<h2>字体</h2>
<p>我去嵌字教程里下过<a href="https://t.me/absolutexsresource/15" target="_blank" rel="noopener noreferrer">字体包</a>。该教程强推华康，这系列的字体虽然多，但只有繁中，不能用于简中。而我是希望能使用简中字体的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>其他艺术形式</title>
      <link>https://absx.pages.dev/hobbies/art.html</link>
      <guid>https://absx.pages.dev/hobbies/art.html</guid>
      <source url="https://absx.pages.dev/rss.xml">其他艺术形式</source>
      <description>其他艺术形式 这里记录的是较少的，一般心血来潮才会看的作品形式。 主要的艺术形式记录请跳转对应页面（ | | ）。 漫画 电影 资源来源：各大 PT 站 | RARBG 纪录片/连续剧 稍后再看 漫画 今生恋人，前世冤家（等待连载）</description>
      <category>爱好</category>
      <pubDate>Fri, 23 Aug 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>这里记录的是较少的，一般心血来潮才会看的作品形式。</p>
<p>主要的艺术形式记录请跳转对应页面（<a href="/hobbies/galgame.html" target="_blank">galgame</a> | <a href="/hobbies/anime.html" target="_blank">番剧</a> | <a href="/hobbies/books.html" target="_blank">小说</a>）。</p>
<h2>漫画</h2>
<!-- prettier-ignore -->
<table>
<thead>
<tr>
<th style="text-align:center">名</th>
<th style="text-align:center">时间</th>
<th style="text-align:center">评价</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://m.manhuagui.com/comic/53159/" target="_blank" rel="noopener noreferrer">我成了魔族的宠物</a></td>
<td style="text-align:center">2024.11.09-<br>04，等待连载</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://m.manhuagui.com/comic/44973/" target="_blank" rel="noopener noreferrer">傲娇女友心想刺成</a></td>
<td style="text-align:center">2024.10.09</td>
<td style="text-align:center">草！</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://copymanga.tv/comic/vryouxizhuanshengyishijietiaojiaomowangmeishaonvclothoutsaber/chapter/519b94f4-65e3-11e9-8bc8-024352452ce0" target="_blank" rel="noopener noreferrer">VRエロゲーやってたら異世界に転生したので、美少女魔王を奴隷化する</a></td>
<td style="text-align:center">2024.10.025-<br>19 话，等待连载</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://mangabz.com/30986bz/" target="_blank" rel="noopener noreferrer">最果てに惑う</a></td>
<td style="text-align:center">2024.09.15-<br>Ch13.2，等待连载</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">我将要支配你们的一切</td>
<td style="text-align:center">2024.08.22-<br>2024.08.31，烂尾，15 话</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://t.me/absolutexsH/2071" target="_blank" rel="noopener noreferrer">SEX&amp;迷宫！！~在我家地下出现了H次数=等级的迷宫！？~</a></td>
<td style="text-align:center">2024.06.22-<br>2024.06.2x</td>
<td style="text-align:center">见链接</td>
</tr>
</tbody>
</table>
<h2>电影</h2>
<ul>
<li>资源来源：各大 PT 站 | <a href="https://wvw.rarbg.tw/" target="_blank" rel="noopener noreferrer">RARBG</a></li>
</ul>
<!-- prettier-ignore -->
<table>
<thead>
<tr>
<th style="text-align:center">名</th>
<th style="text-align:center">时间</th>
<th style="text-align:center">评价</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">盗梦空间 </td>
<td style="text-align:center">2024.12.11</td>
<td style="text-align:center">留白，有意思</td>
</tr>
<tr>
<td style="text-align:center">No More Bets - 2023</td>
<td style="text-align:center">2024.09.29</td>
<td style="text-align:center">虽然剧情有点刻意，不过拍的不错</td>
</tr>
<tr>
<td style="text-align:center">金蝉脱壳 </td>
<td style="text-align:center">2024.09.21</td>
<td style="text-align:center">经典作品，把我的感觉还回来了</td>
</tr>
<tr>
<td style="text-align:center">金蝉脱壳2：冥府 </td>
<td style="text-align:center">2024.09.21-<br>观看中止</td>
<td style="text-align:center">确实烂，<a href="https://movie.douban.com/review/9437758/" target="_blank" rel="noopener noreferrer">影评</a>说得对</td>
</tr>
<tr>
<td style="text-align:center">天才计划 - 2020</td>
<td style="text-align:center">2024.09.20</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://zh.wikipedia.org/wiki/%E8%BF%B7%E5%A4%B1%E4%B8%9C%E4%BA%AC" target="_blank" rel="noopener noreferrer">迷失东京</a></td>
<td style="text-align:center">2024.08.21</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">隐入尘烟</td>
<td style="text-align:center">2024.06.26</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2>纪录片/连续剧</h2>
<!-- prettier-ignore -->
<table>
<thead>
<tr>
<th style="text-align:center">名</th>
<th style="text-align:center">时间</th>
<th style="text-align:center">评价</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">孤独的美食家</td>
<td style="text-align:center">2023.12.31-<br>在看</td>
<td style="text-align:center">好饿~</td>
</tr>
</tbody>
</table>
<h2>稍后再看</h2>
<ul>
<li>漫画
<ul>
<li><a href="https://18comic.vip/album/604146/%E4%BB%8A%E7%94%9F%E6%81%8B%E4%BA%BA-%E5%89%8D%E4%B8%96%E5%86%A4%E5%AE%B6-%E4%B8%8D%E5%92%95%E9%B8%9F%E6%B1%89%E5%8C%96%E7%BB%84-%E7%A6%81%E6%BC%AB%E5%A4%A9%E5%A0%82" target="_blank" rel="noopener noreferrer">今生恋人，前世冤家</a>（等待连载）</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Clojure</title>
      <link>https://absx.pages.dev/coding/clojure.html</link>
      <guid>https://absx.pages.dev/coding/clojure.html</guid>
      <source url="https://absx.pages.dev/rss.xml">Clojure</source>
      <description>Clojure 因为工作需要（写 jepsen test），不得不学习这门语言。这是一门 lisp 系纯函数式的语言。我还没忘记第一次读 SICP 时 lisp 给我带来的伤害，看起来 Clojure 也是括号满地，但是事到如今也只能硬着头皮上了。 学习 learnxinyminutes：学语言首选，并且它下面也推荐了几个其他网址，方便快速入门，我觉得...</description>
      <category>编程</category>
      <pubDate>Mon, 12 Aug 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>因为工作需要（写 jepsen test），不得不学习这门语言。这是一门 lisp 系纯函数式的语言。我还没忘记第一次读 SICP 时 lisp 给我带来的伤害，看起来 Clojure 也是括号满地，但是事到如今也只能硬着头皮上了。</p>
<h2>学习</h2>
<ol>
<li><a href="https://learnxinyminutes.com/docs/zh-cn/clojure-cn/" target="_blank" rel="noopener noreferrer">learnxinyminutes</a>：学语言首选，并且它下面也推荐了几个其他网址，方便快速入门，我觉得挺好的。</li>
<li><a href="https://clojuredocs.org/quickref" target="_blank" rel="noopener noreferrer">official quickref</a>：肯定少不了来这里查。可以学到许多 builtin functions。</li>
<li><a href="https://www.youtube.com/watch?v=vK1DazRK_a0" target="_blank" rel="noopener noreferrer">Solving Problems the Clojure Way - Rafal Dittwald</a>：函数式思想入门，茅塞顿开</li>
<li><a href="https://github.com/geekerzp/clojure-style-guide/blob/master/README-zhCN.md" target="_blank" rel="noopener noreferrer">Clojure 风格指南</a></li>
<li><a href="https://www.braveclojure.com/writing-macros/" target="_blank" rel="noopener noreferrer">Writing Macros - Clojure for the Brave and True</a></li>
</ol>
<h2>开发环境</h2>
<p>vscode 安装 <em>Calva Spritz</em> 即可。</p>
<p><code>Ctrl + Shift + P</code>，<em>create a mini clojure project</em>。然后点击下方的 REPL（一个可以实时查看执行结果的东西），打开（Jack-in）即可。一般选择 Babashka，<s>因为其他两个都打不开</s>。</p>
<p>用法只需要掌握：在当前代码行上，按 <code>Alt + Enter</code> 执行单句。如果有调用前面的函数，先按 <code>Ctrl + Shift + c, Enter</code> 引入依赖，再执行单句。（什么邪恶快捷键）</p>
<p>更多可以看<a href="https://calva.io/commands-top10/" target="_blank" rel="noopener noreferrer">The Top 10 Calva Commands</a>。</p>
<h2>语言基础</h2>
<p>零散知识点。</p>
<ul>
<li>function 隐式命名规则：
<ul>
<li>后面加 v 指返回 vector（<code>[]</code>），例如 <code>filterv</code>, <code>mapv</code>。</li>
</ul>
</li>
<li>list 和 vec 的区别：list 的尾部是前面，vec 尾部是后面。许多函数例如 <code>conj</code>, <code>peek</code>, <code>pop</code> 都遵循这个规律。正常人都会用 vector 吧。<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">peek</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> '(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">; =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">peek</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">; =&gt; 2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>但是有例外，<code>last</code> 不遵循此规律。。</li>
</ul>
<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">last</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> '(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">; =&gt; 2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li><code>-&gt;</code> 和 <code>-&gt;&gt;</code> 的区别：添加的位置不同。<code>-&gt;</code> 加到调用链每一环函数参数首位，<code>-&gt;&gt;</code> 加到调用链每一环参数末尾。<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">; (func 1 x y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">-&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">; (func x y 1)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>apply 可以实现函数参数解包，例如<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> wrap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">myfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> wrap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  [&amp; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> myfunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>这两个是等价的。</li>
<li>if 内可以判断很多类型，常见的 <code>[]</code> <code>()</code> 都能判 false</li>
<li>peek 是 last 的高速代替</li>
<li>identity 代表返回自身的函数，用于 filter 等。但是不允许用 <code>#(%)</code>。</li>
</ul>
<p>和其他语言对比：</p>
<ul>
<li>loop - recur 就是 for - continue</li>
<li>defprotocol 就是定义 interface，defrecord 就是 class</li>
<li>mapcat 就是 flatmap</li>
<li>distinct 就是 unique 列表去重</li>
<li><a href="https://stackoverflow.com/questions/2588227" target="_blank" rel="noopener noreferrer">没有 zip function</a>，要自己写。<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> zip</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">  "[1 2 3]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">   [4 5 6]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">  =&gt; [[1 4]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">      [2 5]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">      [3 6]"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">m</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> m</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>没有 filter-map function：<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> filter-map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> coll</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> identity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> coll</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
<h2>项目管理</h2>
<ul>
<li>filename 除去 <code>.clj</code> 后缀，不能包含 <code>.</code>。因为 ns 里的 <code>.</code> 代表多一层 dir <code>/</code>。</li>
<li>导入另一个文件的函数：<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">ns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> xxx.yyy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> '[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">xxx.zzz</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :as</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> myalias</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">; 也可以这样写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">ns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> xxx.yyy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">xxx.zzz</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :as</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> myalias</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">myalias/myfunc</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>想要运行这个需要用 <code>clj</code> 命令行，在 REPL 内运行只会报错。只有下面的 <code>:refer</code> 形式可以在 REPL 用，不会炸。</li>
<li>引用标准库：<code>use :only</code> 已经 deprecate 了，用 require。<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">ns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> chapter2.2-37U</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">clojure.test</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :refer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">deftest</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">chapter2.2-36</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :as</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> acn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
<h3>包管理</h3>
<p>一般使用 <code>deps.edn</code> 作为包管理。<code>project.clj</code> 已经过时了。</p>
<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:deps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {cheshire/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">cheshire</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:mvn/version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "5.11.0"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  org.clojure/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">data.json</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:mvn/version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "2.5.0"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}}}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>clj xxx.clj</code> 运行程序时会自动下载依赖。依赖通过 maven 管理，下载位置在 <code>~/.m2</code>。</p>
<h2>序列化</h2>
<p>如果只是需要 RPC，不涉及其他语言，可以用 <a href="https://github.com/taoensso/nippy" target="_blank" rel="noopener noreferrer">nippy</a>，这是一个快速的 binary 序列化库。</p>
<p>如果需要 json 等标准格式，可以用官方的 <a href="https://github.com/clojure/data.json" target="_blank" rel="noopener noreferrer">clojure.data.json</a> 或者 <a href="https://github.com/dakrone/cheshire" target="_blank" rel="noopener noreferrer">cheshire</a>。</p>
<p>不过要注意，无论是 clojure.data.json 还是 cheshire，对 key type 的处理都是一坨大便。</p>
<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">ns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">clojure.data.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :as</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> json</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> my-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:type</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:f</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :txn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [[</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:w</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:time</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 3291485317</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:process</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:index</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> my-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> json-string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">json/write-str</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> my-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> json-string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> deser-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">json/read-str</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> json-string</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :key-fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> keyword</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> deser-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{:type :invoke, :f :txn, :value [[:w 2 1]], :time 3291485317, :process 0, :index 0}</span></span>
<span class="line"><span>{"type":"invoke","f":"txn","value":[["w",2,1]],"time":3291485317,"process":0,"index":0}</span></span>
<span class="line"><span>{:type invoke, :f txn, :value [[w 2 1]], :time 3291485317, :process 0, :index 0}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>冒号被丢失了！</p>
<p>因此要解决这个问题，需要自行进行一些处理。</p>
<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">ns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">cheshire.core</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :as</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> json</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">clojure.walk</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :as</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> walk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> custom-serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">json/generate-string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">walk/postwalk</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">keyword?</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">          (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">          x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">      data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> custom-deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">json-str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">json/parse-string</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> json-str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">walk/postwalk</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">string?</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">          (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">.startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ":"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">keyword</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">subs</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> x</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">            x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">          x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">      data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> my-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:type</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:f</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :txn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [[</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:w</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:time</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 3291485317</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:process</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:index</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> my-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> json-string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">custom-serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> my-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> json-string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> deser-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">custom-deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> json-string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> deser-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{:type :invoke, :f :txn, :value [[:w 2 1]], :time 3291485317, :process 0, :index 0}</span></span>
<span class="line"><span>{":type":":invoke",":f":":txn",":value":[[":w",2,1]],":time":3291485317,":process":0,":index":0}</span></span>
<span class="line"><span>{:type :invoke, :f :txn, :value [[:w 2 1]], :time 3291485317, :process 0, :index 0}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>打包</h2>
<p>将 clojure 打包为 jar 文件，方便调用。
假设我有一个 <code>src/mytest.clj</code>：</p>
<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">ns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> mytest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:gen-class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> -main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  [&amp; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">str</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "Hello, World!"</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>老式：lein uberjar</summary>
<p>官网有 <a href="https://clojure.org/guides/tools_build" target="_blank" rel="noopener noreferrer">tools.build Guide</a>，但是讲得实在是抽象。因此我先尝试老式打包。</p>
<ul>
<li>project.clj<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defproject</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> myproject</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "0.1.0"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">description</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "A simple Hello World project"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [[org.clojure/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">clojure</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "1.11.4"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">; 是必要的，否则找不到 main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">main</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> mytest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">aot</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">mytest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">])</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
<p>然后运行 <code>lein uberjar</code> 打包，<code>java -cp target/myproject-0.1.0-standalone.jar clojure.main -m mytest</code> 验证。也可以直接 <code>java -jar target/myproject-0.1.0-standalone.jar</code>。</p>
</details>
<ul>
<li>
<p><a href="https://clojure.org/guides/tools_build" target="_blank" rel="noopener noreferrer">tools.build Guide</a>，多看看，实际上没有太抽象，照着抄就完了。</p>
</li>
<li>
<p><code>deps.edn</code></p>
<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"src"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">;; project paths</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">deps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {}       </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">;; project deps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">aliases</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">;; Run with clj -T:build function-in-build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">  :build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:deps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {io.github.clojure/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">tools.build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:git/tag</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "v0.10.5"</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :git/sha</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "2a21b7a"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">          :ns-default</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}}}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><code>build.clj</code></p>
<div class="language-clojure line-numbers-mode" data-highlighter="shiki" data-ext="clojure" data-title="clojure" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">ns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">clojure.tools.build.api</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> :as</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> lib</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> '</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">my</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">lib1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">format</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "1.2.%s"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/git-count-revs</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> class-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "target/classes"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> jar-file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">format</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "target/%s-%s.jar"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> lib</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> uber-file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">format</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "target/%s-%s-standalone.jar"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> lib</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">;; delay to defer side effects (artifact downloads)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> basis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/create-basis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:project</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "deps.edn"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">})))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> clean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:path</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "target"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> jar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/write-pom</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:class-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> class-dir</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">                :lib</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> lib</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">                :version</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> version</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">                :basis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">basis</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">                :src-dirs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"src"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/copy-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:src-dirs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"src"</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "resources"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">              :target-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> class-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/jar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:class-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> class-dir</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">          :jar-file</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> jar-file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">defn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> uber</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">clean</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/copy-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:src-dirs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"src"</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "resources"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">              :target-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> class-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/compile-clj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:basis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">basis</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">                  :ns-compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> '[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">mytest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">                  :class-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> class-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">b/uber</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">:class-dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> class-dir</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">          :uber-file</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> uber-file</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">          :basis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">basis</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">          :main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> '</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">mytest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
<p>运行 <code>clj -T:build clean &amp;&amp; clj -T:build uber</code> 即可。（<code>clj -T:build jar</code> 是来凑数的不用管）</p>
<h2><a href="/gossip/fuckxxx.html#clojure-%E6%9C%89%E5%A4%9A%E9%9A%BE%E7%94%A8" target="_blank">劝退</a></h2>
]]></content:encoded>
    </item>
    <item>
      <title>包管理器</title>
      <link>https://absx.pages.dev/coding/package_manager.html</link>
      <guid>https://absx.pages.dev/coding/package_manager.html</guid>
      <source url="https://absx.pages.dev/rss.xml">包管理器</source>
      <description>包管理器 前置文章： 20240805 晚，辗转反侧，想到了点灵感，因此有了这篇文章。 Nix 一个月前我从 Archlinux 叛逃到了 NixOS，因为 Nix 宣传的特性确实很吸引我。然而现在我只觉得上了贼船，很多宣称的优势达不到我的心理预期。（这里先不谈 ，单谈 Nix 包管理） Nix 的包多。 有点扯。虽然 repology 上 Nix 的...</description>
      <category>编程</category>
      <pubDate>Tue, 06 Aug 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>前置文章：<a href="/articles/linux/package.html" target="_blank">linux - 包管理与使用推荐</a></p>
</blockquote>
<p>20240805 晚，辗转反侧，想到了点灵感，因此有了这篇文章。</p>
<!-- ## scoop

最早用的包管理器应该是 scoop。让我接触到只要知道名字，一行命令就能安装软件，省去所有环境变量的麻烦配置的方法。

不过 scoop 本身用 powershell 写的，只支持 windows，代码也比较捞。而且近年来直连 Github 网络质量下降，对于没有代理的新人还是不太友好的。

## pacman

我最早主用的 linux distro 就是 Archlinux， -->
<h2>Nix</h2>
<p>一个月前我从 Archlinux 叛逃到了 NixOS，因为 Nix 宣传的特性确实很吸引我。然而现在我只觉得上了贼船，很多宣称的优势达不到我的心理预期。（这里先不谈 <a href="/articles/linux/nix.html#%E5%8A%9D%E9%80%80" target="_blank">NixOS 的其他缺陷</a>，单谈 Nix 包管理）</p>
<ol>
<li>Nix 的包多。
<ul>
<li>有点扯。虽然 <a href="https://repology.org/repositories/packages" target="_blank" rel="noopener noreferrer">repology</a> 上 Nix 的数据很好看，但是
<ol>
<li>Nix 有很多不同版本的相同软件是算不同包的；</li>
<li>编程语言（例如 haskell）的 dev package 占了很大一部分数量，而非可使用的二进制软件包。</li>
</ol>
</li>
</ul>
</li>
<li>Nix 把所有包都放在一个 store 下，使用 hash 对包进行标识。
<ul>
<li>既然都上 hash 了，那我肯定期望我能安装任何包且不发生冲突，并且我更新的任何依赖都不应该 break 上层应用版本。然而：
<ul>
<li>安装同一个包的不同 feature 会冲突，例如 <em>yt-dlp</em> 和 <em>yt-dlp-light</em>。这倒能理解，毕竟系统也不知道要用哪个链到 <code>/etc/profiles/per-user/&lt;user&gt;/bin/</code>。</li>
<li>关于更新依赖 break 版本，我自己就亲身经历了一次：前段时间的 python 更新到 3.12 break 了一大堆包，例如我用的 activitywatch。原因大概是 <strong>nix 通过 <code>flake.lock</code> 锁全局版本</strong>，而软件自己是不锁自身依赖版本的。<code>pkgs.python</code>（无版本后缀）是滚动更新的，它更新到 3.12，依赖它的包也会自动更新依赖。如果要指定旧版本应该需要依赖 <code>pkgs.python311</code>，这也是 Nix 不同版本算不同包的一个原因吧。但这就让我很不爽，因为一个软件而锁死整个系统版本，要么就放弃这个软件，那跟一般的发行版不是差不多吗？你都上了 hash，膨胀了这么多路径，还这么捞？</li>
<li>由上述，<code>pkgs.python311</code> 和 <code>pkgs.python313</code> 也是不能同时装的。。。因为这两个算是平等的两个包，而不是同一个包的新旧关系，系统不知道用哪个。。当然如果只是作为其他软件的依赖，是可以共存的。这算是一点微弱优势，但是挽回不了局面；并且很吃打包者水平（很多就直接依赖 <code>pkgs.python</code> 完事了，而不会去依赖 <code>pkgs.python311</code>），否则此次 break 就不该发生。</li>
</ul>
</li>
</ul>
</li>
<li>Nix 不推荐打 bin 包，每个包都从源码编译（如果有的话），bin 则通过 cache server 和 mirror server 提供。
<ul>
<li>首先大家想必都喜欢用 bin 包吧，就连 Gentoo 也 goes Binary 了不是吗。<s>我超喜欢，甚至写了 <a href="https://github.com/lxl66566/bpm" target="_blank" rel="noopener noreferrer">bpm</a>（</s></li>
<li>第一次听到这个 cache 的思路觉得还挺清奇的，这样确实没有必要多打一个 bin。但是实际体验并不佳。
<ol>
<li>官方的 cachix 在国外，速度慢，没多少人用。</li>
<li>一般大家都是用各高校镜像站，然而 Nix 镜像不像其他滚动镜像只存一个最新版本，Nix 是需要存多个版本的。高校镜像的钱也不是吹来的，本来包就多，还有国内 PCDN 恶意刷流，在此之上还要保证足够服务质量算是比较困难了。于是镜像站同步速率放缓，也会导致 update 时有的软件包在 cache 里找不到需要自己编译，到头来不打 bin 包吃亏的还是自己。</li>
<li>有一些第三方提供自建 cache server 的服务，例如 garnix。但是人家是新兴商业公司，免费版限时，而且据说经常卡死，把时间配额耗完。而且自建 cache server 只是换了个地方编译而已，本质还是编译，并没有为全球变暖做出什么改善。</li>
</ol>
</li>
<li>结果就是我也能看到有挺多人打包了 bin 上去，bin 和 unbin 混在一起，反而让人迷惑。</li>
<li>随着包越来越多，cache server 的编译负担会越来越重。服务器的性能不是无限增长的。别人已经编译过一次的 bin 包还需要 cache server 再次编译，感觉也不是很 bin。</li>
<li>自己改过的 drv 一定需要重新编译，即使只是改一个运行参数。</li>
</ul>
</li>
<li>store 下的包通过链接进系统。
<ul>
<li>NixOS 管理整个系统，没什么好说。好处是可以玩一些 root on tmpfs 的骚操作，最大的问题是 NixOS 这样搞不支持 <a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard" target="_blank" rel="noopener noreferrer">FHS</a> 标准，装个啥软件，找个啥 lib，搞个啥编程开发，全部都要自己去写 <code>shell.nix</code> 或 <code>flake.nix</code>。像我这种愣头青，还不会 nix 语法就直接莽上 NixOS 的就很难受，干个啥都相当于打包（文档还烂）。
<ul>
<li>nix 语言的学习曲线也是公认的陡峭；而且难的不是语言，而是 builtin functions/variables，查也查不到。例如我想看看 <code>wrapProgram</code> 的详细用法，结果到处搜不到文档，最后求助群友问哪里能看详细 manual，群友扔给我 Github 源码… 这种学习的 overheads 不可谓不高。</li>
</ul>
</li>
<li>我感觉坏处是比好处大的。</li>
</ul>
</li>
<li>版本回退时会清空应用数据，例如 microsoft edge，telegram。回退其实比想象中要频繁，例如一发 rebuild 在后期失败了，再次回到 old conf 时就算是回退。于是我莫名其妙丢失了许多应用数据与 cookies。</li>
</ol>
<p>除了这些特性，还有一些表现：</p>
<ol>
<li>Nix 每次更新下载全量 nixpkgs metadata，是一个经典的 40+M 的 <code>.tar.gz</code>，里面包的啥玩意没拆过不知道，但是这量还是有点大的。看看隔壁 Arch，人家 binary 数据库也就 10M 左右。（emmm，不过人家 core 包量级确实小，好像也没得说）</li>
</ol>
<h2>打包</h2>
<h3>语言</h3>
<p>Arch 用的 PKGBUILD 是简单粗暴 bash。虽然也可以引入个 python 依赖去写 py，但是总归是不方便的。</p>
<p>Nix 自身即高级函数式语言，但是前面提到学习曲线陡峭，加之 Nix 的报错非常模糊，因此我也不喜欢。</p>
<h3>更新</h3>
<p>Arch 软件包需要自己关注版本更新，并且手动 update version。虽然有例如 updpkgsums 等东西帮我把其他的活干完，但这也只能算是半自动。而且如果不开隔离环境，打出来的包可能在其他人系统上跑不了，因为我有的依赖别人不一定有。</p>
<p>Nix 好一点，Nix 打包默认隔离环境，也就是所有系统上的 build 表现应该是一样的。因此上 nixpkgs 提交软件包只要跑过了 CI 就没啥问题。但是 PR 也都要人来合，不像 Arch AUR 归自己，想 push 就 push。因此也只能算是半自动。</p>
<p>貌似也有一些 bot 提供了简单的全自动实现，例如 Arch 的 lilac，不过我没用过不清楚效果，nixpkgs 这里也不懂有没有 update bot（应该得有吧），反正有个 nixpkgs-merge-bot。</p>
<h2>我的灵感</h2>
<p>喷了一大通，总算来到了灵感环节。我夜里想到一个 <s>universal package manager</s> 的方案（名字被用了！）。可能有一些尚未考虑到的 cases，如果能帮我指出，我会非常感激。</p>
<h3>前端</h3>
<ul>
<li>支持所有脚本语言编写构建脚本！与其做一个类似 nix 的万能但难学的语言，不如充分利用现有语言。提供内置的 python, lua, amber, nix, fish, zsh, nu, javascript... 语言解释器的下载。构建脚本继承 PKGBUILD 的简单粗暴，分成几个阶段（pre-, install, post-），每个阶段只需要用对应解释器运行对应代码即可。
<ul>
<li>不防恶意代码，但会在隔离环境构建（bwrap）。</li>
</ul>
</li>
<li>所有的 <code>-bin</code>, <code>-git</code> 和指定的 version 都算作同一个包，写在同一个 manifest 里面。安装时默认优先安装 bin 包，也可以指定行为。</li>
<li>可以用任意结构化格式储存 manifest！json, toml, yaml, ron, 甚至非结构化的 markdown!</li>
<li>打包脚本提供少量 builtin 变量，例如 <code>#OUT#</code>，<code>#TMP#</code>，<code>#ARCH#</code> 等，执行时直接全局替换完事。也可以选择不使用，而直接在脚本中调库获取。这样可以最小化打包者的心智负担。</li>
<li>在打包脚本中写版本更新与测试逻辑！方便使用 CI 全自动更新版本。（经验来自 dependabot）</li>
<li>每个打包脚本内都有依赖锁（hash + version），保证依赖版本不变。更新单个包绝不会破坏其上层软件包。</li>
</ul>
<h3>后端</h3>
<ul>
<li>类似 Nix，使用 hash 前缀，将所有软件包放在一个地方统一管理！允许多版本共存，并将脚本中指定的内容<strong>遵循 FHS 标准</strong>链接到标准位置。
<ul>
<li><s>统一管理就不用像 pacman 那样存所有软件的安装文件位置。只需存一个 hash 即可。</s> 呃，还要存链接位置，差不多</li>
<li>多版本名字冲突无法链接到同一位置？在链接后加上版本号解决；最高版本优先（无需添加版本号）。</li>
<li>显然一次链接几万个文件开销比较大，因此不能像 nix 那样玩 root on tmpfs。</li>
<li>链接的目的是什么？让依赖 FHS 的<strong>第三方软件/插件</strong>能够正常运行。但是通过包管理器本身安装的软件还是正常隔离环境运行的。</li>
<li>如果第三方软件不读符号链接？爬。
<ul>
<li>要么要用的人自己写 wrapper，从 store 链；要么就自己打包。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>分发</h3>
<ul>
<li>P2P torrent 网络分发，所有下载了包的人都自动加入上传。
<ul>
<li>为了防止恶意修改包后上传，每个包都会过两种不同的 hash 算法；hash 值是交给中心 server（github） 存储的，不会被篡改。</li>
</ul>
</li>
<li>(Optional) 只下载不上传？<s>学习 PT 站经验</s> 开个玩笑</li>
</ul>
<h3>基础设施</h3>
<p>写一点 converter 把 AUR 和 Nix 那边的现有打包脚本偷来（）</p>
<h2>external</h2>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/782348147" target="_blank" rel="noopener noreferrer">现代软件打包者的安全噩梦</a>，但是我不太赞同</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>SPEED UP！</title>
      <link>https://absx.pages.dev/articles/speedup.html</link>
      <guid>https://absx.pages.dev/articles/speedup.html</guid>
      <source url="https://absx.pages.dev/rss.xml">SPEED UP！</source>
      <description>SPEED UP！ 我打 已经有好几年了，共计接触了两部能够语音加速的游戏：天津罪 和 GINKA。游玩这两部作品让我非常兴奋：使用二倍速播放音频，我就能节省一半的游戏时间，相当于 galgame 游玩量变为了 2 倍。经历过加速后，再次玩其他语音速度极低的 galgame （真红真红真？）让我感觉像是在浪费生命。因此我尝试寻找能够让我节省时间的游戏加...</description>
      <category>教程</category>
      <pubDate>Sat, 27 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>我打 <a href="/hobbies/galgame.html" target="_blank">galgame</a> 已经有好几年了，共计接触了两部能够语音加速的游戏：<em>天津罪</em> 和 <em>GINKA</em>。游玩这两部作品让我非常兴奋：使用二倍速播放音频，我就能节省一半的游戏时间，相当于 galgame 游玩量变为了 2 倍。经历过加速后，再次玩其他语音速度极低的 galgame （真红真红真？）让我感觉像是在浪费生命。因此我尝试寻找能够让我节省时间的游戏加速方式。</p>
<h2>CE</h2>
<p>Cheat Engine 想必大家都不陌生，我也会使用 CE 进行 RPG galgame 的加速（兰斯系列）。CE 中有一个变速精灵的功能非常好用，用鼠标点几次即可加速游戏。但是 CE 不能加速游戏音频，这也是它的最大败笔。因此我需要另寻出路。</p>
<h2>解包与封包</h2>
<p>20240720 我尝试了一个想法：将 galgame 音频文件解包，加速后再封包回去。由于我不会逆向，因此使用的是 GARbro，这是一个非常泛用的，多目标 galgame 资源提取器。我使用 いろとりどりのセカイ HD 尝试，这个游戏把 <code>voice.bin</code> 单文件放在根目录下，非常明显，我很轻易地就提取出了游戏的所有 ogg 格式的语音。</p>
<p>那么我要如何将加速后的 ogg 封装回一个 <code>voice.bin</code> 呢？我被卡在了这一步下。GARbro 根据预设的解包规则检测出格式并解了包，但是却<strong>不告诉我这个包用的究竟是什么格式</strong>。Asuka Minato 也提醒：解包容易，但封包可能非常困难。因此我打消了这个想法。</p>
<h2>pyaudio</h2>
<p>20240724 我进行了初次尝试，写一个 python 脚本建立了一个系统音频合成器到扬声器的音频流，在中间使用脚本进行音频加速。</p>
<p>首先安装一个 VB Cable，其作用是修改输入输出设备，防止音频合成器直接将音频输出到扬声器，覆盖掉我处理后的输入。然后脚本大概是这样：</p>
<div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> pyaudio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 配置音频流参数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">FORMAT</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> pyaudio.paInt16</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">CHANNELS</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">RATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 44100</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">CHUNK</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1024</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">SPEED_FACTOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1.5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> pyaudio.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">PyAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> list_audio_devices_and_return_vb_cable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    info </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">get_host_api_info_by_index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    num_devices </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> info.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"deviceCount"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    device_map </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(num_devices):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        device_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">get_device_info_by_host_api_device_index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        device_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> device_info.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"name"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        device_map[device_name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Device ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">i</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> - Name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">device_info.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">'name'</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> - Input Channels: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">device_info[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">'maxInputChannels'</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">, Output Channels: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">device_info[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">'maxOutputChannels'</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">     # 直接返回 device id, for testing</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 获取设备索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">input_index, output_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF"> list_audio_devices_and_return_vb_cable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"VB-Cable Input: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">input_index</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">, VB-Cable Output: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">output_index</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">input_stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">FORMAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    channels</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">CHANNELS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">RATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    # rate=int(RATE * SPEED_FACTOR),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    input</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    frames_per_buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">CHUNK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    input_device_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">input_index,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">in_data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">frame_count</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">time_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    out_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(frame_count, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">exception_on_overflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (out_data, pyaudio.paContinue)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">output_stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    format</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">FORMAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    channels</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">CHANNELS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">RATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> SPEED_FACTOR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    # rate=RATE,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    output</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    # frames_per_buffer=int(CHUNK / SPEED_FACTOR),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    frames_per_buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">CHUNK</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    output_device_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">output_index,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    stream_callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">callback,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 检查是否成功打开</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">is_active</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">and</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> output_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">is_active</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"输入和输出流已成功打开。"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    while</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        time.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF"> KeyboardInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    # 用户中断程序时，关闭音频流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">stop_stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    input_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    output_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">stop_stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    output_stream.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    p.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">    exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>音频的模型可以想象成拥有一个 trunk 缓冲区，音频先被输入到缓冲区，然后再播放出去，而这个缓冲区归我所有，我可以对其进行任意操作。</p>
<p>先列出所有音频设备，然后指定音频合成器作为输入流，扬声器作为输出流，定义了一个 callback 函数让输出流可以直接通过 callback 去请求输入（也可以不用 callback，将逻辑写在 while True 里）。至于音频加速则体现在 output stream 的 rate 上，因此实际上没有对音频进行任何处理，只是改变了输出速率。</p>
<p>实际测试中，音频输出速度和频率确实升高了，但是表现为 (输出一段加速的音频 -&gt; 静音一段时间) 的循环。这是因为 trunk 的输入速率是恒定的，pyaudio 会 wait trunk 填满。如果我加速把 trunk 的音频打出去，那么就会有一段时间，trunk 里不存在音频，所以没有输出。</p>
<p>把 CE 和此脚本一起使用也还是一样的效果，因为 CE 本身不能加速音频，也就无法加速程序对 trunk 的填充速度。因此此次尝试失败，感觉尝试的方向就是错的，没法通过音频倒逼游戏速度。</p>
<h2>TAS</h2>
<p>20240727 （也就是本文撰写时间），我突然想到，TAS 是把游戏慢放，那么反向 TAS 是否就能够加速游戏呢？并且 TAS 视频中游戏声音是正常的，显然 TAS 有自己的办法处理游戏音频速度，所以理论上一定是行得通的。</p>
<h3>libTAS</h3>
<p>首先我尝试了 libTAS，这是一个泛目标开源 tas 库+软件，许多其他 TAS 生态是建立在 libTAS 上的。libTAS 只能运行在 linux。libTAS 在 NixOS 上的打包不算太好，低了一个版本，也缺失了 libtas32.so 库导致没法运行 32 位 exe，需要手动用 <code>LIBTAS_SO_PATH</code> 拉；然后 libTAS 运行时会去找 libalsa，NixOS 的 dynamic link 管理又是混沌与邪恶的，因此我还需要大费周章手动用 <code>LD_LIBRARY_PATH</code> 把运行库拉进来。</p>
<p>这一切做好以后，游戏还是打不开，显示 <em>HD 不是一个有效的 binary</em>… （HD 是游戏路径上的一个词）我怀疑它 parse 参数出了问题，但是我没有证据，它也不输出它用的启动指令。</p>
<p>后来我自己打了 1.4.6 的 libTAS 包，然后自己打了一串超级长的启动指令：</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">LD_LIBRARY_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">/tmp:/nix/store/1ry2s2jgqbl3w7w54b8biylwqdxy52zw-steam-fhs/usr/lib32/:LD_LIBRARY_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> LIBTAS_SO_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">/tmp/libtas.so</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> WINEPREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">/home/absx/.local/share/wineprefixes/origin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> libTAS</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>嗯，steam-fhs 还是好用的。现在我的游戏已经起来了，但是我发现我不会用 libTAS，无法调速。。反正 README 说的快捷键，TAB 和 V 这些都是用不了的，在 Qt GUI 窗口里设置速度也没有任何效果。</p>
<p>尝试在 windows WSL2 里用 libTAS，结果还要起 wine，那跟我在 linux 没有任何区别。不测了。</p>
<h3>hourglass</h3>
<p>转战 windows，hourglass 也是一个泛用 TAS 工具，仅支持 win32，不过它已经非常老了。我只是想试试看，没想到 hourglass 真的可以让我的游戏跑起来，并且能够改变游戏音频速度！但是 hourglass 有一些致命的缺陷：</p>
<ol>
<li>不支持鼠标</li>
<li>减速有多档位可调；但是加速只有一个 fastforward 用于快进的，大概有 10 倍速并且不可调。这个速度还不如不听语音（骂人）。</li>
</ol>
<p>基于这些原因，hourglass 也无法使用。但它的存在是有意义的：它至少给了我一个成功的例子，告诉我前方并非是一片黑暗，我做的事情并不是毫无希望的。</p>
<h3>其他</h3>
<p>尝试其他 TAS，但几乎找不到其他泛用的 TAS 了。TAS 世界的 tools 大多还是针对某个游戏或某个模拟器，这种任意进程加速的工具真是少之又少。</p>
<ul>
<li>BizHawk：泛用 TAS 工具，但仅支持镜像加载，主要针对游戏机，不符合我的需求。
<ul>
<li>不过也有一些 galgame 是使用 CD 的，我只能说保留尝试的可能性。</li>
</ul>
</li>
<li>UniTAS：专门针对 unity 游戏，有的 galgame 使用 unity 引擎的可能可以尝试。不过真心不多。</li>
<li><a href="#hourglass-resurrection">Hourglass-Resurrection</a>：一个 hourglass fork，但是也已经停更了。没有提供二进制，我尝试自己构建也失败了（VS 除了点构建运行就啥也不会干了）。后面有更详细的尝试过程。</li>
</ul>
<h3><a class="header-anchor" href="#libspeedhack"><span></span></a><a href="https://github.com/evg-zhabotinsky/libspeedhack" target="_blank" rel="noopener noreferrer">libspeedhack</a></h3>
<p>20240729：虽然很麻烦，但是我还是为了仅存的一点希望去尝试一下 libspeedhack。作者已经消失两年了。我按照说明直接用，不出意外地出了意外： <code>libspeedhack32.so: undefined symbol: floor</code>. 然后去瞄了下 issue，果然有一个一样的问题，并且别人也修了，开了 pr 在构建时加了个 <code>-lm</code> 参数。然后我很开心，拉下来想构建，结果：</p>
<p>我们的 NixOS 实在是太棒啦！环境根本搞不起来，它的构建指令需要静态链接 + cross 32 位，什么 libclang，glibc_multi 的包直接加进去根本满足不了需求，再加上我根本不知道在 buildInputs 里能写哪些玩意，比如 glibc 就能写 <code>glibc.static</code>， glibc_multi 能写 <code>glibc_multi.dev</code>，这种有个点后面跟着啥玩意的我除了读 nix 源码也想不到要去哪查。</p>
<p>然后去我的 debian 云服务器上尝试构建，东西都装好了，然后没有数学库：<code>ld: cannot find -lm: No such file or directory</code>。我又把 <code>libm.so</code> 拿出来装到 <code>LD_LIBRARY_PATH</code> 里，继续构建，又会得到：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>/libc.a(malloc.o): relocation R_X86_64_TPOFF32 against 'tcache' can not be used when making a shared object; recompile with -fPIC</span></span>
<span class="line"><span>ld: failed to set dynamic section sizes: bad value</span></span>
<span class="line"><span>collect2: 错误：ld 返回 1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一度让我想放弃。问了下 gpt-4o，让我不要把 libm.so 在构建时链进去，应该在运行时加载。于是我最后的尝试成功，修改它给的启动脚本：</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">#!/usr/bin/env bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /tmp/speedhack_{pipe,log}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">mkfifo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /tmp/speedhack_pipe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_libdir</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">/home/absx/lib</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">      # （我把东西存这里）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">LD_LIBRARY_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">}/lib:${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">}/lib64:${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">}/lib32${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">LD_LIBRARY_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$LD_LIBRARY_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">}"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> \</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">LD_PRELOAD=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"libspeedhack.so:${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">}/libm.so:${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">_libdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">}/libm32.so:${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">LD_PRELOAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$LD_PRELOAD</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">}"</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">exec </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样把 <code>libm.so</code> 作为 <code>LD_PRELOAD</code> 运行时加载进 <code>./start.sh wine xxx.exe</code> 即可。</p>
<p>游戏打开了，但是……我加速呢？我 <code>echo 2.0 &gt; /tmp/speedhack_pipe</code> 都要按冒烟了，所以我的加速呢？？不只声音，就连游戏本身也没有加速，就跟 libspeedhack 不存在一样地和谐。于是此次尝试又宣告失败，骂这个跑路项目也解决不了什么，还是不骂了。</p>
<blockquote>
<p>ps. 事实上，通过源码也能知道，Github 上的这些 libspeedhack、<a href="https://github.com/Letomaniy/Speed-Hack" target="_blank" rel="noopener noreferrer">Letomaniy/Speed-Hack</a>、<a href="https://github.com/Hirtol/speedhack-rs" target="_blank" rel="noopener noreferrer">Hirtol/speedhack-rs</a> 等 speedhack 并不涉及音频 api 的修改，因此不可能有音频加速效果。妄图通过简单的一点点源码实现加速只能说是天方夜谭。</p>
</blockquote>
<h2><a class="header-anchor" href="#speed-gear"><span></span></a><a href="https://www.softking.com.tw/dl/17892/Speed%20Gear%207.2.html" target="_blank" rel="noopener noreferrer">Speed Gear</a></h2>
<p>一个简单点点点就能加速窗口的软件，比较电脑小白向。最高支持数千倍加速（还是拉条，你们 UI 设计者.jpg），体验还不错，但是也<strong>不支持音频加速</strong>。</p>
<h2>源码构建</h2>
<p>20240803：到了这一步，市面上的各种现有软件看起来已经是山穷水尽了，我开始把目光转向修改代码。</p>
<p>一个选择是读 wine 的音频 api 然后写点 lib 注入。另一个选择看起来成功率更大一些，那就是直接修改 hourglass 的代码，毕竟人家的功能可行性已经通过了验证。</p>
<p>hourglass 是 C++ 写成，调的都是 windows api，项目管理用 vs sln。我之前从未用 vs 写过 C/C++ 代码，而且 C++ 构建本来就是一坨，还是去构建已经不再维护的代码，因此预感此次修改也不会顺利。</p>
<h3><a class="header-anchor" href="#hourglass-resurrection"><span></span></a><a href="https://github.com/lxl66566/Hourglass-Resurrection" target="_blank" rel="noopener noreferrer">Hourglass-Resurrection</a></h3>
<p>这是一份 7 年前的代码，Hourglass 的重生版。不抱希望搜了下 fork，没啥大修改，因此开始 clone。</p>
<p>想修改代码第一步就是跑过编译，因此我开始折腾编译。扔到 vs 2022，一编译，一大堆报错。这些报错还都挺抽象的，例如有个叫 <code>IDirectSoundSinkFactory</code> 的玩意找不到声明，但是我把它宏解了能看到声明。Google 也搜不到这玩意。</p>
<p>我看 Hourglass-Resurrection 有一个 <a href="https://ci.appveyor.com/project/Warepire/hourglass-resurrection/branch/master" target="_blank" rel="noopener noreferrer">7 年前跑的 CI</a> 是可以过构建的，用的是 msbuild。于是我下载 .Net sdk，发现：</p>
<ol>
<li>msbuild 本身不会在安装时被加入环境变量，要用绝对路径调用。</li>
<li>windows sdk 版本不匹配，于是我去下载了 10.0.22621，重新 build。</li>
<li>报 <code>error MSB6001: “CL.exe”的命令行开关无效。</code> 猜测应该是本机的 clang 太新导致的。</li>
</ol>
<p>我也想过装老版本 vs，下载后发现不同版本 vs 不能共存。于是打消念头。</p>
<p>不想再折腾本机，跑去写 Github CI。结果找的 install windows sdk CI 没一个能用的，我指定的 22621 version 要么找不到，要么就是脚本内部错误。然后我也不指定版本了，改用 <code>choco install visualstudio2022buildtools windows-sdk-10.0</code>，结果花了好几分钟安装后告诉我还是找不到 msbuild。。太经典了。</p>
<p>又继续啃了一会，给一堆 struct 和 macro 移形换位，编译不报错了，取而代之是链接爆了一大堆 error：<code>LNK2001 无法解析的外部符号</code>。。这下我是真没辙了。</p>
<h3><a class="header-anchor" href="#hourglass-win32"><span></span></a><a href="https://github.com/TASEmulators/hourglass-win32" target="_blank" rel="noopener noreferrer">hourglass-win32</a></h3>
<p>这个是原版 hourglass 代码，年代更加久远了，距今有足足 14 年的历史。</p>
<p>用 vs 2022 打开，跑一次构建，没想到居然能够把 GUI 跑起来，已经很厉害了。不过逻辑是没有的，构建时出了挺多错误。</p>
<p>这些 error 看起来比 Hourglass-Resurrection 好读多了，我猜测是 C++ 编译器标准太高导致的编译低版本不兼容的问题。尝试降低 C++ 编译器版本，vs 告诉我：我们接受指定的最低版本是 C++14 😅。</p>
<h2>自己写</h2>
<p>干到现在我已经不想再折腾构建了，不如干脆读代码，然后开抄，写一个自己的注入 lib。我的想法很简单，只加速音频播放，不加速游戏本身（如果想要两个都加速，那就再开一个 CE）。</p>
<p>从读代码角度来说，Hourglass-Resurrection 还是比原版要好很多的，<s>虽然 C++ 项目一直都很难读</s>。最重要的显然是 <code>source\hooks\hooks\soundhooks.cpp</code>，它是整个音频加速的核心；并且可以看到文件在最后定义了注入/拦截（Intercept），将以下函数全部干掉了：</p>
<h4>WinSound</h4>
<ul>
<li>PlaySound 系列：PlaySoundA, PlaySoundW
<ul>
<li>这是 windows 早期的简单音频播放 api，只需要提供文件名即可。W 和 A 指文件名的编码。由于我们不能直接获取到音频 buffer，因此只能将音频加速后保存到 temp 再调用函数。</li>
<li>但是 Hourglass-Resurrection 把这两个 api suppress 了，那我就干脆不管了，遇到问题再说。</li>
</ul>
</li>
<li>waveOut 系列，包含 waveOutWrite, waveOutGetPosition, waveOutReset, waveOutOpen。这几个貌似就没法操作 buffer 了，毕竟这个 api 就是操作 tick 用的，可能只能用 tick 魔法了。不过理论上应该也不难。
<ul>
<li>保留用 waveOutSetPlaybackRate 强改的可能。</li>
</ul>
</li>
<li>Beep 系列，MessageBeep 和 Beep。这也是 suppress 的，目的应该是 TAS 那边的，不用管。</li>
</ul>
<h4>DirectSound</h4>
<ul>
<li>DirectSoundCreate(8), DirectSoundEnumerate(A/W), DirectSoundCaptureEnumerate(A/W)，这几个是重点，毕竟游戏都调用的 DirectSound，因为可以叠加音频播放。
<ul>
<li>这些函数可就麻烦了，<strong>Hourglass-Resurrection 自己写了一个 DirectSound 的音频驱动程序</strong>，包括前面的 EmulatedDirectSoundBuffer 也是。我这才知道文件开头的一堆 magic number 是干什么用的。显然我没有自己写驱动水平。
<ul>
<li>所以如果不写驱动，那么需要 hook 的函数就不能是这些，这些函数是用于创建驱动用的。需要 hook 的应该是 <code>IDirectSoundBuffer::Lock/Unlock/SetFrequency</code> 等。</li>
</ul>
</li>
<li>往细想下去就更不得了了：学它直接操作 tick 可能并不能实现不变调加速。或许我听到的 Hourglass 的音频加速只是破碎的 buffer 拼成的音频；10 倍速下确实听不出音频究竟还是否完整。</li>
</ul>
</li>
</ul>
<p>而起初我并没有发现这些问题，我先写了点操作 buffer 的代码……</p>
<h3>rust</h3>
<p>我不想碰 C++（即使已有代码作参考），先用 rust 碰碰壁再说。</p>
<p>试了一下 <a href="https://github.com/darfink/detour-rs" target="_blank" rel="noopener noreferrer">detour-rs</a>，一个 detour 的 rs 实现，但是拉下来发现编译不过。issue 看到了一个 fork 解决了这个问题，才发觉 detour-rs 已经断更三年了。所以使用此 fork 版本的 <a href="https://github.com/Hpmason/retour-rs" target="_blank" rel="noopener noreferrer">retour-rs</a>。fork 版的文档也更详细，我用它的 example 配合文档推荐的 <a href="https://crates.io/crates/dll-syringe" target="_blank" rel="noopener noreferrer">dll-syringe</a> 跑了一下，成功注入了 MessageBoxW，完成了新手教程。</p>
<p>但接下来才是痛苦开始。<a href="https://rust.audio/" target="_blank" rel="noopener noreferrer">rust 音频处理生态</a>本来就挺烂的。我先尝试的肯定是<a href="https://crates.io/crates/rubato" target="_blank" rel="noopener noreferrer">rubato</a>，毕竟简介就是速率变换。结果这玩意并不咋样，几乎无文档，examples 里面几百行也没有解释。我把 wav 用 python 转成 f64 raw，跑一遍 example 再转回去，并不是一个可用的音频。</p>
<h3>dll 调库</h3>
<p>退一万步，如果用现有的 dll 库呢？我尝试了一下行业用得比较多的 <a href="https://codeberg.org/soundtouch/soundtouch.git" target="_blank" rel="noopener noreferrer">soundtouch</a>，<a href="https://gist.github.com/lxl66566/f7dc49be8a08f2746b4179ccd3b2b378" target="_blank" rel="noopener noreferrer">写了个 python 小脚本</a>做测试。soundtouch 的 api 设计就要好得多，用户只需要 put 和 receive 就行了。但是我用 <code>receiveSamples</code> (处理 float 数组) 系列测试就返回值为 0（应该要返回数组长度），数组没有被改动；用 <code>putSamples_i16</code> 系函数（i16 系是 float 系的包装，包了一层转换）甚至有 bug，直接 internal <code>OSError: exception: integer divide by zero</code>。非常郁闷。</p>
<h3>直面原理</h3>
<p>音频处理其实并不算太复杂，说到底也是信号与系统那一套。最基础的就是把 trunk 加速打出去那一套，属于 <em>变速变调</em>。更高级一点的主要是 <em>变调不变速</em> 和 <em>变速不变调</em> 两种，有了这两种就可以组合出各种想要的效果了。实际使用中也可以只用一种，通过升降采样先 <em>变速变调</em>，对齐一个量，再通过一种算法改变另一个量即可。在这里我们当然关注 <em>变速不变调</em>。</p>
<p>行业泛用的是 wsola (Waveform Similarity and Overlap Add)，例如 soundtouch 就用的这个。除此之外还有 PLOSA (Time-Domain Pitch-Synchronous Overlap and Add)，及其变体 TD-PSOLA 等。这一类的最大特点是需要找峰值，并保留峰值。</p>
<p>现成的 crates 里，<em>wsola</em> 是个脑残占名字的没有内容，而 <a href="https://codeberg.org/PieterPenninckx/tdpsola" target="_blank" rel="noopener noreferrer"><em>tdpsola</em> 有一个可用实现</a>。把仓库拉下来，example 里带了 wav 支持，不需要手动转 raw。然后试了一下，确实能够实现加速！让我非常开心。虽然只支持单声道 wav，我还需要手动转一次，但是没有什么难度。并且作者在 README 里给出了一个 documentation，里面的视频把 TD-PSOLA 原理讲得非常透彻。</p>
<h3>打击</h3>
<p>此时我终于读懂了 Hourglass-Resurrection 的代码是自己写 DirectSound 的驱动，并且也发现操作 tick 并不能实现真正的音频加速，最终的道路一定是 buffer。于是我陷入了消沉：做一个音频加速的复杂度已经远超出了我的想象，即使知晓了音频加速原理，也很难面对一大坨 windows sound api。我目前摸索的这些知识在脑子里并不能合到一起。</p>
<h2>external</h2>
<p>目前这个项目暂时停滞了，我希望有一天能够重启这个项目。这里存一些可能用得上的资料。</p>
<ul>
<li><a href="https://shanewfx.github.io/blog/2013/08/14/caprure-audio-on-windows/" target="_blank" rel="noopener noreferrer">Windows 上的音频采集技术 - 思考的轨迹</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>shell script</title>
      <link>https://absx.pages.dev/coding/shell.html</link>
      <guid>https://absx.pages.dev/coding/shell.html</guid>
      <source url="https://absx.pages.dev/rss.xml">shell script</source>
      <description>shell script 说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。 当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意[1]使用 bash 编写程序的。有许多脚本语言可以用来替代 ba...</description>
      <category>编程</category>
      <pubDate>Wed, 24 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>说到 shell script，bash 绝对是 shell 界的王，几乎所有 linux 系统都使用 bash 作为默认 shell。因此其拥有最高的兼容性。</p>
<p>当然，bash 毕竟也是老编程语言，随着时代变化，其设计缺陷与难用部分也开始显现。至少我是非常不愿意<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><a class="footnote-anchor" id="footnote-ref1">使用 bash 编写程序的。有许多脚本语言可以用来替代 bash，例如我已经用 <a href="/coding/python.html" target="_blank">python</a> 写脚本很久了。还有许多与 bash 竞争的 shell 本身也自带了一门脚本语言，例如 fish，nu 等，甚至 just 也能算一个 bash 的竞争者。这些脚本需要专门的解释器运行，我也会放在后面介绍。</a></p><a class="footnote-anchor" id="footnote-ref1">
</a><p><a class="footnote-anchor" id="footnote-ref1">除此之外，还有人既想写出人类可读的代码，又想借用 bash 超高的兼容性，因此便开发了能够编译为 bash 的高阶语言，例如 </a><a href="https://pnut.sh/" target="_blank" rel="noopener noreferrer">pnut</a>，<a href="https://github.com/amber-lang/amber" target="_blank" rel="noopener noreferrer">amber</a>。</p>
<h2><a class="header-anchor" href="#shebang"><span></span></a><a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="noopener noreferrer">Shebang</a></h2>
<p>放在脚本开头，以指示此脚本使用的解释器。因此如果写了 <code>#!/bin/bash</code>，则表示脚本是一个 bash 脚本，可以直接 <code>./filename</code> 执行。</p>
<p>不过为了最佳的兼容性（NixOS 太怪胎了），可以写成 <code>#!/usr/bin/env bash</code>。</p>
<h2>bash</h2>
<p>bash 的兼容性有多强呢？你可以在几乎所有 linux，手机，各种终端设备，windows（通过 WSL 或 msys2），macos（默认 zsh，兼容） 上执行 bash 脚本。基本上这个时代没有几个设备是不用 bash 的。</p>
<p>此处不会涉及 bash 系统教学，只会零碎记一些知识点。系统学习可以看<a href="#external">external 1.</a>。</p>
<ul>
<li>bash 的要义是一切皆字符串。</li>
<li>启动 bash 时会自动执行 <code>~/.bashrc</code>，这也是一个 bash 脚本。</li>
<li>bash 按 tab 也能补全，不过默认不显示候选项。</li>
<li><code>xx1 &amp;&amp; xx2</code> 在 xx1 成功后执行 xx2，<code>xx1 || xx2</code> 在 xx1 失败后执行 xx2</li>
<li>传参：
<ul>
<li><code>$1</code> 代表第一个参数，类似的…</li>
<li><code>$@</code> 代表把所有参数原封不动传入（多个参数的地方），而 <code>$*</code> 代表把所有参数合并当成一个字符串传入。</li>
</ul>
</li>
<li><code>${}</code> 不仅用于插值，还用于更多处理。
<ul>
<li><code>${var:-default}</code>，如果为空则使用默认值</li>
<li><code>${#var}</code> 是取 len</li>
<li><code>${var:1:3}</code> 是取 slice，两边都是闭区间，index 从 0 开始</li>
<li><code>${var/pat/after}</code> 是字符串替换</li>
</ul>
</li>
</ul>
<h2>fish</h2>
<p>一般来说三大 shell 指的是 bash, fish, zsh. 而 fish 不兼容 bash，在里面算是比较特立独行的。fish 语法自成一系，不过在一众 shell 里算是比较好学的，缺点是文档写的挺垃圾。fish 使用 rust 重写过一次，<s>搭上了语言原神的顺风车</s>，性能与安全性无需担忧。fish 是不兼容 windows 的，而在 msys2 里用 fish 又总感觉挺不爽的，我只好在 windows 上用其他 shell。</p>
<p>fish 的语法在我看来算是对传统 shell 的反叛，但是没有叛彻底，还保留了很大一部分 bash 特点，导致 fish 写脚本也十分难写。</p>
<p>吸引我使用 fish 的最大原因是补全太好用了，爆杀一切其他 shell。fishshell 甚至会自动从 man 生成补全 (<a href="https://t.me/archlinuxcn_group/2974806" target="_blank" rel="noopener noreferrer">ref</a>)。我一般开启 <code>bind \t forward-word</code>，配置文件只此一行足矣（加载其他软件的命令不算）。</p>
<ul>
<li>
<p>set fish as default</p>

</li>
<li>
<p>语法：有个叫 <a href="https://github.com/edc/bass" target="_blank" rel="noopener noreferrer">bass</a> 的可以在 fish 里用 bash 语法。不过我觉得不如快速查下鱼文档。</p>
</li>
<li>
<p>环境变量：<a href="https://fishshell.com/docs/2.6/commands.html#set" target="_blank" rel="noopener noreferrer"><code>set</code></a>，注意作用域与是否 export 的问题。</p>
</li>
<li>
<p>函数：fish 大把的指令（包括 alias）都是函数。</p>
<ul>
<li>使用 function 新增函数后，可以使用 <code>funcsave &lt;function&gt;</code> 保存到配置文件夹下以便修改与备份，修改后需要重新 source：<code>. ~/.config/fish/config.fish</code></li>
<li>当然，官方推荐的修改是使用 <code>funced &lt;function&gt;</code>，最好设置 <code>$EDITOR</code> 环境变量，可以在喜欢的编辑器里修改。</li>
<li>删除函数 / 变量：<code>-e</code> == <code>--erase</code></li>
</ul>
</li>
<li>
<p>插件：一般使用 <a href="https://github.com/jorgebucaran/fisher" target="_blank" rel="noopener noreferrer">fisher</a> 安装插件。不过我一个都没装，只能说看不上。</p>
</li>
</ul>
<h2>zsh</h2>
<p>zsh 是 bash 统治下的顺从者，其几乎全兼容 bash。zsh 是 macos 的 default shell，因此用户也非常多。</p>
<p>我曾经尝鲜过一段时间 zsh（入坑作：<a href="#external">external 2.</a>），但是<a href="https://t.me/withabsolutex/1214" target="_blank" rel="noopener noreferrer">补全实在是太垃圾</a>，立刻扔掉了。</p>
<p>用 zsh 基本离不开 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki" target="_blank" rel="noopener noreferrer">Oh My Zsh</a>，但是这玩意有严重的性能问题(<a href="https://luoxu.archlinuxcn.org/#g=1031857103&amp;q=omz&amp;sender=313927976" target="_blank" rel="noopener noreferrer">ref</a>)，已经在群里问过 N 次了。</p>
<ul>
<li>安装 zsh 时会问 set default shell</li>
</ul>
<h2>nushell</h2>
<p>nushell 可以说是彻底的反叛者，它自己搓了一套偏函数式的 nu 语言，并重载了许多 posix 指令（以便更好地展示执行结果）。nushell 也使用 rust 实现，性能与安全性无需担忧。nushell 是跨平台的，因此成为我在 windows 上的一个选择。可惜 nushell 补全只能从历史中补，手感还是打不过 fish。</p>
<p>自己搓语言的基本上都有很高的学习成本，nushell 也不例外。nu 语言有对 rust 的借鉴和<a href="https://t.me/withabsolutex/1698" target="_blank" rel="noopener noreferrer">反叛</a>。</p>
<p>不过 nushell 最劝退我的还是 <a href="https://t.me/withabsolutex/1700" target="_blank" rel="noopener noreferrer">rust 的一个 bug</a>，导致其无法在我的 RAMDisk 上工作。</p>
<h3>配置</h3>
<p>nushell 只有 winget 安装方法（<code>winget install nushell</code>），没有 scoop 安装。</p>
<p>安装好后，在 nushell 中执行下面的语句：</p>
<div class="language-nushell line-numbers-mode" data-highlighter="shiki" data-ext="nushell" data-title="nushell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">config env</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> --</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">$nu</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">.default-config-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> path join</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 'env.nu'</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">config nu</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> --</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">$nu</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">.default-config-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> path join</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 'config.nu'</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>即可在配置文件夹生成默认配置。然后就是编辑配置即可，官方建议单独开一个 <code>custom.nu</code> 写自己的配置，然后 source 到主配置（<code>config.nu</code>）中。</p>
<div class="language-nushell line-numbers-mode" data-highlighter="shiki" data-ext="nushell" data-title="nushell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">$nu</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">.default-config-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> path join</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 'custom.nu'</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2>powershell</h2>
<p>一般的 windows 都自带 powershell 1.0。但是有的命令在老版本 powershell 上会执行失败，可以用 <code>scoop install pwsh</code> 安装最新版本的 powershell。</p>
<ul>
<li>Windows 上难免会遇上带空格的可执行文件路径，但是直接使用双引号包裹并不能执行该命令。需要在双引号前添加 <code>&amp;</code> 才可以将字符串视为可执行文件执行。</li>
</ul>
<h2>xonsh</h2>
<p>我一看到 xonsh 就把它加到了我的 👍 list 里。它不自创脚本语言，而是使用 python 作为其解释器。在 python 爆火的当下，xonsh 可能是一个不错的选择，它完全避开了高昂的学习成本和 bash 脚本的难用，还能借 python 优秀的跨平台能力为所欲为。</p>
<p>虽然我还没开始用 xonsh，不过将来我一定会去试一试的。</p>
<h2>amber</h2>
<p>amber 是总论提到的编译到 bash 语言的一个高阶语言；它使用 rust 实现，并且有较为完善的文档和 tutorial。我也为这个项目发过 PR，不过是依赖相关，跟代码逻辑没什么关系。</p>
<p>这个项目的代码我只能说真是一坨屎山。在用几乎最新的 rust 和 cargo 情况下，没有修 clippy issue 也就算了，连 rustfmt 都没过就有点过分了吧。。。屎山也就算了，我跑 <code>cargo test</code> 也跑不了，正常使用也用不了，这什么垃圾玩意。。</p>
<h2>杂</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/226703/how-do-i-prompt-for-yes-no-cancel-input-in-a-linux-shell-script/27875395#27875395" target="_blank" rel="noopener noreferrer">Y/n 选择器</a>
</li>
</ul>
<h2>external</h2>
<ol>
<li><a href="https://wangdoc.com/bash/" target="_blank" rel="noopener noreferrer">bash 脚本教程</a></li>
<li><a href="https://sysin.org/blog/linux-zsh/" target="_blank" rel="noopener noreferrer">Linux Zsh 使用 oh-my-zsh 打造高效便捷的 shell 环境</a></li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p>尝试写个大脚本，<a href="https://t.me/withabsolutex/1374" target="_blank" rel="noopener noreferrer">未果，几欲去世</a>。数组做输入值和返回值各种妖魔鬼怪乱飞 (<code>"${arr[@]}"</code>)。我的评价是还是<strong>写点阳间语言</strong>吧，就算是 fish 都比 bash 好看多了。python 也很泛用的，而且比起 lua 更好写。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>安装与配置（NixOS 篇）</title>
      <link>https://absx.pages.dev/articles/linux/nix.html</link>
      <guid>https://absx.pages.dev/articles/linux/nix.html</guid>
      <source url="https://absx.pages.dev/rss.xml">安装与配置（NixOS 篇）</source>
      <description>安装与配置（NixOS 篇） 早在去年我便说过我的下一个操作系统很有可能是 NixOS。202405 的 OS 课需要做 PPT 汇报，我的选题是包管理器杂谈，又吹了一波 nix，把我自己心吹得痒痒的。 在考试期间由于压抑的氛围和不情愿的学习，平常想做的事的欲望会被放大许多。但是我预料到 NixOS 的安装肯定会非常折磨（好预测！），所以只在 WSL ...</description>
      <category>教程</category>
      <pubDate>Fri, 28 Jun 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>早在去年我便说过我的下一个操作系统很有可能是 NixOS。202405 的 OS 课需要做 PPT 汇报，我的选题是包管理器杂谈，又吹了一波 nix，把我自己心吹得痒痒的。</p>
<p>在考试期间由于压抑的氛围和不情愿的学习，平常想做的事的欲望会被放大许多。但是我预料到 NixOS 的安装肯定会非常折磨（好预测！），所以只在 WSL 里尝尝鲜。而 WSL 终究无法发挥出 Nix 的特色。于是熬到了考完试当晚，我就开始安装 NixOS 了。</p>
<h2>NixOS 安装</h2>
<p>安装我看的是<a href="https://nixos-cn.org/tutorials/installation/Subsystem.html" target="_blank" rel="noopener noreferrer">NixOS 中文</a>。</p>
<p>NixOS 的安装比我想象的要折磨得多。原以为装过 Arch 的我已经无惧困难，结果输得非常彻底。。一大原因是因为没有 Archlinux 那样的顶级文档，而另一个则是群友人数确实更少，解答问题的也更少。不过这些都是后话了。</p>
<p>我是在还没有学习 nix 语言和特性的情况下装的系统，踩了不少坑。</p>
<p>首先，我<a href="/articles/linux/basic.html#%E8%B0%83%E6%95%B4%E5%A4%A7%E5%B0%8F" target="_blank">缩了 ArchLinux 的分区大小</a>，踩了一次 <a href="/articles/linux/problem.html#cfdisk-%E6%93%8D%E4%BD%9C%E5%88%86%E5%8C%BA" target="_blank">cfdisk 的坑</a>。而后下载了 NixOS 的图形化安装程序，用 ventoy 引导启动，一切正常。然而在安装引导的分区时我发现，图形化界面没有提供 btrfs 分区，只提供 ext4。于是我停止使用图形化界面，改用里面的 konsole 终端。结果 channel update 时无法正常重启某些服务（<code>xe-daemon.service: NewCachedXenstore error: Cannot locate xenbus dev path...</code>）。我猜测这是图形界面导致的问题，于是我重新打开 arch，下载了 minimal iso，这里面还有一个<a href="/articles/linux/problem.html#%E4%BD%A0%E7%9A%84%E5%A4%8D%E5%88%B6%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%A4%8D%E5%88%B6" target="_blank">好玩的小插曲</a>。</p>
<p>果然进了 minimal <s>有一种回家的感觉</s>，并且确实没有重启服务失败的问题了。一番鼓捣，总结出一些重要规律：</p>
<ul>
<li>碰到 <code>HTTP error 200 (curl error: Stream error in the HTTP/2 framing layer)</code> 不要管，后台会重试。（说到底，code 200 还报 error 是我没想到的）</li>
<li>如果 <code>denpendency fail to build</code>，换个源重新试。
<ul>
<li>如果换源后碰到同样的问题，把源换回去再试。</li>
</ul>
</li>
<li>安装过程中遇到 <code>core dumped</code>。。。emmm，这有点脑残了，不过换了个源又好了，可能是因为没拉到缓存，构建时 core dump？</li>
</ul>
<p>就这样，两个源交替查缺补漏，总算是 install success 了。“最终退后三步朝电脑跪拜祈求它能正常开机，至此基本安装教程完毕。”——才怪，sddm 进去后，root 和我都无法登录（保证密码正确）。于是类似 Arch 那样重走挂载流程，<code>nixos-enter</code> 进去修。</p>
<p>这进去一 rebuild 我就感觉不对劲，此处把报错贴出：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>sudo: PAM account management error: Authentication service cannot retrieve authentication info</span></span>
<span class="line"><span>sudo: a password is required</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>求助群友，群友说 <code>nixos-install</code> 与 <code>nixos-rebuild</code> 效果基本是一样的，让我去外面用 install 试。效果确实差不多，不过每次在 livecd install 都相当于重装，无法用内部的缓存，全部重新下载，还是有点耗时的。install success 后再次 <code>nixos-enter</code> 试，还是一样的报错，只要用到 sudo 就会炸。鼓捣了大半天，reinstall 了好几次都无法解决，另一个管理说，在 <code>nixos-enter</code> 中这是正常现象，内核的表现是不一致的。我一直把 <code>nixos-enter</code> 当 <code>arch-chroot</code> 用，没想到这玩意这么捞。</p>
<ul>
<li>日后刷到了<a href="https://blog.lzc256.com/posts/recovering-sudo-in-nixos/" target="_blank" rel="noopener noreferrer">一篇博文</a>，描述了另一个人是如何解决此问题的。我感觉这更像是 nixos 的 bug 而不是内核不一致。</li>
</ul>
<p>这回重启就正常了，也不知道是其中的哪次 install 尝试起了作用。于是我成功进入系统开始激情编辑配置。</p>
<h3>后记</h3>
<p>第二天学校有实践课加上 cs2 出新图，没怎么折腾系统，尝试给电脑<a href="#%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8">装了个 nvidia 驱动</a>和其他玩意就去睡觉了。</p>
<p>第三天起床一开机，直接 dmesg 卡死无法切 tty。兄弟我还有课啊！于是带着去教室不听课，校园网认证还过不了，只好用手机开热点修。这次知道不能 <code>nixos-enter</code> 了，但是只能用小手机查资料，每次挂载输入一大串，用镜像输一大串，重新 install 等好久，试错成本偏高。加上我昨天配置改了很多，二分查找需要的次数也不可估量，因此还是非常慢的。（不能简单地放弃 NVIDIA 驱动，因为有 NixOS gaming 需求）</p>
<p>二分查错过程中我发现每次 install 并不会重新写入 EFI 分区（配置里注释了启动项，但是 grub 菜单并没有消失），因此向群友提问。群友答日常 build 和 install 是不会擦除 EFI 的，只有 gc 时会。但是我并不在系统里，<code>nixos-enter</code> 如上文所述，并不能执行 gc 指令。</p>
<p>后来怀疑是内核原因：我换了 zen 内核，按理需要用 dkms 的 NVIDIA 驱动，然而实际用的是 NVIDIA 闭源驱动。。换回原内核又发生了 <a href="/articles/linux/problem.html#efi-%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3" target="_blank">EFI 空间不足</a>的惨剧，又折腾许久。等我禁用了 NVIDIA 成功开机，都过了午饭时间了。然后一开机我就去定制了一个 iso，太折磨了。</p>
<p>下午折腾中文双拼输入法，详见<a href="#%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95">输入法</a>。</p>
<p>又过了一天，我想起来 NVIDIA 驱动一直没开，而此时我已经做好了万全的准备，btrfs 打了快照，grub 加了禁用 nvidia 的启动项，自制了启动盘，是时候挑战 NVIDIA 驱动了！于是我开启了显卡驱动，果然又卡 dmesg 了。把 <code>hardware.nvidia.open = false;</code> 改成 <code>true</code> 以后又好了。正当我高兴，一天后的 rebuild 又让我吸了口凉气，问题并没有解决。</p>
<p>这个问题一放就是两个月，总结了一点规律：</p>
<ul>
<li>X11 的锅，卡 dmesg 是 X11 起不来的表现</li>
<li>从 windows 重启到 nixos 时卡住的概率更高</li>
<li>如果不进 windows，只使用 nixos，则基本不会遇到此问题</li>
</ul>
<p>反正现在我摆烂了，看到卡 dmesg 就 sysrq 重启。</p>
<h2>学习</h2>
<p>如何学习 nix 呢？nix 没有强大的 wiki，遇到问题只能到处 google。但是也有一些好的资源。</p>
<ul>
<li><a href="https://nixos-cn.org/tutorials/installation/Subsystem.html" target="_blank" rel="noopener noreferrer">NixOS 中文</a>：安装教程与初步使用</li>
<li><a href="https://nixos-and-flakes.thiscute.world/zh/preface" target="_blank" rel="noopener noreferrer">NixOS 与 Flakes - thiscute</a>：进阶好书</li>
<li><a href="https://lantian.pub/article/modify-website/nixos-why.lantian/" target="_blank" rel="noopener noreferrer">Lan Tian @ Blog</a>：打包与高级用法</li>
<li><a href="https://discourse.nixos.org/c/learn/chinese/55" target="_blank" rel="noopener noreferrer">中文 discourse</a> &amp; <a href="https://t.me/nixos_zhcn" target="_blank" rel="noopener noreferrer">telegram group</a>：可能可以来问问题</li>
</ul>
<!-- - 还有些其他的：
  ::: details 课外阅读

  ::: -->
<p>一个要点是理清 nix 的 一些事实标准，例如 flake， home manager，他们是什么，有什么用。好在那本 thiscute 的书完美解决了此问题。</p>
<p>还有一个学习方法是多看别人的 configuration，<s>并且大量摘抄</s>。我的配置在<a href="#%E9%85%8D%E7%BD%AE">下面</a>，还有一些：<a href="https://github.com/TsubakiDev/nixos-config" target="_blank" rel="noopener noreferrer">1</a> <a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">2</a> <a href="https://codeberg.org/shitpostalotl/nixos" target="_blank" rel="noopener noreferrer">3</a> <a href="https://github.com/wimpysworld/nix-config" target="_blank" rel="noopener noreferrer">4</a> <a href="https://github.com/jackdbd/nix-config" target="_blank" rel="noopener noreferrer">5</a> <a href="https://github.com/nmasur/dotfiles" target="_blank" rel="noopener noreferrer">6</a> <a href="https://github.com/oo-infty/nixos-configurations" target="_blank" rel="noopener noreferrer">7</a></p>
<h2>工具</h2>
<ul>
<li><a href="https://github.com/nix-community/nix-index" target="_blank" rel="noopener noreferrer">nix-index</a>：找包位置。<strong>实际上并不好用</strong>，因为
<ol>
<li>需要查找的时候经常是刚安装完软件的时候，还没有 updatedb。而 nixos 的手动 updatedb 耗时极长。</li>
<li>默认 locate 时也会搜索路径，nix 路径又基于 hash，因此会有很多 hash 污染搜索结果。</li>
</ol>
<ul>
<li>感觉真不如 <code>cd /nix/store &amp;&amp; fd xxx</code>。</li>
</ul>
</li>
</ul>
<h3>搜索</h3>
<p>安装与配置中很重要的一环是学会搜索。即使 nixos 的文档比较内个，也有一些非常好用的网站用来查询所需信息。</p>
<ul>
<li><a href="https://search.nixos.org/packages" target="_blank" rel="noopener noreferrer">https://search.nixos.org/packages</a>：查找包。
<ul>
<li>主要也就看 Homepage 和 Source，分别对应项目 README 和 打包 nix 源码</li>
</ul>
</li>
<li><a href="https://search.nixos.org/options" target="_blank" rel="noopener noreferrer">https://search.nixos.org/options</a>：查找设置项</li>
<li><a href="https://home-manager-options.extranix.com/" target="_blank" rel="noopener noreferrer">https://home-manager-options.extranix.com/</a>：查找 home-manager 中的设置项</li>
<li><a href="https://noogle.dev/" target="_blank" rel="noopener noreferrer">https://noogle.dev/</a>：nix 语言学习查找</li>
<li><a href="https://nur.nix-community.org/" target="_blank" rel="noopener noreferrer">https://nur.nix-community.org/</a>：NUR 包</li>
<li><a href="https://luoxu.torus.icu/" target="_blank" rel="noopener noreferrer">Nix 落絮</a></li>
</ul>
<h3>其他资源</h3>
<ul>
<li><a href="https://xtonix.tei.su/" target="_blank" rel="noopener noreferrer">x to nix</a>：将 json，xml，yaml 配置转为 nix 配置。</li>
</ul>
<h2>配置</h2>
<p><a href="https://github.com/lxl66566/nixos-config" target="_blank" rel="noopener noreferrer">我的配置仓库</a></p>
<h3>linter / formatter</h3>
<p>nix 是一门图灵完备的函数式语言，写 nixos config 就是编程的过程。说到编程那肯定少不了 linter 和 formatter。而我是 all in vscode 人，我使用的插件如下：</p>
<ul>
<li><em>Nix IDE - Noortheen</em>：lsp，需要手动安装 <code>pkgs.nil</code></li>
<li><em>nixfmt - brettm12345</em>：formatter，需要手动安装 <code>pkgs.nixfmt-rfc-style</code></li>
</ul>
<h3>显卡驱动</h3>
<p>官方给出了比较详细的 NixOS 显卡驱动教程(<a href="https://nixos.wiki/wiki/Nvidia" target="_blank" rel="noopener noreferrer">NixOS Manual - Nvidia</a>)，看就完了。我认为还存在一些缺点：</p>
<ol>
<li>有些复杂，例如双显卡需要手动查总线并写入 hardware-configuration.</li>
<li>prime 功能有点残缺，官方给出的 example 里只有在启动时选择不同的启动项以应对外带和接电源两种情况，而不能动态调整性能模式：正常情况下应该是在游戏启动时启用显卡而在未游戏时关闭。</li>
</ol>
<p>还有我自己<a href="#%E5%90%8E%E8%AE%B0">折腾</a>后想说的注意事项：使用 <code>hardware.nvidia.open = true;</code>，使用官方内核。</p>
<h3>拼音输入法</h3>
<p>用英文有点习惯，要不是我打开博客想写论文我都想不到中文输入法没装。</p>
<p>我先尝试 arch 上用习惯的 fcitx5：</p>
<div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" data-title="nix" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">i18n</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">defaultLocale</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "zh_CN.UTF-8"</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">i18n</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">inputMethod</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">  enabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "fcitx5"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">  fcitx5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">addons</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> with</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> pkgs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; [</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    fcitx5-chinese-addons</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    fcitx5-mozc</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    fcitx5-gtk</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    fcitx5-rime</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    fcitx5-configtool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而这并不能使用，在输入法里切到了中文键盘，打出的一直都是英文。</p>
<p>然后我尝试用了一下 ibus：</p>
<div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" data-title="nix" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">i18n</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">defaultLocale</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "zh_CN.UTF-8"</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">i18n</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">inputMethod</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">  enabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "ibus"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">  ibus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">engines</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> with</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> pkgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">ibus-engines</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; [</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    rime</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    libpinyin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用倒是能用了，但是我并不清楚 ibus 如何支持双拼。而且其自定义程度也不太行，切换输入法居然不能 <code>Ctrl + Shift</code> 而需要给实际键位，因此我还是折腾 fcitx。</p>
<p>跑了一次 <code>fcitx5-diagnose</code>，发现 locale 里显示的不太对，怎么全都是 <code>en_US.UTF-8</code>？明明已经设了 <code>i18n.defaultLocale</code>...后续设成这样：</p>
<div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" data-title="nix" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">defaultLocale</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "zh_CN.UTF-8"</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">extraLocaleSettings</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">  LANG</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "zh_CN.UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66">  LC_ALL</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> defaultLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>莫名奇妙就好了，在输入法设置里可以找到双拼键盘，开起来就行。</p>
<p>ps. 根据<a href="https://t.me/nixos_zhcn/477206" target="_blank" rel="noopener noreferrer">群友描述</a>，只需要将 KDE 配置文件删除即可，与 defaultLocale 无关。</p>
<p>然后被 rime 党吹的有点心动，想试试 rime。刚好 ryan4yin 佬<a href="https://github.com/ryan4yin/nix-config/tree/main/overlays" target="_blank" rel="noopener noreferrer">就是 rime + 小鹤</a>，于是我便直接开抄配置。可能是 overlays 哪出了问题，rebuild 的时候并没有把数据移到 rimedata，我也百思不得其解。后来手动移过去试了一下，发现真难用啊（包括快捷键啥都不懂）。于是滚回了 fcitx5-chinese-addon。</p>
<p><code>fcitx5-configtool</code> 里双拼键盘下的“管理自定义词组”是坏的，点不开。我也懒得修了，把以前 archlinux 位于 <code>~/.local/share/fcitx5/pinyin/customphrase</code> 的词库搬出来，拿到 home-manager 里 source 一下就好了（需要 <a href="https://wiki.archlinux.org/title/Fcitx5#Emoji_show_abnormally_in_the_candidate_box" target="_blank" rel="noopener noreferrer">重启 fcitx5</a>：在 bash 里跑 <code>kill `ps -A | grep fcitx5 | awk '{print $1}'` &amp;&amp; fcitx5&amp;</code>），也符合 nixos 的原则。</p>
<h3>代理</h3>
<p>我最开始使用 <a href="/articles/proxy/proxy_software.html#v2raya" target="_blank">v2rayA</a> 过渡，然后就跑到 <a href="/articles/proxy/proxy_software.html#dae" target="_blank">dae</a> 了。</p>
<h3>备份</h3>
<p>nix 的配置显然用 git 备份的话非常舒适。起初我以为 <code>/etc/nixos</code> 不能放 <code>.git</code> 仓库。后来发现是不允许放未提交（dirty）的仓库。再后来我知道有配置可以强制 nixos 使用 dirty 仓库：</p>
<div class="language-nix line-numbers-mode" data-highlighter="shiki" data-ext="nix" data-title="nix" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">nix</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">settings</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">warn-dirty</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这下终于可以不用 copy 到其他地方备份了。但是有一点需要注意：在 rebuild 前一定记得把新增的文件 <code>git add</code> 到暂存区！！否则会报 <em>No such file or directory</em>。</p>
<p>至于备份加密，由于我的隐私文件并不算非常隐私，所以用的是我自己写的 <a href="https://github.com/lxl66566/git-simple-encrypt" target="_blank" rel="noopener noreferrer">git-simple-encrypt</a>，仅需一个密码即可解锁。如果你有更高的安全需求可以看看 sops-nix 或 agenix。</p>
<h3>home manager</h3>
<p>我本来是不想用 home manager 的，全写在 <code>configuration.nix</code> 里也不麻烦。但是后来还是用了：</p>
<ol>
<li>假设滚挂了，方便 reinstall（把 import 注释掉即可；否则一个 <code>configuration.nix</code> 不好拆，我也不想一个 install 下载几十 GB）</li>
<li>有些配置文件确实不方便统一管，例如 KDE 的某些设置等。</li>
</ol>
<p>从 <code>configuration.nix</code> 转移到 home manager 也不麻烦，<a href="#%E5%AD%A6%E4%B9%A0">thiscute</a> 有很好的教程，并且它们的条目基本是兼容的。</p>
<p>但是进一步定制各种配置文件就没那么简单了，因为 <a href="https://nix-community.github.io/home-manager/index.xhtml" target="_blank" rel="noopener noreferrer">home-manager 的 manual</a> 就是一坨屎！建议直接用<a href="#%E6%90%9C%E7%B4%A2">第三方的 options 搜索</a>。</p>
<h3><a class="header-anchor" href="#plasma-manager"><span></span></a><a href="https://github.com/nix-community/plasma-manager" target="_blank" rel="noopener noreferrer">plasma manager</a></h3>
<p>在 nixos 下，很多 kde plasma6 的设置都不能在 conf 或 home manager 中定义。例如我尝试在 <code>home.nix</code> 中使用 <code>services.random-background</code> 更换壁纸，结果开机会显示 0.5s 壁纸然后被换回 kde 默认壁纸；还有包括<a href="https://discourse.nixos.org/t/stop-screen-locking-in-plasma/15303/3" target="_blank" rel="noopener noreferrer">锁屏时间设置</a>的问题等等等等。</p>
<p>顾名思义，plasma manager 就是为了应对此情况出现的。它能保存的 kde 配置不算多，毕竟 kde 世界配置文件无穷无尽。但在一定程度上还是有用的。</p>
<h3>Gaming</h3>
<ul>
<li><a href="https://www.reddit.com/r/NixOS/comments/1c7csct/gaming_on_nixos/" target="_blank" rel="noopener noreferrer">Gaming on nixos : r/NixOS</a></li>
<li><a href="https://github.com/fufexan/nix-gaming" target="_blank" rel="noopener noreferrer">github:fufexan/nix-gaming</a>：主要是 OSU 相关</li>
</ul>
<p>Linux 上游戏还是不太行。。。cs2 fps windows 140+，在 nix 上只有 50 左右。不过据群友说，在 vulkan 着色器编译完成后游戏可以大幅提高帧率。我暂时还未尝试。</p>
<p>不过平常玩点轻量级游戏问题不大，galgame，启动！你的下一台电脑又何必是游戏本！扯远了。</p>
<p>steam 游戏都能够点击即玩，proton 还是牛逼的。一些傻逼引擎的 galgame 无法在 wine 下正常运行，此时就需要安装<a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>了。</p>
<p>nix gaming 还有过不去的一关就是性能释放。。我这台电脑<a href="/articles/linux/problem.html#nixos-%E8%B0%83%E6%95%B4%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F" target="_blank">风扇总是不转，无法调整风扇转速</a>，有点悲惨。风扇不转想打啥游戏都不行吧，立刻降频了。大量求助后仍然未果，所以立刻开寄。</p>
<h3>虚拟机</h3>
<p>参考我的配置中的 <a href="https://github.com/lxl66566/nixos-config/blob/main/others/vm.nix" target="_blank" rel="noopener noreferrer"><code>others/vm.nix</code></a> 安装 qemu kvm 及其运行库。</p>
<p>至于镜像我在 win10 和 win11，ltsc 和 tiny 里纠结了一下，选择了 tiny 11 23H3。可以看看<a href="https://www.iplaysoft.com/tiny11.html" target="_blank" rel="noopener noreferrer">教程</a>，里面还有中文字体包，反正我来者不拒。下载从 web archive 或教程给的地址任选，反正我用了前者。</p>
<p>安装后，打开 <code>Virtual Machine Manager</code>，创建新虚拟机，选择下载的 iso 镜像。需要注意，如果 auto detect os 检测不到，需要在下面取消勾选 auto detect os 后自行输入 win11。反正这个 UI 逻辑是挺傻逼的。至于传文件，打开 USB 直通，我的移动硬盘可以分别在两端挂载，这样也不需要考虑太多。</p>
<p>感想：</p>
<ul>
<li>tiny 11 感觉也不 tiny。。。安装完占了我 17G 空间，感觉还是得 win10 吧。</li>
<li>libvirt 也不好用，剪贴板和文件都没有傻瓜式解决方案。</li>
</ul>
<h3>快照</h3>
<p>NixOS 官方的图形界面安装镜像并没有提供 btrfs 的选项，合理猜测大部分人安装都是用的 ext4 分区，因此 btrfs 的资料应该不多。况且 NixOS 本身就是一个强可复现系统，按理来说并不需要快照作为保护系统的手段。然而可复现是一回事，可复现的难易度又是一回事。<code>nixos-enter</code> 的缺陷、 minimal 镜像的折磨、外加 NVIDIA 驱动频繁崩溃，促使我用快照保护系统的安全。</p>
<p>在 nixos 上倒没有频繁打快照的必要，因为只要我有一个正常的快照，恢复后就可以从最新的配置文件 rebuild 回去（快照在这里起到的作用可能是 nixos-enter 的补充，使我能够使用盘里的缓存进行 rebuild），因此我选择不使用自动快照软件例如 snapper，而是手打。</p>
<p>nix 的根目录下都是符号链接，理论上有价值的快照理应是 nix 子卷快照而不是 root 快照。当然都打也可以。</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /nix/.snapshot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> btrfs</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> subvolume</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> snapshot</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /nix</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /nix/.snapshot/nix_20240629</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我还没有尝试过快照的恢复，等用到再更新吧。</p>
<p>ps. 理论上确实没必要为 <code>/nix</code> 打快照；我现在的解法是放一个 <code>minimal.nix</code> 作为崩溃的恢复，由于软件不多，重装也能快速装好。</p>
<h3>root on tmpfs</h3>
<p>由于大部分内容都是软链接，nixos 上能玩一个很骚的操作：把 root 挂载成 tmpfs。好处是每次重启所有东西都会被清，可以随便运行一些喜欢到处拉屎的软件。</p>
<p>我看的教程是<a href="https://lantian.pub/article/modify-computer/nixos-impermanence.lantian/" target="_blank" rel="noopener noreferrer">Lan Tian @ Blog NixOS 系列（四）：“无状态”操作系统</a>，结果还是踩了点坑。</p>
<ol>
<li>犯了<a href="https://nixos.wiki/wiki/Impermanence" target="_blank" rel="noopener noreferrer">官方文档中置顶标红</a>的大忌：<strong>没有设 user 密码</strong>。（之前的 defaultPassword 删掉了）于是进不去系统。快照打的是 <code>/nix</code>，但是密码在 <code>/etc/shadow</code> 并不归 <code>/nix</code> 管；也没法直接改挂载选项把原先的 <code>/</code> 挂上，因为 <code>nixos-enter</code> 进去<a href="#nixos-%E5%AE%89%E8%A3%85">无法 rebuild</a>，<code>--bootloader</code> 也是 <code>nixos-rebuild</code> 的，<code>nixos-install</code> 并没有。
<ul>
<li>最后还是改挂载选项重新 <code>nixos-install</code> 了，得益于使用 home-manager 把我的一大堆个人软件分开，本次 install 并没有花费太多时间。install 完至少能先进系统，再修配置，重启就结束了。</li>
</ul>
</li>
<li>然后发现我的 <code>/etc/nixos</code> 配置本身没有被 impermanence。。。遂从原先的 <code>/</code> 里拷贝之，加入 impermanence，rebuild 即可。</li>
</ol>
<p>教程中把 <code>/var</code> 加入 impermanence，而我更喜欢用 btrfs 子卷管理。由于直接在 <code>/var</code> 创建子卷，子卷的 parent 会指向 <code>/</code>，所以我进了一次 live cd 创建子卷，保持 <code>var</code> 子卷与 <code>root</code>、<code>home</code> 等同级，然后把东西移过去，重启后写 <code>hardware-configuration.nix</code> 然后 rebuild 就行。</p>
<p>之后我还尝试了其他东西，踩了一些坑：</p>
<ol>
<li>不要把 <code>/etc/shadow</code> 或 <code>/etc/passwd</code> 加入持久化。我加入以后开不了机，无法登录。</li>
</ol>
<h3>开发环境</h3>
<p>我一直使用 vscode，但是在 nixos 上，还是有点难用的。</p>
<ul>
<li>vscode 全自动同步过程中，有部分插件没有同步过来。</li>
<li>手动在 <code>home.nix</code> 里添加插件后，所有禁用的插件会被自动启用。</li>
<li>某些插件在非 feh 环境下无法运行；feh 环境下无法在终端使用 sudo。</li>
<li>无法使用 ssh 插件远程开发。</li>
</ul>
<h2>劝退</h2>
<p>最后来说说劝退。NixOS 自身的问题还是不小的：</p>
<ul>
<li>文档稀烂，缺乏条目
<ul>
<li>google 比文档多，学习靠社区解答</li>
</ul>
</li>
<li>社区不合，drama 不断</li>
<li>报错模糊</li>
<li><a href="/coding/package_manager.html#nix" target="_blank">包管理达不到预期</a></li>
<li>nix 开发，mkshell 实在是太烂了。
<ul>
<li>居然做不到 alias！</li>
</ul>
</li>
</ul>
<p>我在使用过程中也有一些想吐槽的（其实上面就有很多）：</p>
<ul>
<li>图形化安装界面垃圾</li>
<li>minimal 镜像缺功能</li>
<li>home manager 捞</li>
</ul>
<p>我的资历尚浅，只能够发出如此感叹。如果你希望看到更多对 nixos 的评价，可以看看 <a href="#external">external 2.</a>。</p>
<h2>external</h2>
<ol>
<li><a href="https://ayats.org/blog/no-flake-utils/" target="_blank" rel="noopener noreferrer">Why you don't need flake-utils</a></li>
<li><a href="https://thiscute.world/posts/my-experience-of-nixos/" target="_blank" rel="noopener noreferrer">OS as Code - 我的 NixOS 使用体会 - thiscute</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Android</title>
      <link>https://absx.pages.dev/coding/android.html</link>
      <guid>https://absx.pages.dev/coding/android.html</guid>
      <source url="https://absx.pages.dev/rss.xml">Android</source>
      <description>Android 因为一些契机，开始学习 Android 开发了。 学习 kotlin 请参考 ，这里不多讲。 B 站可以看看 扔物线，跟 python 领域的码农高天比较相似的存在，平常发零碎知识点，讲得也很现代。 Android Studio Android 开发官方唯一 IDE：Android Studio。我曾经是个 all in vscode，...</description>
      <category>编程</category>
      <category>应用</category>
      <pubDate>Sat, 15 Jun 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>因为一些契机，开始学习 Android 开发了。</p>
<h2>学习</h2>
<p>kotlin 请参考 <a href="/coding/kotlin.html" target="_blank">kotlin</a>，这里不多讲。</p>
<p>B 站可以看看 <a href="https://space.bilibili.com/27559447" target="_blank" rel="noopener noreferrer">扔物线</a>，跟 python 领域的码农高天比较相似的存在，平常发零碎知识点，讲得也很现代。</p>
<h2>Android Studio</h2>
<p>Android 开发官方唯一 IDE：Android Studio。我曾经是个 all in vscode，然而 Android in vscode 简直寸步难行，甚至 kotlin 在 vscode 上都显得无力，因此我不得不克服对 Android Studio（以下简称 AS） 的恐惧，开始使用这个基于 IDEA 的重量级的 IDE。</p>
<p>安装显然是装新不装旧，不多讲。代理也要准备好，它在编译项目时会到处拉依赖项，没有代理的话会奇慢无比。</p>
<h3>使用技巧</h3>
<ul>
<li><code>Ctrl + f</code> 只有查找，<code>Ctrl + r</code> 才有替换</li>
</ul>
<h3>配置</h3>
<ol>
<li>插件：
<ul>
<li>禁用一些 Google 家的垃圾</li>
<li><s>Key Promoter X</s> 不是纯键盘党，不用</li>
<li>CodeGlance Pro</li>
<li>Rainbow Brackets</li>
<li>Material UI Theme，先用 GitHub Dark (Material) 一段时间</li>
<li>AI 插件
<ul>
<li>cody 完全不可用就不多说了</li>
<li>codiumate 登录认证过不了，还会把 AS 卡死</li>
<li>最后还是回到了 vscode 时的老朋友 <strong>Codeium</strong>
<ul>
<li>关掉 <em>Show Selection Toolbar</em>，这个很烦</li>
</ul>
</li>
</ul>
</li>
<li>两个 json 插件：<em>JSON To Kotlin Class</em>，<em>GsonFormat</em></li>
<li><s>vim 插件：ideavim</s> 太捞了，不用
<ol>
<li>这个 vim 插件的所有设置项就只有解决与 IDE 快捷键冲突的了。。什么加 bindings 都干不了。</li>
<li>无法与系统剪切板交互。</li>
</ol>
</li>
<li><s>Settings Sync</s> 连登录都登录不了。</li>
</ul>
</li>
<li><em>File - Settings - Tools - Actions on Save</em>，除了 Code Cleanup 全开。</li>
<li>更改 KeyMap：
<ul>
<li>Close Tab: <code>Ctrl + w</code></li>
<li>Remove Closed Tab：<code>Ctrl + Shift + t</code></li>
<li>Comment with line Comment: <code>Ctrl + /</code></li>
<li>Refactor - Rename: <code>F2</code></li>
<li>Generate Compose Preview：<code>Ctrl + p</code></li>
</ul>
</li>
<li>更多 Inlay Hints：<em>Editor - Inlay Hints</em>，打开除了 <em>Code vision</em> 和 <em>Annotations</em> 的其他所有 Inlay Hints</li>
<li>proxy: <em>auto-detect proxy settings</em></li>
</ol>
<h3>编译运行</h3>
<p>我试了虚拟设备，但是每次运行都会报错 Error Creating AVD。感觉不如 wireless adb 连自己手机。</p>
<h3>劝退</h3>
<p><a href="/gossip/fuckxxx.html#android-studio-%E6%9C%89%E5%A4%9A%E9%9A%BE%E7%94%A8" target="_blank">Android Studio 有多难用？</a></p>
<h2>UI</h2>
<h3>传统 UI</h3>
<h4>更改按钮反馈</h4>
<p>一般人肯定希望按钮按下时颜色会加深，能够出现按钮的反馈。加反馈很简单：在 drawable 里加一个 selector，然后在 layout 里给 background 用即可。</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">selector</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> xmlns:android</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"http://schemas.android.com/apk/res/android"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> android:color</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"?attr/colorPrimary"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> android:state_pressed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"true"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> android:color</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"?attr/colorOnSurface"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">selector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>难的是加的反馈要适应 day 和 night 的主题，所以颜色不能定死。不仅要同时修改 background 和 textColor，而且主题可能会更换颜色，此时按钮的颜色也需要跟随主题变换。</p>
<p>我折腾许久，最后放弃使用颜色变换，而是使用 alpha，绕开了这个使我为难许久的问题。</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"utf-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">selector</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> xmlns:android</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"http://schemas.android.com/apk/res/android"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> android:alpha</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"0.25"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> android:state_pressed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"true"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66"> android:alpha</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"0.1"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">selector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Jetpack Compose</h3>
<p>这是一种新的 UI 写法，Google 强推的下一代 UI，在 kotlin 写前端，完全抛弃 xml。里面的组件全部是 kotlin 的函数。显然，必需使用 kotlin，不能使用 java。</p>
<p>Jetpack Compose 是数据驱动的，写法非常简单，我很喜欢。可以类比用 js 对象树模拟 DOM 的 <a href="/coding/html.html#%E5%B7%A5%E5%85%B7" target="_blank">vanjs</a> 等。</p>
<p>我本来接触的项目是 openppp2，它用的是 java，上不了这个；但是大四上学校有一个实践，刚好是做 Android，那我可就不客气了，开写！</p>
<h4>学习</h4>
<p>Jetpack Compose 的资料良莠不齐，比如 b 站上基本没有什么 compose 相关视频，并且有的那一小撮质量也很差。这里列举一些我认可的学习资料：</p>
<ul>
<li><a href="https://developer.android.com/courses/pathways/jetpack-compose-for-android-developers-1?hl=zh-cn" target="_blank" rel="noopener noreferrer">Compose 基础知识 - Google</a>：google 家官方的视频还不错</li>
<li><a href="https://jetpackcompose.cn/docs/" target="_blank" rel="noopener noreferrer">Jetpack Compose 博物馆</a>：中文社区的好文档，介绍了许多组件</li>
<li><a href="https://leobert-lan.github.io/Compose/index.html" target="_blank" rel="noopener noreferrer">leobert's blog</a>：有一些源码分析</li>
</ul>
<p>然后到 2024 年 9 月，GPT-4o 写 Jetpack Compose 的正确率还是比其他的 AI 高不少，建议用 GPT 写。</p>
<h4>Preview</h4>
<p>Compose 本来也应该能够像老式 xml 一样 preview 的，只要将 <code>@Compose</code> 函数加上 <code>@Preview</code> 即可。但是我从新建项目开始就无法 preview，点击 Android Studio 右上角的 <em>Split</em> 或者 <em>Design</em> 都<strong>没反应</strong>。找了一下，stackoverflow 说这是 bug，于是我都要去 run 来看效果。</p>
<p>我从来没有怀疑过是 android studio 新建项目时 <code>build.gradle.kts</code> 的问题。然后某一天我刷到了<a href="https://developer.android.com/develop/ui/compose/tooling?hl=zh-tw#individually" target="_blank" rel="noopener noreferrer">官方文档的这个页面</a>，发现这个好像跟 <code>build.gradle.kts</code> 里默认的不太一样。新建项目时自带的是：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>implementation(libs.androidx.ui.tooling.preview)</span></span>
<span class="line"><span>debugImplementation(libs.androidx.ui.tooling)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>而我从文档里抄的是：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>implementation(libs.ui.tooling.preview)</span></span>
<span class="line"><span>debugImplementation(libs.ui.tooling)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>换完后者以后点击 <em>Split</em> 就能 preview 了，生草。</p>
<h4>remember</h4>
<p>Composable 中使用 remember 进行状态传递，这让其成为数据驱动的 UI，简单易懂。remember 变量被修改后，绑定的 UI 会自动重绘。</p>
<p>有几种 remember 的用法：</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 1. mapVisible 是一个 Boolean，这是一个语法糖。可以直接用，方便。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 缺点是几乎不可能传给其他 Composable，只能在当前 Composable 用。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> mapVisible </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) } </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 2. mapVisible 是一个 MutableState&lt;Boolean&gt;，必须要 `.value` 才能拿到内部值。但是可以到处传。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> mapVisible </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>icons</h4>
<p>显然我懒得找 icon 了，而 android material 有一套内置的，非常好用。</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> androidx.compose.material.icons.Icons</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> androidx.compose.material.icons.filled.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">NavigationBarItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  icon </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    Icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      imageVector </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> Icons.Default.Home,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "home"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于哪里能找到所有 icon，emmm，第一个当然是看 IDE 补全的提示。 <a href="https://fonts.google.com/icons" target="_blank" rel="noopener noreferrer">Google Fonts</a> 也可以看（<a href="https://slack-chats.kotlinlang.org/t/509025/is-there-list-of-icons-to-browse-for-jetpack-compose" target="_blank" rel="noopener noreferrer">ref</a>），但是 material 包里默认的 icon 数量相当少，只能看一部分。那么如何拿到更多的 icons 呢？答：可以用 <a href="https://stackoverflow.com/a/78616305" target="_blank" rel="noopener noreferrer">libs.androidx.material.icons.extended</a>，这下就全了。（记得要同步依赖）</p>
<h4>获取宽度</h4>
<p>我们可能需要手动获取某个 view 内部的宽度，以进行一些其他计算。这一点 jetpack compose 做的还是有待提高，现在还是有一点麻烦的：</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> density </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> LocalDensity.current </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 获取当前的 Density 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> pxToDp </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { px: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">with</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">density</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) { px.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">toDp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() } }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Row</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">onGloballyPositioned</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { coordinates </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">      // 获取 Row 的宽度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      widthDp </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> pxToDp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(coordinates.size.width)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">  // 然后就能把 `widthDp` 拿来用了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>调用 Fragment</h4>
<p>有一个 <code>AndroidFragment</code> 能直接在 Composable 内渲染 Fragment。</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> RT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Fragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> fragmentState </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> rememberFragmentState</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  AndroidFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">RT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    fragmentState </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> fragmentState</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>局限性还是很大的，比如你的 <code>AndroidFragment</code> 必须在 <code>FragmentActivity()</code> 上下文使用，<code>class RT : Fragment()</code> 必须拥有空构造函数等。</p>
<h4>劝退</h4>
<p>Jetpack Compose 的思想很好，开发效率很高，但是写起来还是有不少问题的。</p>
<p>最大的问题还是<strong>各种场景下对 Activity 的依赖</strong>。Jetpack Compose 摆脱了界面对 Activity 的依赖，但是很多时候你的模块没有 Activity 还不行。然后 Jetpack Compose 对 Fragment 和 Activity 的耦合也不太行，导致开发效率都被踩坑踩完了。关键是这些 Activity 的问题还都是运行时崩溃，编译时根本不会提醒。Java 系的梦幻报错再赢一次。</p>
<p>还有支持 Compose 的库还是不够稳定，例如 <a href="https://github.com/googlemaps/android-maps-compose/" target="_blank" rel="noopener noreferrer">Google Maps Compose</a>，我刚入门就踩了个这玩意两年前的 <a href="https://github.com/googlemaps/android-maps-compose/issues/105" target="_blank" rel="noopener noreferrer">open issue</a>。</p>
<p>还有各种稀奇古怪的上下文与作用域规定，写得多了总会遇到。最简单的就是 <code>remember { mutableStateOf() }</code> 必须在 <code>@Composable</code> 内使用，这些中间状态如果还要分发到其他函数就必须使用</p>
<h3>我的模板</h3>
<p>一些高度泛用，加速开发的模板（组件）代码。</p>
<h4>DropdownMenu on Enum</h4>
<details class="hint-container details"><summary>从任意 enum class 创建 DropdownMenu</summary>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">EnumDropdownMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  enumClass: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  selectedEnum: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  onEnumSelected: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> expanded </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) } </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 控制菜单展开状态</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  Box</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">wrapContentSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(Alignment.TopStart)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    TextButton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { expanded </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">      Text</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> selectedEnum.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 显示当前选中的 Enum 名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    DropdownMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      expanded </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> expanded,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      onDismissRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { expanded </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">      // 使用 enumClass 获取所有枚举值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      enumClass.enumConstants?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { enumValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        DropdownMenuItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> enumValue.name) }, onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">          onEnumSelected</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(enumValue) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 选择逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">          expanded </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> // 关闭菜单</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法：</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">@Preview</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> selectedEnum </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(MyEnum.Option1) } </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 默认选中 Option1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  Column</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "Selected: </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD">${</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF">selectedEnum.name</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // 传递 MyEnum::class.java 来指定枚举类</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    EnumDropdownMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      enumClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> MyEnum::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.java,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      selectedEnum </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> selectedEnum,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">      onEnumSelected </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { selectedEnum </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> it }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> MyEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  Option1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  Option2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  Option3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<h2>Log</h2>
<p>打 log 也是很重要的，android 一般在 Logcat 里打 log。</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> android.util.Log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">w</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Mytag"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"message"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Logcat 窗口 filter 里写 <code>tag:Mytag</code> 即可。</p>
<p>还有一个小插曲，我之前明明打了 log 但是在 logcat 里怎么也看不到，莫名其妙，气死了。我直接在 Text 里打 log，结果发现 Text 里的字符也没变。一看，编译目标是那个 Composable Preview，不是 app。。。</p>
<h2>Test</h2>
<p>Android 一共有两种测试，androidTest 和 test (unittest)。两个测试中使用的依赖要分别引入：</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"test"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">androidTestImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"test"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>Android 虽然有单元测试，但是并不写在当前的代码里。这一点跟 pytest 等是一样的，但是我并不喜欢。而且还容易爆 <code>java.lang.NoClassDefFoundError</code>，原因不明，我至今未解决。</p>
<p>新创建的空白项目中，Android studio 给了一个 Unittest 示例，照着抄就完了，非常简单。至于快速添加 test：右击 class，在 <em>Generate</em> 里选 <em>Test</em>，然后 <em>OK</em>，记得把 <em>show only existing source roots</em> 关了就行。</p>
<p>在使用 assertEquals 中<a href="https://t.me/withabsolutex/1954" target="_blank" rel="noopener noreferrer">我被坑了</a>，请务必用 <code>kotlin.test.assertEquals</code>。（把 message 放在前面的设计简直不是人。）</p>
<h2>Gradle</h2>
<p>Gradle 是 android 也是 java 的广泛使用的包管理器，但是说它烂也是真的烂。</p>
<ul>
<li>这玩意是 java 写的，报错实在是不敢恭维。</li>
<li>您猜猜 build.gradle 有多少种版本？即使在 kotlin DSL 的 <code>build.gradle.kts</code> 里都有多种不同的写法，例如 <code>ksp("androidx.room:room-compiler:2.5.0")</code> 和 <code>ksp(libs.androidx.room.room.compiler2)</code>，它们的区别在哪？</li>
<li>您猜猜 <code>androidx.room.room.compiler</code>, <code>androidx.room.room.compiler2</code>, <code>androidx.room.compiler</code>, <code>room.compiler</code> 哪一个才是正确的依赖？</li>
</ul>
<p>20240906 我因为引入 Room 依赖的原因被 gradle 折磨了一个上午，最终被<a href="https://stackoverflow.com/questions/77665284" target="_blank" rel="noopener noreferrer">一篇 stackoverflow 回答</a>点拨了一下，终于看懂了 <code>build.gradle.kts</code> 是怎么工作的了。于是在此处写下记录。</p>
<p>一个 Android 项目的 Gradle Scripts 下有几个重要的文件，一个是大家都会用的 Module app 层的 <code>build.gradle.kts</code>，还有一个是顶层 Project 层的 <code>build.gradle.kts</code>。然而这都不是最重要的，最重要的其实是 <code>libs.versions.toml</code>，这也是两个 <code>build.gradle.kts</code> 的根基。</p>
<p>我们平时在 <code>build.gradle.kts</code> 里添加依赖，gradle sync 时就会自动把需要的东西 resolve 进 <code>libs.versions.toml</code>。然后这些 resolve 方式非常脏，会把 <code>libs.versions.toml</code> 弄得一团糟，比如 resolve Room 时堆了一堆 <em>room-common</em>，<em>room-compiler</em> 等等，然后这些 room package 的 version 也都是重复多余的；另一个例子是 ksp 引入时它的 version 跟 kotlin version 也不匹配，导致 gradle build 时直接爆炸。</p>
<p>所以直接看 <code>libs.versions.toml</code>，<code>[versions]</code> 提供了 name 到 versions 的一个 alias，这个 alias 在后续每个条目的 <code>version.ref</code> 里使用。<code>[libraries]</code> 就是 APP 层 <code>build.gradle.kts</code> 的 <code>libs.xxx</code> 引用的玩意，<code>[plugins]</code> 就是两个 <code>build.gradle.kts</code> 里 plugins 块里引用的玩意，这样一来就清晰很多了。</p>
<p>因此回到 Room 配置的问题，在 2024 年的 Android Studio + Kotlin 下，我们不能像 sb <a href="https://developer.android.com/training/data-storage/room?hl=zh-tw" target="_blank" rel="noopener noreferrer">官方文档</a>那样配置，而是应该：</p>
<ol>
<li>
<p>编辑 <code>libs.versions.toml</code>，</p>
<div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">versions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"2.0.20"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">room</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"2.6.1"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">ksp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"2.0.20-1.0.25"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">room-common</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">group</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"androidx.room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room-common"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version.ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">room-runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">group</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"androidx.room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room-runtime"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version.ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">room-compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">group</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"androidx.room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room-compiler"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version.ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">room-testing</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">group</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"androidx.room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room-testing"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version.ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">room-ktx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">group</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"androidx.room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room-ktx"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version.ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"room"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">ksp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"com.google.devtools.ksp"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">version.ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"ksp"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写的依据是：</p>
<ol>
<li>所有 room 相关的包必须是同版本，无需多个 versions</li>
<li>ksp 版本必须和 kotlin 版本一致</li>
</ol>
</li>
<li>
<p>然后就可以愉快地引用了。</p>
<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 顶层</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  alias</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.plugins.ksp) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// APP 层</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  alias</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.plugins.ksp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.room.common)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.room.runtime)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  annotationProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.room.compiler)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  ksp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.room.compiler)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.room.ktx)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(libs.room.testing)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ol>
<h2>权限</h2>
<p>放眼 Android，最复杂，坑最多的地方莫归于权限了。不同的 API 版本有不同的权限处理方案，这些方案杂糅在一起，网上一大堆教程和 GPT 几乎全部作废。我几度被权限折磨得死去活来，并最终放弃 Android 开发。</p>
<p>我刚开始写 Android 时还想着抽象一个 class PermissionManager 解决所有权限问题。显然我想得太简单了。各种需要缓存的中间对象，各种 Permission 需要的上下文都不同，这样只是死路一条。</p>
]]></content:encoded>
    </item>
    <item>
      <title>下载器横评</title>
      <link>https://absx.pages.dev/articles/downloaders.html</link>
      <guid>https://absx.pages.dev/articles/downloaders.html</guid>
      <source url="https://absx.pages.dev/rss.xml">下载器横评</source>
      <description>下载器横评 下载器能够多线程下载网络资源，使带宽最大化。 写一个下载器实际上也没有什么难度。只需要用一个最基本的异步模型，加上一些 http 的小细节即可。这里有一位老哥已经写了一个简易版下载器，我引用 ta 只想说明下载器真没有什么技术含量。 这理应是所有浏览器必需内置的功能。在写此文时查了一下，主流的浏览器都自带多线程下载功能，可以在 flags ...</description>
      <category>推荐</category>
      <category>评价</category>
      <pubDate>Tue, 11 Jun 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>下载器能够多线程下载网络资源，使带宽最大化。</p>
<p>写一个下载器实际上也没有什么难度。只需要用一个最基本的异步模型，加上一些 http 的小细节即可。<a href="https://ochagavia.nl/blog/download-accelerator-async-rust-edition/" target="_blank" rel="noopener noreferrer">这里</a>有一位老哥已经写了一个简易版下载器，我引用 ta 只想说明下载器真没有什么技术含量。</p>
<p>这理应是所有浏览器必需内置的功能。在写此文时查了一下，主流的浏览器都自带多线程下载功能，可以在 flags 里启用；实测下来，其下载速度与下载器有差距但不算太大，理论上可以抛弃下载器。</p>
<p>测试：（<a href="https://gh.con.sh/https://github.com/AaronFeng753/Waifu2x-Extension-GUI/releases/download/v2.21.12/Waifu2x-Extension-GUI-v2.21.12-Portable.7z" target="_blank" rel="noopener noreferrer">测试链接</a>；关闭代理）</p>
<p>需要注意的是，这样的测试方法的波动还是相当大的，毕竟我校的网络就是一坨屎。</p>
<p>|         方式          | 下载速度（MB/s） |
| :</p>
]]></content:encoded>
    </item>
  </channel>
</rss>